!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEFALLOC_H	stl/defalloc.h	27;"	d
Dist	stl/container_concepts.h	/^  typedef typename _Mutable_trait<_Dist>::_Type Dist;$/;"	t
NOMINMAX	stl/stl_config.h	383;"	d
STL_SEQUENCE_CONCEPTS_H	stl/sequence_concepts.h	15;"	d
Type	stl/container_concepts.h	/^  typedef typename _Mutable_trait<__T>::_Type Type;$/;"	t
_ALIGN	stl/stl_alloc.h	/^    enum {_ALIGN = 8};$/;"	e	enum:std::__default_alloc_template::__anon12
_ALIGN	stl/stl_alloc.h	/^  enum {_ALIGN = 8};$/;"	e	enum:std::__anon9
_Alloc	stl/ropeimpl.h	/^  typedef typename _Rope_iterator::_allocator_type _Alloc;$/;"	t
_Alloc	stl/stl_alloc.h	/^  typedef alloc _Alloc;          \/\/ The underlying allocator.$/;"	t	class:std::allocator	access:private
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits$/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, $/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, __allocator<_Tp1, debug_alloc<_Alloc> > >$/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, __default_alloc_template<__threads, __inst> >$/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, __malloc_alloc_template<__inst> >$/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, allocator<_Tp1> >$/;"	s
_Alloc_traits	stl/stl_alloc.h	/^struct _Alloc_traits<_Tp, debug_alloc<_Alloc> >$/;"	s
_Alloc_traits::_Alloc_type	stl/stl_alloc.h	/^          _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, alloc> _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, debug_alloc<_Alloc> > _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::_S_instanceless	stl/stl_alloc.h	/^  static const bool _S_instanceless = false;$/;"	m	struct:_Alloc_traits	access:public
_Alloc_traits::_S_instanceless	stl/stl_alloc.h	/^  static const bool _S_instanceless = true;$/;"	m	struct:_Alloc_traits	access:public
_Alloc_traits::_S_instanceless	stl/stl_alloc.h	/^const bool _Alloc_traits<_Tp, _Allocator>::_S_instanceless;$/;"	m	class:_Alloc_traits
_Alloc_traits::allocator_type	stl/stl_alloc.h	/^          allocator_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::allocator_type	stl/stl_alloc.h	/^  typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::allocator_type	stl/stl_alloc.h	/^  typedef __allocator<_Tp, debug_alloc<_Alloc> > allocator_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_traits::allocator_type	stl/stl_alloc.h	/^  typedef allocator<_Tp> allocator_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_type	stl/stl_alloc.h	/^          _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, alloc> _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_type	stl/stl_alloc.h	/^  typedef simple_alloc<_Tp, debug_alloc<_Alloc> > _Alloc_type;$/;"	t	struct:_Alloc_traits	access:public
_Alloc_type	stl/stl_bvector.h	/^          _Alloc_type;$/;"	t	class:std::_Bvector_alloc_base	access:protected
_Alloc_type	stl/stl_bvector.h	/^  typedef simple_alloc<unsigned int, _Alloc> _Alloc_type;$/;"	t	class:std::_Bvector_base	access:protected
_Alloc_type	stl/stl_list.h	/^          _Alloc_type;$/;"	t	class:std::_List_alloc_base	access:protected
_Alloc_type	stl/stl_list.h	/^  typedef simple_alloc<_List_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	class:std::_List_base	access:protected
_Alloc_type	stl/stl_slist.h	/^          _Alloc_type;$/;"	t	class:std::_Slist_alloc_base	access:protected
_Alloc_type	stl/stl_slist.h	/^  typedef simple_alloc<_Slist_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:std::_Slist_base	access:protected
_Alloc_type	stl/stl_tree.h	/^          _Alloc_type;$/;"	t	class:std::_Rb_tree_alloc_base	access:protected
_Alloc_type	stl/stl_tree.h	/^  typedef simple_alloc<_Rb_tree_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:std::_Rb_tree_base	access:protected
_Alloc_type	stl/stl_vector.h	/^  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;$/;"	t	class:std::_Vector_alloc_base	access:protected
_Allocator_concept_specification	stl/concept_checks.h	/^struct _Allocator_concept_specification {$/;"	s
_Allocator_concept_specification::_Allocator_requirement_violation	stl/concept_checks.h	/^_Allocator_requirement_violation(_Alloc __a) {$/;"	f	struct:_Allocator_concept_specification	access:public	signature:(_Alloc __a)
_Allocator_concept_specification::_DefaultConstructible_concept_specification::_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^    _DefaultConstructible_requirement_violation(__a);$/;"	p	class:_Allocator_concept_specification::_DefaultConstructible_concept_specification	signature:(__a)
_Allocator_concept_specification::_EqualityComparable_concept_specification::_EqualityComparable_requirement_violation	stl/concept_checks.h	/^    _EqualityComparable_requirement_violation(__a);$/;"	p	class:_Allocator_concept_specification::_EqualityComparable_concept_specification	signature:(__a)
_Allocator_concept_specification::_Tp	stl/concept_checks.h	/^  typedef typename _Alloc::value_type _Tp;$/;"	t
_Allocator_requirement_violation	stl/concept_checks.h	/^_Allocator_requirement_violation(_Alloc __a) {$/;"	f	struct:_Allocator_concept_specification	access:public	signature:(_Alloc __a)
_Arg1_type	stl/stl_function.h	/^  typedef typename _Operation::first_argument_type _Arg1_type;$/;"	t
_Arg2_type	stl/stl_function.h	/^  typedef typename _Operation::second_argument_type _Arg2_type;$/;"	t
_Assignable_concept_specification	stl/concept_checks.h	/^struct _Assignable_concept_specification {$/;"	s
_Assignable_concept_specification::_Assignable_requirement_violation	stl/concept_checks.h	/^  static void _Assignable_requirement_violation(_Type __a) {$/;"	f	struct:_Assignable_concept_specification	access:public	signature:(_Type __a)
_Assignable_concept_specification::_STL_ERROR::__assignment_operator_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__assignment_operator_requirement_violation(__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a)
_Assignable_concept_specification::_STL_ERROR::__const_parameter_required_for_assignment_operator	stl/concept_checks.h	/^    _STL_ERROR::__const_parameter_required_for_assignment_operator(__a,__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a,__a)
_Assignable_concept_specification::_STL_ERROR::__const_parameter_required_for_copy_constructor	stl/concept_checks.h	/^    _STL_ERROR::__const_parameter_required_for_copy_constructor(__a,__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a,__a)
_Assignable_concept_specification::_STL_ERROR::__copy_constructor_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__copy_constructor_requirement_violation(__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a)
_Assignable_requirement_violation	stl/concept_checks.h	/^    _Assignable_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_Assignable_concept_specification	signature:(__i)
_Assignable_requirement_violation	stl/concept_checks.h	/^    _Assignable_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_Assignable_concept_specification	signature:(__i)
_Assignable_requirement_violation	stl/concept_checks.h	/^  static void _Assignable_requirement_violation(_Type __a) {$/;"	f	struct:_Assignable_concept_specification	access:public	signature:(_Type __a)
_Assignable_requirement_violation	stl/container_concepts.h	/^  _Assignable_concept_specification<_Container>::_Assignable_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_Assignable_concept_specification	signature:(__c)
_Atomic_swap	stl/stl_threads.h	/^    inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	namespace:std	signature:(unsigned long * __p, unsigned long __q)
_Atomic_swap	stl/stl_threads.h	/^    static inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	namespace:std	signature:(unsigned long * __p, unsigned long __q)
_BackInsertionSequence_concept_specification	stl/sequence_concepts.h	/^struct _BackInsertionSequence_concept_specification {$/;"	s
_BackInsertionSequence_concept_specification::_BackInsertionSequence_requirement_violation	stl/sequence_concepts.h	/^_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {$/;"	f	struct:_BackInsertionSequence_concept_specification	access:public	signature:(_BackInsertionSequence __s)
_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ::__back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ::__push_back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__push_back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_BackInsertionSequence_concept_specification::_Sequence_concept_specification::_Sequence_requirement_violation	stl/sequence_concepts.h	/^  _Sequence_concept_specification<_BackInsertionSequence>::_Sequence_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_Sequence_concept_specification	signature:(__s)
_BackInsertionSequence_requirement_violation	stl/sequence_concepts.h	/^_BackInsertionSequence_requirement_violation(_BackInsertionSequence __s) {$/;"	f	struct:_BackInsertionSequence_concept_specification	access:public	signature:(_BackInsertionSequence __s)
_Base	stl/stl_bvector.h	/^          _Base;$/;"	t	class:std::_Bvector_base	access:private
_Base	stl/stl_deque.h	/^          _Base;$/;"	t	class:std::_Deque_base	access:public
_Base	stl/stl_deque.h	/^  typedef _Deque_base<_Tp, _Alloc> _Base;$/;"	t	class:std::deque	access:private
_Base	stl/stl_list.h	/^          _Base; $/;"	t	class:std::_List_base	access:public
_Base	stl/stl_list.h	/^  typedef _List_base<_Tp, _Alloc> _Base;$/;"	t	class:std::list	access:private
_Base	stl/stl_rope.h	/^          _Base;$/;"	t	struct:std::_Rope_base	access:public
_Base	stl/stl_rope.h	/^          _Base;$/;"	t	struct:std::_Rope_rep_base	access:public
_Base	stl/stl_rope.h	/^        typedef _Rope_base<_CharT,_Alloc> _Base;$/;"	t	class:std::rope	access:protected
_Base	stl/stl_slist.h	/^          _Base;$/;"	t	struct:std::_Slist_base	access:public
_Base	stl/stl_slist.h	/^  typedef _Slist_base<_Tp,_Alloc> _Base;$/;"	t	class:std::slist	access:private
_Base	stl/stl_tree.h	/^          _Base;$/;"	t	struct:std::_Rb_tree_base	access:public
_Base	stl/stl_tree.h	/^  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;$/;"	t	struct:std::rb_tree	access:public
_Base	stl/stl_tree.h	/^  typedef _Rb_tree_base<_Value, _Alloc> _Base;$/;"	t	class:std::_Rb_tree	access:private
_Base	stl/stl_vector.h	/^          _Base;$/;"	t	struct:std::_Vector_base	access:public
_Base	stl/stl_vector.h	/^  typedef _Vector_base<_Tp, _Alloc> _Base;$/;"	t	class:std::vector	access:private
_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
_BidirectionalIterator_concept_specification	stl/concept_checks.h	/^struct _BidirectionalIterator_concept_specification {$/;"	s
_BidirectionalIterator_concept_specification::_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {$/;"	f	struct:_BidirectionalIterator_concept_specification	access:public	signature:(_BidirectionalIterator __i)
_BidirectionalIterator_concept_specification::_ForwardIterator_concept_specification::_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _ForwardIterator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_ForwardIterator_concept_specification	signature:(__i)
_BidirectionalIterator_concept_specification::_STL_ERROR::__postdecrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postdecrement_operator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i)
_BidirectionalIterator_concept_specification::_STL_ERROR::__predecrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__predecrement_operator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i)
_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_BidirectionalIterator_concept_specification	signature:(__i)
_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_RandomAccessIterator_concept_specification::_BidirectionalIterator_concept_specification	signature:(__i)
_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^_BidirectionalIterator_requirement_violation(_BidirectionalIterator __i) {$/;"	f	struct:_BidirectionalIterator_concept_specification	access:public	signature:(_BidirectionalIterator __i)
_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator(const _Bit_iterator& __x) $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_const_iterator	stl/stl_bvector.h	/^struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator	stl/stl_bvector.h	/^  _Bit_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
_Bit_iterator	stl/stl_bvector.h	/^  _Bit_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator	stl/stl_bvector.h	/^struct _Bit_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator_base	stl/stl_bvector.h	/^  _Bit_iterator_base(unsigned int* __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_iterator_base	stl/stl_bvector.h	/^struct _Bit_iterator_base : public random_access_iterator<bool, ptrdiff_t> $/;"	s	namespace:std	inherits:random_access_iterator
_Bit_reference	stl/stl_bvector.h	/^  _Bit_reference() : _M_p(0), _M_mask(0) {}$/;"	f	struct:std::_Bit_reference	access:public	signature:()
_Bit_reference	stl/stl_bvector.h	/^  _Bit_reference(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_reference	access:public	signature:(unsigned int* __x, unsigned int __y)
_Bit_reference	stl/stl_bvector.h	/^struct _Bit_reference {$/;"	s	namespace:std
_Bvector_alloc_base	stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:(const allocator_type& __a)
_Bvector_alloc_base	stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type&)$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:(const allocator_type&)
_Bvector_alloc_base	stl/stl_bvector.h	/^class _Bvector_alloc_base {$/;"	c	namespace:std
_Bvector_alloc_base	stl/stl_bvector.h	/^class _Bvector_alloc_base<_Allocator, true> {$/;"	c	namespace:std
_Bvector_base	stl/stl_bvector.h	/^  _Bvector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	class:std::_Bvector_base	access:public	signature:(const allocator_type& __a)
_Bvector_base	stl/stl_bvector.h	/^  _Bvector_base(const allocator_type&)$/;"	f	class:std::_Bvector_base	access:public	signature:(const allocator_type&)
_Bvector_base	stl/stl_bvector.h	/^class _Bvector_base$/;"	c	namespace:std	inherits:_Bvector_alloc_base
_Bvector_base	stl/stl_bvector.h	/^class _Bvector_base$/;"	c	namespace:std
_Cat	stl/stl_algobase.h	/^          _Cat;$/;"	t	struct:std::__copy_backward_dispatch	access:public
_Category	stl/stl_algobase.h	/^    typedef typename iterator_traits<_InputIter>::iterator_category _Category;$/;"	t
_Category	stl/stl_iterator_base.h	/^    _Category;$/;"	t
_Category	stl/stl_iterator_base.h	/^  typedef typename iterator_traits<_Iter>::iterator_category _Category;$/;"	t
_CharT	stl/ropeimpl.h	/^  typedef typename _Rope_iterator::value_type _CharT;$/;"	t
_Color_type	stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	class:std::_Rb_tree	access:protected
_Color_type	stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	struct:std::_Rb_tree_node_base	access:public
_Constant_binary_fun	stl/stl_function.h	/^  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_binary_fun	access:public	signature:(const _Result& __v)
_Constant_binary_fun	stl/stl_function.h	/^struct _Constant_binary_fun {$/;"	s	namespace:std
_Constant_unary_fun	stl/stl_function.h	/^  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_unary_fun	access:public	signature:(const result_type& __v)
_Constant_unary_fun	stl/stl_function.h	/^struct _Constant_unary_fun {$/;"	s	namespace:std
_Constant_void_fun	stl/stl_function.h	/^  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_void_fun	access:public	signature:(const result_type& __v)
_Constant_void_fun	stl/stl_function.h	/^struct _Constant_void_fun {$/;"	s	namespace:std
_Construct	stl/stl_construct.h	/^inline void _Construct(_T1* __p) {$/;"	f	namespace:std	signature:(_T1* __p)
_Construct	stl/stl_construct.h	/^inline void _Construct(_T1* __p, const _T2& __value) {$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
_Container	stl/stl_hash_map.h	/^  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
_Container	stl/stl_hash_map.h	/^  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
_Container	stl/stl_hash_set.h	/^  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
_Container	stl/stl_hash_set.h	/^  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
_Container	stl/stl_slist.h	/^  typedef slist<_Tp, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
_Container_concept_specification	stl/container_concepts.h	/^struct _Container_concept_specification {$/;"	s
_Container_concept_specification::_Assignable_concept_specification::_Assignable_requirement_violation	stl/container_concepts.h	/^  _Assignable_concept_specification<_Container>::_Assignable_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_Assignable_concept_specification	signature:(__c)
_Container_concept_specification::_Container_requirement_violation	stl/container_concepts.h	/^_Container_requirement_violation(_Container __c) {$/;"	f	struct:_Container_concept_specification	access:public	signature:(_Container __c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__size_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__size_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_Container_concept_specification::_InputIterator_concept_specification::const_iter	stl/container_concepts.h	/^  _InputIterator_concept_specification<const_iter>::_InputIterator_requirement_violation(const_iter());$/;"	p	class:_Container_concept_specification::_InputIterator_concept_specification	signature:()
_Container_concept_specification::_InputIterator_concept_specification::iter	stl/container_concepts.h	/^  _InputIterator_concept_specification<iter>::_InputIterator_requirement_violation(iter());$/;"	p	class:_Container_concept_specification::_InputIterator_concept_specification	signature:()
_Container_concept_specification::const_iter	stl/container_concepts.h	/^  typedef typename _Container::const_iterator const_iter;$/;"	t
_Container_concept_specification::iter	stl/container_concepts.h	/^  typedef typename _Container::iterator iter;$/;"	t
_Container_requirement_violation	stl/container_concepts.h	/^  _Container_concept_specification<_ForwardContainer>::_Container_requirement_violation(__c);$/;"	p	class:_ForwardContainer_concept_specification::_Container_concept_specification	signature:(__c)
_Container_requirement_violation	stl/container_concepts.h	/^  _Container_concept_specification<_ReversibleContainer>::_Container_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_Container_concept_specification	signature:(__c)
_Container_requirement_violation	stl/container_concepts.h	/^_Container_requirement_violation(_Container __c) {$/;"	f	struct:_Container_concept_specification	access:public	signature:(_Container __c)
_Cstrptr	stl/stl_rope.h	/^        typedef __GC_CONST _CharT* _Cstrptr;$/;"	t	class:std::rope	access:protected
_DefaultConstructible_concept_specification	stl/concept_checks.h	/^struct _DefaultConstructible_concept_specification {$/;"	s
_DefaultConstructible_concept_specification::_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^  static void _DefaultConstructible_requirement_violation(_Type __a) {$/;"	f	struct:_DefaultConstructible_concept_specification	access:public	signature:(_Type __a)
_DefaultConstructible_concept_specification::_STL_ERROR::__default_constructor_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__default_constructor_requirement_violation(__a);$/;"	p	class:_DefaultConstructible_concept_specification::_STL_ERROR	signature:(__a)
_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^    _DefaultConstructible_requirement_violation(__a);$/;"	p	class:_Allocator_concept_specification::_DefaultConstructible_concept_specification	signature:(__a)
_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^    _DefaultConstructible_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_DefaultConstructible_concept_specification	signature:(__i)
_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^  static void _DefaultConstructible_requirement_violation(_Type __a) {$/;"	f	struct:_DefaultConstructible_concept_specification	access:public	signature:(_Type __a)
_DefaultConstructible_requirement_violation	stl/sequence_concepts.h	/^  _DefaultConstructible_concept_specification<_Sequence>::_DefaultConstructible_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_DefaultConstructible_concept_specification	signature:(__s)
_Deque_alloc_base	stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Deque_alloc_base	access:public	signature:(const allocator_type& __a)
_Deque_alloc_base	stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type&) : _M_map(0), _M_map_size(0) {}$/;"	f	class:std::_Deque_alloc_base	access:public	signature:(const allocator_type&)
_Deque_alloc_base	stl/stl_deque.h	/^class _Deque_alloc_base {$/;"	c	namespace:std
_Deque_alloc_base	stl/stl_deque.h	/^class _Deque_alloc_base<_Tp, _Alloc, true>$/;"	c	namespace:std
_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a) $/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a)
_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type&)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type&)
_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type&, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type&, size_t __num_elements)
_Deque_base	stl/stl_deque.h	/^class _Deque_base {$/;"	c	namespace:std
_Deque_base	stl/stl_deque.h	/^class _Deque_base$/;"	c	namespace:std	inherits:_Deque_alloc_base
_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator(_Tp* __x, _Map_pointer __y) $/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator(const iterator& __x)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const iterator& __x)
_Deque_iterator	stl/stl_deque.h	/^struct _Deque_iterator {$/;"	s	namespace:std
_Destroy	stl/stl_construct.h	/^inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(_Tp* __pointer) {$/;"	f	namespace:std	signature:(_Tp* __pointer)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(char*, char*) {}$/;"	f	namespace:std	signature:(char*, char*)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(double*, double*) {}$/;"	f	namespace:std	signature:(double*, double*)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(float*, float*) {}$/;"	f	namespace:std	signature:(float*, float*)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(int*, int*) {}$/;"	f	namespace:std	signature:(int*, int*)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(long*, long*) {}$/;"	f	namespace:std	signature:(long*, long*)
_Destroy	stl/stl_construct.h	/^inline void _Destroy(wchar_t*, wchar_t*) {}$/;"	f	namespace:std	signature:(wchar_t*, wchar_t*)
_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__first, __cur));$/;"	p	signature:(__first, __cur)
_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__first2, __mid2));$/;"	p	signature:(__first2, __mid2)
_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__result, __cur));$/;"	p	signature:(__result, __cur)
_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__result, __mid));$/;"	p	signature:(__result, __mid)
_Dist	stl/concept_checks.h	/^    _Dist;$/;"	t
_Dist	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::difference_type _Dist;$/;"	t
_Distance	stl/stl_algobase.h	/^          _Distance;$/;"	t	struct:std::__copy_backward_dispatch	access:public
_Distance	stl/stl_algobase.h	/^    typedef typename iterator_traits<_InputIter>::difference_type _Distance;$/;"	t
_ERROR_IN_STL_CONTAINER	stl/container_concepts.h	/^struct _ERROR_IN_STL_CONTAINER {$/;"	s
_ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __begin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__empty_function_must_be_const	stl/container_concepts.h	/^  __empty_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation	stl/container_concepts.h	/^  __empty_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __end_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__max_size_function_must_be_const	stl/container_concepts.h	/^  __max_size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation	stl/container_concepts.h	/^  __max_size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __rbegin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __rend_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
_ERROR_IN_STL_CONTAINER::__size_function_must_be_const	stl/container_concepts.h	/^  __size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
_ERROR_IN_STL_CONTAINER::__size_function_requirement_violation	stl/container_concepts.h	/^  __size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation	stl/container_concepts.h	/^  __swap_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
_ERROR_IN_STL_CONTAINER::begin	stl/container_concepts.h	/^    __c.begin();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::empty	stl/container_concepts.h	/^    __c.empty();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::end	stl/container_concepts.h	/^    __c.end();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::max_size	stl/container_concepts.h	/^    __c.max_size();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::rbegin	stl/container_concepts.h	/^    __c.rbegin();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::rend	stl/container_concepts.h	/^    __c.rend();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::size	stl/container_concepts.h	/^    __c.size();$/;"	p	signature:()
_ERROR_IN_STL_CONTAINER::swap	stl/container_concepts.h	/^    __c.swap(__c);$/;"	p	signature:(__c)
_ERROR_IN_STL_SEQ	stl/sequence_concepts.h	/^struct _ERROR_IN_STL_SEQ {$/;"	s
_ERROR_IN_STL_SEQ::__back_function_requirement_violation	stl/sequence_concepts.h	/^  __back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__const_back_function_requirement_violation	stl/sequence_concepts.h	/^  __const_back_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
_ERROR_IN_STL_SEQ::__const_front_function_requirement_violation	stl/sequence_concepts.h	/^  __const_front_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
_ERROR_IN_STL_SEQ::__erase_function_requirement_violation	stl/sequence_concepts.h	/^  __erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation	stl/sequence_concepts.h	/^  __fill_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation	stl/sequence_concepts.h	/^  __fill_default_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation	stl/sequence_concepts.h	/^  __fill_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__front_function_requirement_violation	stl/sequence_concepts.h	/^  __front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__i	stl/sequence_concepts.h	/^    typename _XX::iterator __i = typename _XX::iterator();$/;"	l
_ERROR_IN_STL_SEQ::__insert_element_function_requirement_violation	stl/sequence_concepts.h	/^  __insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__insert_function_requirement_violation	stl/sequence_concepts.h	/^  __insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__j	stl/sequence_concepts.h	/^    typename _XX::iterator __j = typename _XX::iterator();$/;"	l
_ERROR_IN_STL_SEQ::__n	stl/sequence_concepts.h	/^    typename _XX::difference_type __n = typename _XX::difference_type();$/;"	l
_ERROR_IN_STL_SEQ::__p	stl/sequence_concepts.h	/^    typename _XX::iterator __p = typename _XX::iterator();$/;"	l
_ERROR_IN_STL_SEQ::__p	stl/sequence_concepts.h	/^    typename _XX::iterator __p;$/;"	l
_ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation	stl/sequence_concepts.h	/^  __pop_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation	stl/sequence_concepts.h	/^  __pop_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__push_back_function_requirement_violation	stl/sequence_concepts.h	/^  __push_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__push_front_function_requirement_violation	stl/sequence_concepts.h	/^  __push_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__q	stl/sequence_concepts.h	/^    typename _XX::iterator __q = typename _XX::iterator();$/;"	l
_ERROR_IN_STL_SEQ::__r	stl/sequence_concepts.h	/^    std::pair<typename _XX::iterator, bool> __r;$/;"	l
_ERROR_IN_STL_SEQ::__range_constructor_requirement_violation	stl/sequence_concepts.h	/^  __range_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation	stl/sequence_concepts.h	/^  __range_erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation	stl/sequence_concepts.h	/^  __range_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__t	stl/sequence_concepts.h	/^    typename _XX::const_reference __t = __s.back();$/;"	l
_ERROR_IN_STL_SEQ::__t	stl/sequence_concepts.h	/^    typename _XX::const_reference __t = __s.front();$/;"	l
_ERROR_IN_STL_SEQ::__t	stl/sequence_concepts.h	/^    typename _XX::reference __t = __s.back();$/;"	l
_ERROR_IN_STL_SEQ::__t	stl/sequence_concepts.h	/^    typename _XX::reference __t = __s.front();$/;"	l
_ERROR_IN_STL_SEQ::__t	stl/sequence_concepts.h	/^    typename _XX::value_type __t = typename _XX::value_type();$/;"	l
_ERROR_IN_STL_SEQ::__unconditional_insert_element_function_requirement_violation	stl/sequence_concepts.h	/^  __unconditional_insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
_ERROR_IN_STL_SEQ::__x	stl/sequence_concepts.h	/^    _XX __x(__n);$/;"	p	signature:(__n)
_ERROR_IN_STL_SEQ::__x	stl/sequence_concepts.h	/^    _XX __x(__n, __t);$/;"	p	signature:(__n, __t)
_ERROR_IN_STL_SEQ::__x	stl/sequence_concepts.h	/^    _XX __x(__s.begin(), __s.end());$/;"	p	signature:(__s.begin(), __s.end())
_ERROR_IN_STL_SEQ::insert	stl/sequence_concepts.h	/^    __s.insert(__p, __i, __j);$/;"	p	signature:(__p, __i, __j)
_ERROR_IN_STL_SEQ::insert	stl/sequence_concepts.h	/^    __s.insert(__p, __n, __t);$/;"	p	signature:(__p, __n, __t)
_ERROR_IN_STL_SEQ::pop_back	stl/sequence_concepts.h	/^    __s.pop_back();$/;"	p	signature:()
_ERROR_IN_STL_SEQ::pop_front	stl/sequence_concepts.h	/^    __s.pop_front();$/;"	p	signature:()
_ERROR_IN_STL_SEQ::push_back	stl/sequence_concepts.h	/^    __s.push_back(__t);$/;"	p	signature:(__t)
_ERROR_IN_STL_SEQ::push_front	stl/sequence_concepts.h	/^    __s.push_front(__t);$/;"	p	signature:(__t)
_Eq_int_traits	stl/stl_ctraits_fns.h	/^struct _Eq_int_traits$/;"	s	namespace:std	inherits:binary_function
_Eq_traits	stl/stl_ctraits_fns.h	/^struct _Eq_traits$/;"	s	namespace:std	inherits:binary_function
_EqualityComparable_concept_specification	stl/concept_checks.h	/^struct _EqualityComparable_concept_specification {$/;"	s
_EqualityComparable_concept_specification::_EqualityComparable_requirement_violation	stl/concept_checks.h	/^  static void _EqualityComparable_requirement_violation(_Type __a) {$/;"	f	struct:_EqualityComparable_concept_specification	access:public	signature:(_Type __a)
_EqualityComparable_concept_specification::_STL_ERROR::__equality_comparable_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__equality_comparable_requirement_violation(__a, __a);$/;"	p	class:_EqualityComparable_concept_specification::_STL_ERROR	signature:(__a, __a)
_EqualityComparable_requirement_violation	stl/concept_checks.h	/^    _EqualityComparable_requirement_violation(__a);$/;"	p	class:_Allocator_concept_specification::_EqualityComparable_concept_specification	signature:(__a)
_EqualityComparable_requirement_violation	stl/concept_checks.h	/^    _EqualityComparable_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_EqualityComparable_concept_specification	signature:(__i)
_EqualityComparable_requirement_violation	stl/concept_checks.h	/^  static void _EqualityComparable_requirement_violation(_Type __a) {$/;"	f	struct:_EqualityComparable_concept_specification	access:public	signature:(_Type __a)
_Exception	stl/stl_exception.h	/^class _Exception {$/;"	c	namespace:std
_ForwardContainer_concept_specification	stl/container_concepts.h	/^struct _ForwardContainer_concept_specification {$/;"	s
_ForwardContainer_concept_specification::_Container_concept_specification::_Container_requirement_violation	stl/container_concepts.h	/^  _Container_concept_specification<_ForwardContainer>::_Container_requirement_violation(__c);$/;"	p	class:_ForwardContainer_concept_specification::_Container_concept_specification	signature:(__c)
_ForwardContainer_concept_specification::_ForwardContainer_requirement_violation	stl/container_concepts.h	/^_ForwardContainer_requirement_violation(_ForwardContainer __c) {$/;"	f	struct:_ForwardContainer_concept_specification	access:public	signature:(_ForwardContainer __c)
_ForwardContainer_concept_specification::_ForwardIterator_concept_specification::const_iter	stl/container_concepts.h	/^  _ForwardIterator_concept_specification<const_iter>::_ForwardIterator_requirement_violation(const_iter());$/;"	p	class:_ForwardContainer_concept_specification::_ForwardIterator_concept_specification	signature:()
_ForwardContainer_concept_specification::_Mutable_ForwardIterator_concept_specification::iter	stl/container_concepts.h	/^  _Mutable_ForwardIterator_concept_specification<iter>::_Mutable_ForwardIterator_requirement_violation(iter());$/;"	p	class:_ForwardContainer_concept_specification::_Mutable_ForwardIterator_concept_specification	signature:()
_ForwardContainer_concept_specification::const_iter	stl/container_concepts.h	/^  typedef typename _ForwardContainer::const_iterator const_iter;$/;"	t
_ForwardContainer_concept_specification::iter	stl/container_concepts.h	/^  typedef typename _ForwardContainer::iterator iter;$/;"	t
_ForwardContainer_requirement_violation	stl/container_concepts.h	/^  _ForwardContainer_concept_specification<_ReversibleContainer>::_ForwardContainer_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ForwardContainer_concept_specification	signature:(__c)
_ForwardContainer_requirement_violation	stl/container_concepts.h	/^_ForwardContainer_requirement_violation(_ForwardContainer __c) {$/;"	f	struct:_ForwardContainer_concept_specification	access:public	signature:(_ForwardContainer __c)
_ForwardContainer_requirement_violation	stl/sequence_concepts.h	/^  _ForwardContainer_concept_specification<_Sequence>::_ForwardContainer_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ForwardContainer_concept_specification	signature:(__s)
_ForwardIterator_concept_specification	stl/concept_checks.h	/^struct _ForwardIterator_concept_specification {$/;"	s
_ForwardIterator_concept_specification::_ForwardIterator_requirement_violation	stl/concept_checks.h	/^_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_ForwardIterator_concept_specification::_InputIterator_concept_specification::_InputIterator_requirement_violation	stl/concept_checks.h	/^    _InputIterator_requirement_violation(__i);$/;"	p	class:_ForwardIterator_concept_specification::_InputIterator_concept_specification	signature:(__i)
_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _ForwardIterator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_ForwardIterator_concept_specification	signature:(__i)
_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _ForwardIterator_requirement_violation(__i);$/;"	p	class:_Mutable_ForwardIterator_concept_specification::_ForwardIterator_concept_specification	signature:(__i)
_ForwardIterator_requirement_violation	stl/concept_checks.h	/^_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_FrontInsertionSequence_concept_specification	stl/sequence_concepts.h	/^struct _FrontInsertionSequence_concept_specification {$/;"	s
_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ::__push_front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__push_front_function_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_FrontInsertionSequence_concept_specification::_FrontInsertionSequence_requirement_violation	stl/sequence_concepts.h	/^_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {$/;"	f	struct:_FrontInsertionSequence_concept_specification	access:public	signature:(_FrontInsertionSequence __s)
_FrontInsertionSequence_concept_specification::_Sequence_concept_specification::_Sequence_requirement_violation	stl/sequence_concepts.h	/^  _Sequence_concept_specification<_FrontInsertionSequence>::_Sequence_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_Sequence_concept_specification	signature:(__s)
_FrontInsertionSequence_requirement_violation	stl/sequence_concepts.h	/^_FrontInsertionSequence_requirement_violation(_FrontInsertionSequence __s) {$/;"	f	struct:_FrontInsertionSequence_concept_specification	access:public	signature:(_FrontInsertionSequence __s)
_Hashtable	stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
_Hashtable	stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:std::_Hashtable_iterator	access:public
_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator() {}$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:()
_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const _Node* __n, const _Hashtable* __tab)
_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const iterator& __it) $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const iterator& __it)
_Hashtable_const_iterator	stl/stl_hashtable.h	/^struct _Hashtable_const_iterator {$/;"	s	namespace:std
_Hashtable_iterator	stl/stl_hashtable.h	/^  _Hashtable_iterator() {}$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:()
_Hashtable_iterator	stl/stl_hashtable.h	/^  _Hashtable_iterator(_Node* __n, _Hashtable* __tab) $/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(_Node* __n, _Hashtable* __tab)
_Hashtable_iterator	stl/stl_hashtable.h	/^struct _Hashtable_iterator {$/;"	s	namespace:std
_Hashtable_node	stl/stl_hashtable.h	/^struct _Hashtable_node$/;"	s	namespace:std
_Ht	stl/stl_hash_map.h	/^                    _Select1st<pair<const _Key,_Tp> >,_EqualKey,_Alloc> _Ht;$/;"	t	class:std::hash_map	access:private
_Ht	stl/stl_hash_map.h	/^          _Ht;$/;"	t	class:std::hash_multimap	access:private
_Ht	stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:std::hash_multiset	access:private
_Ht	stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:std::hash_set	access:private
_Identity	stl/stl_function.h	/^struct _Identity : public unary_function<_Tp,_Tp> {$/;"	s	namespace:std	inherits:unary_function
_InputIterator_concept_specification	stl/concept_checks.h	/^struct _InputIterator_concept_specification {$/;"	s
_InputIterator_concept_specification::_InputIterator_requirement_violation	stl/concept_checks.h	/^_InputIterator_requirement_violation(_InputIterator __i) {$/;"	f	struct:_InputIterator_concept_specification	access:public	signature:(_InputIterator __i)
_InputIterator_concept_specification::_STL_ERROR::__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postincrement_operator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_STL_ERROR	signature:(__i)
_InputIterator_concept_specification::_STL_ERROR::__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__preincrement_operator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_STL_ERROR	signature:(__i)
_InputIterator_concept_specification::_TrivialIterator_concept_specification::_TrivialIterator_requirement_violation	stl/concept_checks.h	/^    _TrivialIterator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_TrivialIterator_concept_specification	signature:(__i)
_InputIterator_requirement_violation	stl/concept_checks.h	/^    _InputIterator_requirement_violation(__i);$/;"	p	class:_ForwardIterator_concept_specification::_InputIterator_concept_specification	signature:(__i)
_InputIterator_requirement_violation	stl/concept_checks.h	/^_InputIterator_requirement_violation(_InputIterator __i) {$/;"	f	struct:_InputIterator_concept_specification	access:public	signature:(_InputIterator __i)
_Insert_ostream	stl/ropeimpl.h	/^	  typedef basic_ostream<_CharT,_Traits> _Insert_ostream;$/;"	t	class:std::_Rope_insert_char_consumer	access:private
_Integral	stl/stl_bvector.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
_Integral	stl/stl_deque.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
_Integral	stl/stl_list.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
_Integral	stl/stl_slist.h	/^    typedef typename _Is_integer<_InIter>::_Integral _Integral;$/;"	t
_Integral	stl/stl_slist.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
_Integral	stl/stl_vector.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
_Integral	stl/type_traits.h	/^  typedef __false_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Integral	stl/type_traits.h	/^  typedef __true_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Is_POD	stl/stl_uninitialized.h	/^  typedef typename __type_traits<_Tp1>::is_POD_type _Is_POD;$/;"	t
_Is_POD	stl/stl_uninitialized.h	/^  typedef typename __type_traits<_Tp>::is_POD_type _Is_POD;$/;"	t
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<bool> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<char> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<int> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long long> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<long> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<short> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<signed char> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned char> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned int> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long long> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned long> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<unsigned short> {$/;"	s
_Is_integer	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct _Is_integer<wchar_t> {$/;"	s
_Is_integer	stl/type_traits.h	/^template <class _Tp> struct _Is_integer {$/;"	s
_Is_integer::_Integral	stl/type_traits.h	/^  typedef __false_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Is_integer::_Integral	stl/type_traits.h	/^  typedef __true_type _Integral;$/;"	t	struct:_Is_integer	access:public
_Iterator_base	stl/stl_slist.h	/^  typedef _Slist_iterator_base  _Iterator_base;$/;"	t	class:std::slist	access:private
_LessThanComparable_concept_specification	stl/concept_checks.h	/^struct _LessThanComparable_concept_specification {$/;"	s
_LessThanComparable_concept_specification::_LessThanComparable_requirement_violation	stl/concept_checks.h	/^  static void _LessThanComparable_requirement_violation(_Type __a) {$/;"	f	struct:_LessThanComparable_concept_specification	access:public	signature:(_Type __a)
_LessThanComparable_concept_specification::_STL_ERROR::__less_than_comparable_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__less_than_comparable_requirement_violation(__a, __a);$/;"	p	class:_LessThanComparable_concept_specification::_STL_ERROR	signature:(__a, __a)
_LessThanComparable_requirement_violation	stl/concept_checks.h	/^    _LessThanComparable_requirement_violation(__i);$/;"	p	class:_RandomAccessIterator_concept_specification::_LessThanComparable_concept_specification	signature:(__i)
_LessThanComparable_requirement_violation	stl/concept_checks.h	/^  static void _LessThanComparable_requirement_violation(_Type __a) {$/;"	f	struct:_LessThanComparable_concept_specification	access:public	signature:(_Type __a)
_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node* _Link_type;$/;"	t	class:std::_Rb_tree	access:public
_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:std::_Rb_tree_node	access:public
_List_alloc_base	stl/stl_list.h	/^  _List_alloc_base(const allocator_type& __a) : _Node_allocator(__a) {}$/;"	f	class:std::_List_alloc_base	access:public	signature:(const allocator_type& __a)
_List_alloc_base	stl/stl_list.h	/^  _List_alloc_base(const allocator_type&) {}$/;"	f	class:std::_List_alloc_base	access:public	signature:(const allocator_type&)
_List_alloc_base	stl/stl_list.h	/^class _List_alloc_base {$/;"	c	namespace:std
_List_alloc_base	stl/stl_list.h	/^class _List_alloc_base<_Tp, _Allocator, true> {$/;"	c	namespace:std
_List_base	stl/stl_list.h	/^  _List_base(const allocator_type& __a) : _Base(__a) {$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type& __a)
_List_base	stl/stl_list.h	/^  _List_base(const allocator_type&) {$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type&)
_List_base	stl/stl_list.h	/^class _List_base $/;"	c	namespace:std	inherits:_List_alloc_base
_List_base	stl/stl_list.h	/^class _List_base $/;"	c	namespace:std
_List_iterator	stl/stl_list.h	/^  _List_iterator() {}$/;"	f	struct:std::_List_iterator	access:public	signature:()
_List_iterator	stl/stl_list.h	/^  _List_iterator(_Node* __x) : _List_iterator_base(__x) {}$/;"	f	struct:std::_List_iterator	access:public	signature:(_Node* __x)
_List_iterator	stl/stl_list.h	/^  _List_iterator(const iterator& __x) : _List_iterator_base(__x._M_node) {}$/;"	f	struct:std::_List_iterator	access:public	signature:(const iterator& __x)
_List_iterator	stl/stl_list.h	/^struct _List_iterator : public _List_iterator_base {$/;"	s	namespace:std	inherits:_List_iterator_base
_List_iterator_base	stl/stl_list.h	/^  _List_iterator_base() {}$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
_List_iterator_base	stl/stl_list.h	/^  _List_iterator_base(_List_node_base* __x) : _M_node(__x) {}$/;"	f	struct:std::_List_iterator_base	access:public	signature:(_List_node_base* __x)
_List_iterator_base	stl/stl_list.h	/^struct _List_iterator_base {$/;"	s	namespace:std
_List_node	stl/stl_list.h	/^struct _List_node : public _List_node_base {$/;"	s	namespace:std	inherits:_List_node_base
_List_node_base	stl/stl_list.h	/^struct _List_node_base {$/;"	s	namespace:std
_Lock	stl/stl_alloc.h	/^            _Lock() { __NODE_ALLOCATOR_LOCK; }$/;"	f	class:std::__default_alloc_template::_Lock	access:public	signature:()
_Lock	stl/stl_alloc.h	/^    class _Lock {$/;"	c	class:std::__default_alloc_template	access:private
_Lt_traits	stl/stl_ctraits_fns.h	/^struct _Lt_traits$/;"	s	namespace:std	inherits:binary_function
_MAX_BYTES	stl/stl_alloc.h	/^    enum {_MAX_BYTES = 128};$/;"	e	enum:std::__default_alloc_template::__anon13
_MAX_BYTES	stl/stl_alloc.h	/^  enum {_MAX_BYTES = 128};$/;"	e	enum:std::__anon10
_M_acquire_lock	stl/stl_threads.h	/^    { _M_lock._M_acquire_lock(); }$/;"	p	signature:()
_M_acquire_lock	stl/stl_threads.h	/^  void _M_acquire_lock() {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
_M_allocate	stl/stl_vector.h	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:std::_Vector_alloc_base	access:protected	signature:(size_t __n)
_M_allocate_and_copy	stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, _ForwardIterator __first, $/;"	f	class:std::vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
_M_allocate_and_copy	stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, const_iterator __first, $/;"	f	class:std::vector	access:protected	signature:(size_type __n, const_iterator __first, const_iterator __last)
_M_allocate_buffer	stl/stl_tempbuf.h	/^  void _M_allocate_buffer() {$/;"	f	class:std::_Temporary_buffer	access:private	signature:()
_M_allocate_map	stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(size_t __n)
_M_allocate_map	stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:std::_Deque_base	access:protected	signature:(size_t __n)
_M_allocate_node	stl/stl_deque.h	/^  _Tp* _M_allocate_node() {$/;"	f	class:std::_Deque_alloc_base	access:protected	signature:()
_M_allocate_node	stl/stl_deque.h	/^  _Tp* _M_allocate_node()$/;"	f	class:std::_Deque_base	access:protected	signature:()
_M_assign_aux	stl/stl_bvector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	stl/stl_bvector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	stl/stl_deque.h	/^  ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)$/;"	f	class:std::deque	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
_M_assign_aux	stl/stl_deque.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::deque	access:private	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	stl/stl_deque.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:private	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::vector	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,$/;"	f	class:std::vector	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
_M_assign_aux	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,$/;"	f	class:std::vector	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
_M_assign_dispatch	stl/stl_bvector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	stl/stl_bvector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::__BVECTOR	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_deque.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:private	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_deque.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::deque	access:private	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_list.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_list.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::list	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first2, _InputIter __last2,$/;"	f	class:std::list	signature:(_InputIter __first2, _InputIter __last2, __false_type)
_M_assign_dispatch	stl/stl_slist.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_assign_dispatch	stl/stl_slist.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::slist	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_assign_dispatch	stl/stl_slist.h	/^slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:std::slist	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	stl/stl_vector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:std::vector	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_assign_dispatch	stl/stl_vector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:public	signature:(_Integer __n, _Integer __val, __true_type)
_M_base	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_base;      \/\/ not 0$/;"	m	struct:std::_Rope_RopeSubstring	access:public
_M_bit_alloc	stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:std::_Bvector_alloc_base	access:protected	signature:(size_t __n)
_M_bit_alloc	stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:std::_Bvector_base	access:protected	signature:(size_t __n)
_M_bkt_num	stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj) const$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj) const
_M_bkt_num	stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj, size_t __n) const$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj, size_t __n) const
_M_bkt_num_key	stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key) const$/;"	f	class:std::hashtable	access:private	signature:(const key_type& __key) const
_M_bkt_num_key	stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key, size_t __n) const$/;"	f	class:std::hashtable	access:private	signature:(const key_type& __key, size_t __n) const
_M_buckets	stl/stl_hashtable.h	/^      _M_buckets(__a),$/;"	p	class:std::hashtable	access:public	signature:(__a)
_M_buckets	stl/stl_hashtable.h	/^      _M_buckets(__ht.get_allocator()),$/;"	p	class:std::hashtable	access:public	signature:(__ht.get_allocator())
_M_buckets	stl/stl_hashtable.h	/^  vector<_Node*,_Alloc> _M_buckets;$/;"	m	class:std::hashtable	access:private
_M_buf	stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:std::istreambuf_iterator	access:private
_M_buf	stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:std::ostreambuf_iterator	access:private
_M_buf_count	stl/stl_rope.h	/^        size_t     _M_buf_count;$/;"	m	class:std::sequence_buffer	access:protected
_M_buf_end	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_end;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_buf_ptr	stl/ropeimpl.h	/^	_CharT* _M_buf_ptr;$/;"	m	class:std::_Rope_flatten_char_consumer	access:private
_M_buf_ptr	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_ptr;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_buf_start	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_start;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_buffer	stl/stl_rope.h	/^        value_type _M_buffer[_Buf_sz];$/;"	m	class:std::sequence_buffer	access:protected
_M_buffer	stl/stl_tempbuf.h	/^  _Tp*       _M_buffer;$/;"	m	class:std::_Temporary_buffer	access:private
_M_bump_down	stl/stl_bvector.h	/^  void _M_bump_down() {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_bump_up	stl/stl_bvector.h	/^  void _M_bump_up() {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
_M_c	stl/stl_iterator.h	/^  mutable _CharT _M_c;$/;"	m	class:std::istreambuf_iterator	access:private
_M_c_string	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_c_string;$/;"	m	struct:std::_Rope_RopeRep	access:public
_M_check	stl/ropeimpl.h	/^void _Rope_iterator<_CharT,_Alloc>::_M_check() {$/;"	f	class:std::_Rope_iterator	signature:()
_M_check	stl/stl_rope.h	/^    void _M_check();$/;"	p	class:std::_Rope_iterator	access:protected	signature:()
_M_client_data	stl/stl_alloc.h	/^        char _M_client_data[1];    \/* The client sees this.        *\/$/;"	m	union:std::__default_alloc_template::_Obj	access:public
_M_clone_node	stl/stl_tree.h	/^  _Link_type _M_clone_node(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_M_color	stl/stl_tree.h	/^  _Color_type _M_color; $/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_copy	stl/stl_tree.h	/^  ::_M_copy(_Link_type __x, _Link_type __p)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x, _Link_type __p)
_M_copy	stl/stl_tree.h	/^  _Link_type _M_copy(_Link_type __x, _Link_type __p);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x, _Link_type __p)
_M_copy_from	stl/stl_hashtable.h	/^  ::_M_copy_from(const hashtable& __ht)$/;"	f	class:std::hashtable	signature:(const hashtable& __ht)
_M_copy_from	stl/stl_hashtable.h	/^  void _M_copy_from(const hashtable& __ht);$/;"	p	class:std::hashtable	access:private	signature:(const hashtable& __ht)
_M_count	stl/ropeimpl.h	/^	size_t _M_count;  \/\/ Number of nonmatching characters$/;"	m	class:std::_Rope_find_char_char_consumer	access:public
_M_create_node	stl/stl_list.h	/^  _Node* _M_create_node()$/;"	f	class:std::list	access:protected	signature:()
_M_create_node	stl/stl_list.h	/^  _Node* _M_create_node(const _Tp& __x)$/;"	f	class:std::list	access:protected	signature:(const _Tp& __x)
_M_create_node	stl/stl_slist.h	/^  _Node* _M_create_node() {$/;"	f	class:std::slist	access:private	signature:()
_M_create_node	stl/stl_slist.h	/^  _Node* _M_create_node(const value_type& __x) {$/;"	f	class:std::slist	access:private	signature:(const value_type& __x)
_M_create_node	stl/stl_tree.h	/^  _Link_type _M_create_node(const value_type& __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(const value_type& __x)
_M_create_nodes	stl/stl_deque.h	/^  void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_create_nodes	stl/stl_deque.h	/^void _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_cur	stl/stl_deque.h	/^  _Tp* _M_cur;$/;"	m	struct:std::_Deque_iterator	access:public
_M_cur	stl/stl_hashtable.h	/^  _Node* _M_cur;$/;"	m	struct:std::_Hashtable_iterator	access:public
_M_cur	stl/stl_hashtable.h	/^  const _Node* _M_cur;$/;"	m	struct:std::_Hashtable_const_iterator	access:public
_M_current	stl/stl_rope.h	/^    _CharT _M_current;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
_M_current_pos	stl/stl_rope.h	/^    size_t _M_current_pos;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_current_valid	stl/stl_rope.h	/^    bool _M_current_valid;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
_M_data	stl/stl_list.h	/^  _Tp _M_data;$/;"	m	struct:std::_List_node	access:public
_M_data	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_data; \/* Not necessarily 0 terminated. *\/$/;"	m	struct:std::_Rope_RopeLeaf	access:public
_M_data	stl/stl_slist.h	/^  _Tp _M_data;$/;"	m	struct:std::_Slist_node	access:public
_M_data_allocator	stl/stl_bvector.h	/^          _M_data_allocator;$/;"	m	class:std::_Bvector_alloc_base	access:protected
_M_data_allocator	stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:std::_Rope_alloc_base	access:protected
_M_data_allocator	stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:std::_Rope_rep_alloc_base	access:protected
_M_data_allocator	stl/stl_vector.h	/^  allocator_type _M_data_allocator;$/;"	m	class:std::_Vector_alloc_base	access:protected
_M_deallocate	stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:std::_Bvector_alloc_base	access:protected	signature:()
_M_deallocate	stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:std::_Bvector_base	access:protected	signature:()
_M_deallocate	stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	p	class:std::_Bvector_base::_Base	signature:()
_M_deallocate	stl/stl_vector.h	/^    __STL_UNWIND(_M_deallocate(__result, __n));$/;"	p	signature:(__result, __n)
_M_deallocate	stl/stl_vector.h	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::_Vector_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
_M_deallocate_map	stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_deallocate_map	stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
_M_deallocate_node	stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p) {$/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(_Tp* __p)
_M_deallocate_node	stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp* __p)
_M_decr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_decr(size_t __n) {$/;"	f	class:std::_Rope_iterator_base	signature:(size_t __n)
_M_decr	stl/stl_list.h	/^  void _M_decr() { _M_node = _M_node->_M_prev; }$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
_M_decr	stl/stl_rope.h	/^    void _M_decr(size_t __n);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(size_t __n)
_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return --_M_ref_count; }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return InterlockedDecrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return __add_and_fetch(&_M_ref_count, (size_t) -1); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() {$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_decrement	stl/stl_tree.h	/^  void _M_decrement()$/;"	f	struct:std::_Rb_tree_base_iterator	access:public	signature:()
_M_delete_node	stl/stl_hashtable.h	/^  void _M_delete_node(_Node* __n)$/;"	f	class:std::hashtable	access:private	signature:(_Node* __n)
_M_delete_when_done	stl/stl_rope.h	/^      bool _M_delete_when_done; \/\/ Char_producer is owned by the$/;"	m	struct:std::_Rope_RopeFunction	access:public
_M_depth	stl/stl_rope.h	/^    unsigned char _M_depth;$/;"	m	struct:std::_Rope_RopeRep	access:public
_M_dereference_aux	stl/stl_iterator.h	/^  char_type _M_dereference_aux() const;$/;"	p	class:std::istreambuf_iterator	access:private	signature:() const
_M_dereference_aux	stl/stl_iterator.h	/^_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const$/;"	f	class:std::istreambuf_iterator	signature:() const
_M_destroy_nodes	stl/stl_deque.h	/^    __STL_UNWIND(_M_destroy_nodes(_M_finish._M_node + 1, $/;"	p	signature:(_M_finish._M_node + 1, __new_finish._M_node + 1)
_M_destroy_nodes	stl/stl_deque.h	/^    __STL_UNWIND(_M_destroy_nodes(__new_start._M_node, _M_start._M_node));$/;"	p	signature:(__new_start._M_node, _M_start._M_node)
_M_destroy_nodes	stl/stl_deque.h	/^  __STL_UNWIND(_M_destroy_nodes(__nstart, __cur));$/;"	p	signature:(__nstart, __cur)
_M_destroy_nodes	stl/stl_deque.h	/^  void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_destroy_nodes	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
_M_empty_initialize	stl/stl_tree.h	/^  void _M_empty_initialize() {$/;"	f	class:std::_Rb_tree	access:private	signature:()
_M_end_marker	stl/stl_iterator.h	/^  bool _M_end_marker;$/;"	m	class:std::istream_iterator	access:protected
_M_end_of_storage	stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;  $/;"	m	class:std::_Bvector_base	access:protected
_M_end_of_storage	stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;$/;"	m	class:std::_Bvector_alloc_base	access:protected
_M_end_of_storage	stl/stl_vector.h	/^  _Tp* _M_end_of_storage;$/;"	m	class:std::_Vector_alloc_base	access:protected
_M_equal	stl/stl_iterator.h	/^  bool _M_equal(const istream_iterator& __x) const$/;"	f	class:std::istream_iterator	access:public	signature:(const istream_iterator& __x) const
_M_equal_aux	stl/stl_iterator.h	/^  ::_M_equal_aux(const istreambuf_iterator& __i) const$/;"	f	class:std::istreambuf_iterator	signature:(const istreambuf_iterator& __i) const
_M_equal_aux	stl/stl_iterator.h	/^  bool _M_equal_aux(const istreambuf_iterator&) const;$/;"	p	class:std::istreambuf_iterator	access:private	signature:(const istreambuf_iterator&) const
_M_equals	stl/stl_hashtable.h	/^      _M_equals(__eql),$/;"	p	class:std::hashtable	access:public	signature:(__eql)
_M_equals	stl/stl_hashtable.h	/^      _M_equals(__ht._M_equals),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_equals)
_M_equals	stl/stl_hashtable.h	/^  key_equal             _M_equals;$/;"	m	class:std::hashtable	access:private
_M_erase	stl/stl_tree.h	/^  ::_M_erase(_Link_type __x)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x)
_M_erase	stl/stl_tree.h	/^  __STL_UNWIND(_M_erase(__top));$/;"	p	signature:(__top)
_M_erase	stl/stl_tree.h	/^  void _M_erase(_Link_type __x);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x)
_M_erase_after	stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)$/;"	f	struct:std::_Slist_base	access:protected	signature:(_Slist_node_base* __pos)
_M_erase_after	stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base*, _Slist_node_base*);$/;"	p	struct:std::_Slist_base	access:protected	signature:(_Slist_node_base*, _Slist_node_base*)
_M_erase_after	stl/stl_slist.h	/^_Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,$/;"	f	class:std::_Slist_base	signature:(_Slist_node_base* __before_first, _Slist_node_base* __last_node)
_M_erase_bucket	stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)$/;"	f	class:std::hashtable	signature:(const size_type __n, _Node* __first, _Node* __last)
_M_erase_bucket	stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __last)$/;"	f	class:std::hashtable	signature:(const size_type __n, _Node* __last)
_M_erase_bucket	stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last);$/;"	p	class:std::hashtable	access:private	signature:(const size_type __n, _Node* __first, _Node* __last)
_M_erase_bucket	stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __last);$/;"	p	class:std::hashtable	access:private	signature:(const size_type __n, _Node* __last)
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
_M_f	stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	p	signature:()
_M_f	stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	p	signature:(__x)
_M_f	stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	p	signature:()
_M_f	stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	p	signature:(__x)
_M_f	stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	p	signature:()
_M_f	stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	p	signature:(__x)
_M_f	stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	p	signature:()
_M_f	stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	p	signature:(__x)
_M_fill_assign	stl/stl_bvector.h	/^  void _M_fill_assign(size_t __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_t __n, bool __x)
_M_fill_assign	stl/stl_deque.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::deque	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_list.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::list	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_list.h	/^void list<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::list	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_slist.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::slist	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_slist.h	/^void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::slist	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_vector.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::vector	access:public	signature:(size_type __n, const _Tp& __val)
_M_fill_assign	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val) $/;"	f	class:std::vector	signature:(size_t __n, const value_type& __val)
_M_fill_initialize	stl/stl_deque.h	/^  void _M_fill_initialize(const value_type& __value);$/;"	p	class:std::deque	access:protected	signature:(const value_type& __value)
_M_fill_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {$/;"	f	class:std::deque	signature:(const value_type& __value)
_M_fill_insert	stl/stl_bvector.h	/^  void _M_fill_insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
_M_fill_insert	stl/stl_deque.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const value_type& __x); $/;"	p	class:std::deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_fill_insert	stl/stl_deque.h	/^void deque<_Tp, _Alloc>::_M_fill_insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_fill_insert	stl/stl_list.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const _Tp& __x); $/;"	p	class:std::list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
_M_fill_insert	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_fill_insert(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, size_type __n, const _Tp& __x)
_M_fill_insert	stl/stl_vector.h	/^  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);$/;"	p	class:std::vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
_M_fill_insert	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, $/;"	f	class:std::vector	signature:(iterator __position, size_type __n, const _Tp& __x)
_M_finish	stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:std::_Bvector_alloc_base	access:protected
_M_finish	stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:std::_Bvector_base	access:protected
_M_finish	stl/stl_deque.h	/^        erase(copy(__x.begin(), __x.end(), _M_start), _M_finish);$/;"	l
_M_finish	stl/stl_deque.h	/^  iterator _M_finish;$/;"	m	class:std::_Deque_base	access:protected
_M_finish	stl/stl_vector.h	/^  _Tp* _M_finish;$/;"	m	class:std::_Vector_alloc_base	access:protected
_M_first	stl/stl_deque.h	/^  _Tp* _M_first;$/;"	m	struct:std::_Deque_iterator	access:public
_M_fn	stl/ropeimpl.h	/^		  (*(__f->_M_fn))(__begin, __len, __buffer);$/;"	p	signature:(__begin, __len, __buffer)
_M_fn	stl/ropeimpl.h	/^		  (*(__f->_M_fn))(__start, __result_len, __section);$/;"	p	signature:(__start, __result_len, __section)
_M_fn	stl/ropeimpl.h	/^		(*(__f->_M_fn))(__i, 1, &__result);$/;"	p	signature:(__i, 1, &__result)
_M_fn	stl/stl_rope.h	/^    char_producer<_CharT>* _M_fn;$/;"	m	struct:std::_Rope_RopeFunction	access:public
_M_fn1	stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:std::binary_compose	access:protected
_M_fn1	stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:std::unary_compose	access:protected
_M_fn2	stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:std::binary_compose	access:protected
_M_fn2	stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:std::unary_compose	access:protected
_M_fn3	stl/stl_function.h	/^  _Operation3 _M_fn3;$/;"	m	class:std::binary_compose	access:protected
_M_free_c_string	stl/ropeimpl.h	/^		    __d->_M_free_c_string();$/;"	p	signature:()
_M_free_c_string	stl/ropeimpl.h	/^	      __r->_M_free_c_string();$/;"	p	signature:()
_M_free_c_string	stl/ropeimpl.h	/^	    __r->_M_free_c_string();$/;"	p	signature:()
_M_free_c_string	stl/ropeimpl.h	/^inline void _Rope_RopeRep<_CharT,_Alloc>::_M_free_c_string()$/;"	f	class:std::_Rope_RopeRep	signature:()
_M_free_c_string	stl/stl_rope.h	/^              _M_tree_ptr->_M_free_c_string();$/;"	p	signature:()
_M_free_c_string	stl/stl_rope.h	/^          void _M_free_c_string();$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:()
_M_free_list_link	stl/stl_alloc.h	/^        union _Obj* _M_free_list_link;$/;"	m	union:std::__default_alloc_template::_Obj	typeref:union:std::__default_alloc_template::_Obj::_Obj	access:public
_M_free_tree	stl/ropeimpl.h	/^void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()$/;"	f	class:std::_Rope_RopeRep	signature:()
_M_free_tree	stl/stl_rope.h	/^              if (0 != __t && 0 == __t->_M_ref_count) __t->_M_free_tree();$/;"	p	signature:()
_M_free_tree	stl/stl_rope.h	/^          void _M_free_tree();$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:()
_M_get_key	stl/stl_hashtable.h	/^      _M_get_key(__ext),$/;"	p	class:std::hashtable	access:public	signature:(__ext)
_M_get_key	stl/stl_hashtable.h	/^      _M_get_key(__ht._M_get_key),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_get_key)
_M_get_key	stl/stl_hashtable.h	/^  _ExtractKey           _M_get_key;$/;"	m	class:std::hashtable	access:private
_M_get_node	stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator.allocate(1); }$/;"	f	class:std::hashtable	access:private	signature:()
_M_get_node	stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator_type::allocate(1); }$/;"	f	class:std::hashtable	access:private	signature:()
_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_List_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_List_base	access:protected	signature:()
_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node()$/;"	f	class:std::_List_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() $/;"	f	class:std::_Slist_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_Slist_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	struct:std::_Slist_base	access:protected	signature:()
_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node() $/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:()
_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	struct:std::_Rb_tree_base	access:protected	signature:()
_M_getc	stl/stl_iterator.h	/^    __i._M_getc();$/;"	p	signature:()
_M_getc	stl/stl_iterator.h	/^  void _M_getc() const {$/;"	f	class:std::istreambuf_iterator	access:private	signature:() const
_M_hash	stl/stl_hashtable.h	/^      _M_hash(__hf),$/;"	p	class:std::hashtable	access:public	signature:(__hf)
_M_hash	stl/stl_hashtable.h	/^      _M_hash(__ht._M_hash),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_hash)
_M_hash	stl/stl_hashtable.h	/^  hasher                _M_hash;$/;"	m	class:std::hashtable	access:private
_M_head	stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	class:std::_Slist_alloc_base	access:protected
_M_head	stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	struct:std::_Slist_base	access:protected
_M_header	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	class:std::_Rb_tree_alloc_base	access:protected
_M_header	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	struct:std::_Rb_tree_base	access:protected
_M_ht	stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_map	access:private
_M_ht	stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_multimap	access:private
_M_ht	stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_multiset	access:private
_M_ht	stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_set	access:private
_M_ht	stl/stl_hashtable.h	/^  _Hashtable* _M_ht;$/;"	m	struct:std::_Hashtable_iterator	access:public
_M_ht	stl/stl_hashtable.h	/^  const _Hashtable* _M_ht;$/;"	m	struct:std::_Hashtable_const_iterator	access:public
_M_incr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_incr(size_t __n) {$/;"	f	class:std::_Rope_iterator_base	signature:(size_t __n)
_M_incr	stl/stl_bvector.h	/^  void _M_incr(ptrdiff_t __i) {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
_M_incr	stl/stl_list.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
_M_incr	stl/stl_rope.h	/^              if (0 != __t) __t->_M_incr();$/;"	p	signature:()
_M_incr	stl/stl_rope.h	/^        void _M_incr () {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
_M_incr	stl/stl_rope.h	/^    void _M_incr(size_t __n);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(size_t __n)
_M_incr	stl/stl_slist.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:()
_M_incr	stl/stl_threads.h	/^   void _M_incr() { InterlockedIncrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_incr	stl/stl_threads.h	/^  void _M_incr() {  __add_and_fetch(&_M_ref_count, 1); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_incr	stl/stl_threads.h	/^  void _M_incr() { ++_M_ref_count; }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_incr	stl/stl_threads.h	/^  void _M_incr() {$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
_M_increment	stl/stl_tree.h	/^  void _M_increment()$/;"	f	struct:std::_Rb_tree_base_iterator	access:public	signature:()
_M_index1	stl/stl_function.h	/^  size_t _M_index1;$/;"	m	class:std::subtractive_rng	access:private
_M_index2	stl/stl_function.h	/^  size_t _M_index2;$/;"	m	class:std::subtractive_rng	access:private
_M_init	stl/stl_iterator.h	/^  void _M_init(streambuf_type* __p) {$/;"	f	class:std::istreambuf_iterator	access:private	signature:(streambuf_type* __p)
_M_initialize	stl/stl_bvector.h	/^  void _M_initialize(size_type __n) {$/;"	f	class:std::__BVECTOR	access:protected	signature:(size_type __n)
_M_initialize	stl/stl_function.h	/^  void _M_initialize(unsigned int __seed)$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __seed)
_M_initialize	stl/stl_threads.h	/^  void _M_initialize() { _M_lock = 0; }$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
_M_initialize_aux	stl/stl_vector.h	/^  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_aux	stl/stl_vector.h	/^  void _M_initialize_aux(_Integer __n, _Integer __value, __true_type) {$/;"	f	class:std::vector	access:public	signature:(_Integer __n, _Integer __value, __true_type)
_M_initialize_buckets	stl/stl_hashtable.h	/^  void _M_initialize_buckets(size_type __n)$/;"	f	class:std::hashtable	access:private	signature:(size_type __n)
_M_initialize_buffer	stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp& val, __false_type) {$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Tp& val, __false_type)
_M_initialize_buffer	stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp&, __true_type) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Tp&, __true_type)
_M_initialize_dispatch	stl/stl_bvector.h	/^  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
_M_initialize_dispatch	stl/stl_bvector.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:std::__BVECTOR	access:public	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_dispatch	stl/stl_deque.h	/^  void _M_initialize_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:std::deque	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
_M_initialize_dispatch	stl/stl_deque.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:std::deque	access:public	signature:(_Integer __n, _Integer __x, __true_type)
_M_initialize_map	stl/stl_deque.h	/^  void _M_initialize_map(size_t);$/;"	p	class:std::_Deque_base	access:protected	signature:(size_t)
_M_initialize_map	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)$/;"	f	class:std::_Deque_base	signature:(size_t __num_elements)
_M_initialize_range	stl/stl_bvector.h	/^  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::__BVECTOR	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_initialize_range	stl/stl_bvector.h	/^  void _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_insert	stl/stl_tree.h	/^  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)
_M_insert	stl/stl_tree.h	/^  iterator _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
_M_insert_after	stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos) {$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos)
_M_insert_after	stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos, const value_type& __x) {$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const value_type& __x)
_M_insert_after_fill	stl/stl_slist.h	/^  void _M_insert_after_fill(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, size_type __n, const value_type& __x)
_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, $/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last)
_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last, __false_type)
_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const value_type* __first, const value_type* __last)
_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const_iterator __first, const_iterator __last)
_M_insert_aux	stl/stl_bvector.h	/^  void _M_insert_aux(iterator __position, bool __x) {$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __position, bool __x)
_M_insert_aux	stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos)
_M_insert_aux	stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos)$/;"	f	class:std::deque	signature:(iterator __pos)
_M_insert_aux	stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos, const value_type& __x)$/;"	f	class:std::deque	signature:(iterator __pos, const value_type& __x)
_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, size_type __n, const value_type& __x)
_M_insert_aux	stl/stl_vector.h	/^  void _M_insert_aux(iterator __position);$/;"	p	class:std::vector	access:protected	signature:(iterator __position)
_M_insert_aux	stl/stl_vector.h	/^  void _M_insert_aux(iterator __position, const _Tp& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __position, const _Tp& __x)
_M_insert_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)$/;"	f	class:std::vector	signature:(iterator __position)
_M_insert_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)$/;"	f	class:std::vector	signature:(iterator __position, const _Tp& __x)
_M_insert_dispatch	stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::list	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
_M_insert_dispatch	stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	p	class:std::list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_dispatch	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_insert_dispatch(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, _InputIter __first, _InputIter __last, __false_type)
_M_insert_dispatch	stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
_M_insert_dispatch	stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
_M_insert_range	stl/stl_bvector.h	/^  void _M_insert_range(iterator __pos,$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_insert_range	stl/stl_bvector.h	/^  void _M_insert_range(iterator __position,$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_is_balanced	stl/stl_rope.h	/^    bool _M_is_balanced:8;$/;"	m	struct:std::_Rope_RopeRep	access:public
_M_iter	stl/stl_raw_storage_iter.h	/^  _ForwardIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	access:protected
_M_key_compare	stl/stl_tree.h	/^  _Compare _M_key_compare;$/;"	m	class:std::_Rb_tree	access:protected
_M_last	stl/stl_deque.h	/^  _Tp* _M_last;$/;"	m	struct:std::_Deque_iterator	access:public
_M_leaf_index	stl/stl_rope.h	/^    int _M_leaf_index;     \/\/ Last valid __pos in path_end;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_leaf_pos	stl/stl_rope.h	/^    size_t _M_leaf_pos;    \/\/ Starting position for current leaf$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_left	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_left;$/;"	m	struct:std::_Rope_RopeConcatenation	access:public
_M_left	stl/stl_tree.h	/^  _Base_ptr _M_left;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_leftmost	stl/stl_tree.h	/^  _Link_type& _M_leftmost() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_len	stl/stl_tempbuf.h	/^  ptrdiff_t  _M_len;$/;"	m	class:std::_Temporary_buffer	access:private
_M_lock	stl/stl_threads.h	/^  _STL_mutex_lock& _M_lock;$/;"	m	struct:std::_STL_auto_lock	access:public
_M_lock	stl/stl_threads.h	/^  volatile unsigned long _M_lock;$/;"	m	struct:std::_STL_mutex_lock	access:public
_M_map	stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:std::_Deque_alloc_base	access:protected
_M_map	stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:std::_Deque_base	access:protected
_M_map_allocator	stl/stl_deque.h	/^  _Map_allocator_type _M_map_allocator;$/;"	m	class:std::_Deque_alloc_base	access:protected
_M_map_size	stl/stl_deque.h	/^  size_t _M_map_size;  $/;"	m	class:std::_Deque_base	access:protected
_M_map_size	stl/stl_deque.h	/^  size_t _M_map_size;$/;"	m	class:std::_Deque_alloc_base	access:protected
_M_mask	stl/stl_bvector.h	/^  unsigned int _M_mask;$/;"	m	struct:std::_Bit_reference	access:public
_M_new_elements_at_back	stl/stl_deque.h	/^  void _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_back	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_back(size_type __new_elems)$/;"	f	class:std::deque	signature:(size_type __new_elems)
_M_new_elements_at_front	stl/stl_deque.h	/^  void _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_front	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_front(size_type __new_elems)$/;"	f	class:std::deque	signature:(size_type __new_elems)
_M_new_node	stl/stl_hashtable.h	/^  _Node* _M_new_node(const value_type& __obj)$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj)
_M_next	stl/stl_hashtable.h	/^  _Hashtable_node* _M_next;$/;"	m	struct:std::_Hashtable_node	access:public
_M_next	stl/stl_list.h	/^  _List_node_base* _M_next;$/;"	m	struct:std::_List_node_base	access:public
_M_next	stl/stl_slist.h	/^  _Slist_node_base* _M_next;$/;"	m	struct:std::_Slist_node_base	access:public
_M_next_size	stl/stl_hashtable.h	/^  size_type _M_next_size(size_type __n) const$/;"	f	class:std::hashtable	access:private	signature:(size_type __n) const
_M_nextc	stl/stl_iterator.h	/^  void _M_nextc() {$/;"	f	class:std::istreambuf_iterator	access:private	signature:()
_M_node	stl/stl_deque.h	/^  _Map_pointer _M_node;$/;"	m	struct:std::_Deque_iterator	access:public
_M_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:std::_List_alloc_base	access:protected
_M_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:std::_List_base	access:protected
_M_node	stl/stl_list.h	/^  _List_node_base* _M_node;$/;"	m	struct:std::_List_iterator_base	access:public
_M_node	stl/stl_slist.h	/^  _Slist_node_base* _M_node;$/;"	m	struct:std::_Slist_iterator_base	access:public
_M_node	stl/stl_tree.h	/^  _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_base_iterator	access:public
_M_node_allocator	stl/stl_deque.h	/^  allocator_type      _M_node_allocator;$/;"	m	class:std::_Deque_alloc_base	access:protected
_M_node_allocator	stl/stl_hashtable.h	/^  typename _Alloc_traits<_Node, _Alloc>::allocator_type _M_node_allocator;$/;"	m	class:std::hashtable	access:private
_M_node_allocator	stl/stl_slist.h	/^           _M_node_allocator;$/;"	m	class:std::_Slist_alloc_base	access:protected
_M_node_allocator	stl/stl_tree.h	/^           _M_node_allocator;$/;"	m	class:std::_Rb_tree_alloc_base	access:protected
_M_node_allocator_type	stl/stl_hashtable.h	/^  typedef simple_alloc<_Node, _Alloc> _M_node_allocator_type;$/;"	t	class:std::hashtable	access:private
_M_node_count	stl/stl_tree.h	/^  size_type _M_node_count; \/\/ keeps track of size of tree$/;"	m	class:std::_Rb_tree	access:protected
_M_num_elements	stl/stl_hashtable.h	/^  size_type             _M_num_elements;$/;"	m	class:std::hashtable	access:private
_M_o	stl/ropeimpl.h	/^	_Insert_ostream& _M_o;$/;"	m	class:std::_Rope_insert_char_consumer	access:private
_M_offset	stl/stl_bvector.h	/^  unsigned int _M_offset;$/;"	m	struct:std::_Bit_iterator_base	access:public
_M_ok	stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:std::istream_iterator	access:private
_M_ok	stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:std::ostreambuf_iterator	access:private
_M_original_len	stl/stl_tempbuf.h	/^  ptrdiff_t  _M_original_len;$/;"	m	class:std::_Temporary_buffer	access:private
_M_p	stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:std::_Bit_iterator_base	access:public
_M_p	stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:std::_Bit_reference	access:public
_M_parent	stl/stl_tree.h	/^  _Base_ptr _M_parent;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_path_directions	stl/stl_rope.h	/^    unsigned char _M_path_directions;$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_path_end	stl/stl_rope.h	/^    const _RopeRep* _M_path_end[_S_path_cache_len];$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_pattern	stl/ropeimpl.h	/^	_CharT _M_pattern;$/;"	m	class:std::_Rope_find_char_char_consumer	access:private
_M_pop_back_aux	stl/stl_deque.h	/^  void _M_pop_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_pop_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_back_aux()$/;"	f	class:std::deque	signature:()
_M_pop_front_aux	stl/stl_deque.h	/^  void _M_pop_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_pop_front_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_front_aux()$/;"	f	class:std::deque	signature:()
_M_pos	stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:std::_Rope_char_ptr_proxy	access:private
_M_pos	stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
_M_postincr_aux	stl/stl_iterator.h	/^  void _M_postincr_aux();$/;"	p	class:std::istreambuf_iterator	access:private	signature:()
_M_postincr_aux	stl/stl_iterator.h	/^void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux()$/;"	f	class:std::istreambuf_iterator	signature:()
_M_pred	stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:std::binary_negate	access:protected
_M_pred	stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:std::unary_negate	access:protected
_M_prefix	stl/stl_rope.h	/^        _Sequence* _M_prefix;$/;"	m	class:std::sequence_buffer	access:protected
_M_prev	stl/stl_list.h	/^  _List_node_base* _M_prev;$/;"	m	struct:std::_List_node_base	access:public
_M_ptr	stl/stl_function.h	/^    _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	access:protected
_M_ptr	stl/stl_function.h	/^  _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	access:protected
_M_ptr	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_ptr;$/;"	m	struct:std::_Rope_self_destruct_ptr	access:public
_M_push_back_aux	stl/stl_deque.h	/^  void _M_push_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_push_back_aux	stl/stl_deque.h	/^  void _M_push_back_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_push_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux()$/;"	f	class:std::deque	signature:()
_M_push_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux(const value_type& __t)$/;"	f	class:std::deque	signature:(const value_type& __t)
_M_push_front_aux	stl/stl_deque.h	/^  void _M_push_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
_M_push_front_aux	stl/stl_deque.h	/^  void _M_push_front_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
_M_push_front_aux	stl/stl_deque.h	/^void  deque<_Tp,_Alloc>::_M_push_front_aux(const value_type& __t)$/;"	f	class:std::deque	signature:(const value_type& __t)
_M_push_front_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_front_aux()$/;"	f	class:std::deque	signature:()
_M_put_node	stl/stl_hashtable.h	/^    __STL_UNWIND(_M_put_node(__n));$/;"	p	signature:(__n)
_M_put_node	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	f	class:std::hashtable	access:private	signature:(_Node* __p)
_M_put_node	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	f	class:std::hashtable	access:private	signature:(_Node* __p)
_M_put_node	stl/stl_list.h	/^    __STL_UNWIND(_M_put_node(__p));$/;"	p	signature:(__p)
_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	f	class:std::_List_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:std::_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:std::_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) $/;"	f	class:std::_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:std::_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	struct:std::_Slist_base	access:protected	signature:(_Slist_node<_Tp>* __p)
_M_put_node	stl/stl_tree.h	/^    __STL_UNWIND(_M_put_node(__tmp));$/;"	p	signature:(__tmp)
_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p) $/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	struct:std::_Rb_tree_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
_M_range_check	stl/stl_bvector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
_M_range_check	stl/stl_deque.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
_M_range_check	stl/stl_vector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
_M_range_initialize	stl/stl_deque.h	/^  void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	stl/stl_deque.h	/^  void _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::deque	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_InputIterator __first,$/;"	f	class:std::deque	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_initialize	stl/stl_vector.h	/^  void _M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_initialize	stl/stl_vector.h	/^  void _M_range_initialize(_InputIterator __first,  $/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __pos, $/;"	f	class:std::vector	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
_M_range_insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __position,$/;"	f	class:std::vector	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
_M_read	stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:std::istream_iterator	access:private	signature:()
_M_read	stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:std::istream_iterator	access:protected	signature:()
_M_reallocate_map	stl/stl_deque.h	/^  void _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:std::deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
_M_reallocate_map	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_reallocate_map(size_type __nodes_to_add,$/;"	f	class:std::deque	signature:(size_type __nodes_to_add, bool __add_at_front)
_M_ref_count	stl/stl_threads.h	/^   volatile _RC_t _M_ref_count;$/;"	m	struct:std::_Refcount_Base	access:public
_M_ref_count_lock	stl/stl_threads.h	/^  mutex_t         _M_ref_count_lock;$/;"	m	struct:std::_Refcount_Base	access:public
_M_ref_count_lock	stl/stl_threads.h	/^  pthread_mutex_t _M_ref_count_lock;$/;"	m	struct:std::_Refcount_Base	access:public
_M_ref_nonnil	stl/ropeimpl.h	/^	    __base->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^	    __leftleft->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^	  __left->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^	__left->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^      __r->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^    _M_tree_ptr->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^    __left->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^    __r->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/ropeimpl.h	/^    __right->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/stl_rope.h	/^            _M_base->_M_ref_nonnil();$/;"	p	signature:()
_M_ref_nonnil	stl/stl_rope.h	/^          void _M_ref_nonnil() {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
_M_ref_nonnil	stl/stl_rope.h	/^          void _M_ref_nonnil()$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
_M_release_lock	stl/stl_threads.h	/^  void _M_release_lock() {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
_M_release_lock	stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	p	signature:()
_M_reserve_elements_at_back	stl/stl_deque.h	/^  iterator _M_reserve_elements_at_back(size_type __n) {$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_reserve_elements_at_front	stl/stl_deque.h	/^  iterator _M_reserve_elements_at_front(size_type __n) {$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
_M_reserve_map_at_back	stl/stl_deque.h	/^  void _M_reserve_map_at_back (size_type __nodes_to_add = 1) {$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_reserve_map_at_front	stl/stl_deque.h	/^  void _M_reserve_map_at_front (size_type __nodes_to_add = 1) {$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
_M_right	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_right;$/;"	m	struct:std::_Rope_RopeConcatenation	access:public
_M_right	stl/stl_tree.h	/^  _Base_ptr _M_right;$/;"	m	struct:std::_Rb_tree_node_base	access:public
_M_rightmost	stl/stl_tree.h	/^  _Link_type& _M_rightmost() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_root	stl/stl_rope.h	/^    _My_rope* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_char_ref_proxy	access:private
_M_root	stl/stl_rope.h	/^    _RopeRep* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_root	stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_char_ptr_proxy	access:private
_M_root	stl/stl_tree.h	/^      _M_erase(_M_root());$/;"	p	signature:()
_M_root	stl/stl_tree.h	/^  _Link_type& _M_root() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
_M_root_rope	stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root_rope;$/;"	m	class:std::_Rope_iterator	access:protected
_M_set_node	stl/stl_deque.h	/^    _M_finish._M_set_node(_M_finish._M_node + 1);$/;"	p	signature:(_M_finish._M_node + 1)
_M_set_node	stl/stl_deque.h	/^    _M_start._M_set_node(_M_start._M_node - 1);$/;"	p	signature:(_M_start._M_node - 1)
_M_set_node	stl/stl_deque.h	/^  _M_finish._M_set_node(_M_finish._M_node - 1);$/;"	p	signature:(_M_finish._M_node - 1)
_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(_M_start._M_node + 1);$/;"	p	signature:(_M_start._M_node + 1)
_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(__new_nstart);$/;"	p	signature:(__new_nstart)
_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(__nstart);$/;"	p	signature:(__nstart)
_M_set_node	stl/stl_deque.h	/^  void _M_set_node(_Map_pointer __new_node) {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
_M_size	stl/stl_rope.h	/^  size_t _M_size;       \/\/ This is here only to avoid wasting space$/;"	m	class:std::_Rope_rep_alloc_base	access:public
_M_size	stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:std::_Rope_rep_alloc_base	access:public
_M_size	stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:std::_Rope_rep_base	access:public
_M_start	stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:std::_Bvector_alloc_base	access:protected
_M_start	stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:std::_Bvector_base	access:protected
_M_start	stl/stl_deque.h	/^  iterator _M_start;$/;"	m	class:std::_Deque_base	access:protected
_M_start	stl/stl_rope.h	/^    size_t _M_start;$/;"	m	struct:std::_Rope_RopeSubstring	access:public
_M_start	stl/stl_vector.h	/^  _Tp* _M_start;$/;"	m	class:std::_Vector_alloc_base	access:protected
_M_stream	stl/stl_iterator.h	/^  istream* _M_stream;$/;"	m	class:std::istream_iterator	access:protected
_M_stream	stl/stl_iterator.h	/^  istream_type* _M_stream;$/;"	m	class:std::istream_iterator	access:private
_M_stream	stl/stl_iterator.h	/^  ostream* _M_stream;$/;"	m	class:std::ostream_iterator	access:protected
_M_stream	stl/stl_iterator.h	/^  ostream_type* _M_stream;$/;"	m	class:std::ostream_iterator	access:private
_M_string	stl/stl_iterator.h	/^    if (_M_string) *_M_stream << _M_string;$/;"	l
_M_string	stl/stl_iterator.h	/^  const _CharT* _M_string;$/;"	m	class:std::ostream_iterator	access:private
_M_string	stl/stl_iterator.h	/^  const char* _M_string;$/;"	m	class:std::ostream_iterator	access:protected
_M_t	stl/stl_map.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing map$/;"	m	class:std::map	access:private
_M_t	stl/stl_multimap.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multimap$/;"	m	class:std::multimap	access:private
_M_t	stl/stl_multiset.h	/^    _M_t.erase((_Rep_iterator&)__first, (_Rep_iterator&)__last); $/;"	p	signature:(_Rep_iterator&)__first, (_Rep_iterator&)__last
_M_t	stl/stl_multiset.h	/^    _M_t.erase((_Rep_iterator&)__position); $/;"	p	signature:(_Rep_iterator&)__position
_M_t	stl/stl_multiset.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multiset$/;"	m	class:std::multiset	access:private
_M_t	stl/stl_set.h	/^    _M_t.erase((_Rep_iterator&)__first, (_Rep_iterator&)__last); $/;"	p	signature:(_Rep_iterator&)__first, (_Rep_iterator&)__last
_M_t	stl/stl_set.h	/^    _M_t.erase((_Rep_iterator&)__position); $/;"	p	signature:(_Rep_iterator&)__position
_M_t	stl/stl_set.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:std::set	access:private
_M_table	stl/stl_function.h	/^  unsigned int _M_table[55];$/;"	m	class:std::subtractive_rng	access:private
_M_tag	stl/stl_rope.h	/^    _Tag _M_tag:8;$/;"	m	struct:std::_Rope_RopeRep	access:public
_M_tmp_buf	stl/stl_rope.h	/^    _CharT _M_tmp_buf[_S_iterator_buf_len];$/;"	m	class:std::_Rope_iterator_base	access:protected
_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep *_M_tree_ptr;$/;"	m	class:std::_Rope_alloc_base	access:protected
_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:std::_Rope_alloc_base	access:protected
_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:std::_Rope_base	access:protected
_M_unref_nonnil	stl/ropeimpl.h	/^	      __right->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/ropeimpl.h	/^	    __forest[__i]->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/ropeimpl.h	/^	   __result->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/ropeimpl.h	/^	__forest[__i]->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/ropeimpl.h	/^    _M_tree_ptr->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^                  __t->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^          _M_base->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^          void _M_unref_nonnil() {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^          void _M_unref_nonnil()$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^        _M_left->_M_unref_nonnil();$/;"	p	signature:()
_M_unref_nonnil	stl/stl_rope.h	/^        _M_right->_M_unref_nonnil();$/;"	p	signature:()
_M_val	stl/stl_function.h	/^  _Result _M_val;$/;"	m	struct:std::_Constant_binary_fun	access:public
_M_val	stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:std::_Constant_unary_fun	access:public
_M_val	stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:std::_Constant_void_fun	access:public
_M_val	stl/stl_hashtable.h	/^  _Val _M_val;$/;"	m	struct:std::_Hashtable_node	access:public
_M_value	stl/stl_iterator.h	/^      *_M_stream >> _M_value;$/;"	l
_M_value	stl/stl_iterator.h	/^    if (_M_end_marker) *_M_stream >> _M_value;$/;"	l
_M_value	stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:std::istream_iterator	access:private
_M_value	stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:std::istream_iterator	access:protected
_M_value_field	stl/stl_tree.h	/^  _Value _M_value_field;$/;"	m	struct:std::_Rb_tree_node	access:public
_Map_alloc_type	stl/stl_deque.h	/^  typedef simple_alloc<_Tp*, _Alloc> _Map_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Map_alloc_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp*, _Alloc>::_Alloc_type _Map_alloc_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
_Map_allocator_type	stl/stl_deque.h	/^          _Map_allocator_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
_Map_pointer	stl/stl_deque.h	/^  typedef _Tp** _Map_pointer;$/;"	t	struct:std::_Deque_iterator	access:public
_Map_pointer	stl/stl_deque.h	/^  typedef pointer* _Map_pointer;$/;"	t	class:std::deque	access:protected
_MutDist	stl/concept_checks.h	/^  typedef typename _Mutable_trait<_Dist>::_Type _MutDist;$/;"	t
_Mutable_BidirectionalIterator_concept_specification	stl/concept_checks.h	/^struct _Mutable_BidirectionalIterator_concept_specification {$/;"	s
_Mutable_BidirectionalIterator_concept_specification::_BidirectionalIterator_concept_specification::_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_BidirectionalIterator_concept_specification	signature:(__i)
_Mutable_BidirectionalIterator_concept_specification::_Mutable_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_BidirectionalIterator_requirement_violation($/;"	f	struct:_Mutable_BidirectionalIterator_concept_specification	access:public	signature:( _BidirectionalIterator __i)
_Mutable_BidirectionalIterator_concept_specification::_Mutable_ForwardIterator_concept_specification::_Mutable_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _Mutable_ForwardIterator_requirement_violation(__i);$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_Mutable_ForwardIterator_concept_specification	signature:(__i)
_Mutable_BidirectionalIterator_concept_specification::_STL_ERROR::__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^    __postincrement_operator_and_assignment_requirement_violation(__i,$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i, *__tmp_ptr)
_Mutable_BidirectionalIterator_concept_specification::__T	stl/concept_checks.h	/^    _BidirectionalIterator>::value_type __T;$/;"	t
_Mutable_BidirectionalIterator_concept_specification::__tmp_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<__T>::_Type* __tmp_ptr = 0;$/;"	l
_Mutable_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _Mutable_BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_Mutable_BidirectionalIterator_concept_specification	signature:(__i)
_Mutable_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_BidirectionalIterator_requirement_violation($/;"	f	struct:_Mutable_BidirectionalIterator_concept_specification	access:public	signature:( _BidirectionalIterator __i)
_Mutable_ForwardIterator_concept_specification	stl/concept_checks.h	/^struct _Mutable_ForwardIterator_concept_specification {$/;"	s
_Mutable_ForwardIterator_concept_specification::_ForwardIterator_concept_specification::_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _ForwardIterator_requirement_violation(__i);$/;"	p	class:_Mutable_ForwardIterator_concept_specification::_ForwardIterator_concept_specification	signature:(__i)
_Mutable_ForwardIterator_concept_specification::_Mutable_ForwardIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_Mutable_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_Mutable_ForwardIterator_concept_specification::_OutputIterator_concept_specification::_OutputIterator_requirement_violation	stl/concept_checks.h	/^    _OutputIterator_requirement_violation(__i);$/;"	p	class:_Mutable_ForwardIterator_concept_specification::_OutputIterator_concept_specification	signature:(__i)
_Mutable_ForwardIterator_requirement_violation	stl/concept_checks.h	/^    _Mutable_ForwardIterator_requirement_violation(__i);$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_Mutable_ForwardIterator_concept_specification	signature:(__i)
_Mutable_ForwardIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_ForwardIterator_requirement_violation(_ForwardIterator __i) {$/;"	f	struct:_Mutable_ForwardIterator_concept_specification	access:public	signature:(_ForwardIterator __i)
_Mutable_RandomAccessIterator_concept_specification	stl/concept_checks.h	/^struct _Mutable_RandomAccessIterator_concept_specification {$/;"	s
_Mutable_RandomAccessIterator_concept_specification::_Dist	stl/concept_checks.h	/^    _Dist;$/;"	t
_Mutable_RandomAccessIterator_concept_specification::_Mutable_BidirectionalIterator_concept_specification::_Mutable_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _Mutable_BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_Mutable_BidirectionalIterator_concept_specification	signature:(__i)
_Mutable_RandomAccessIterator_concept_specification::_Mutable_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)$/;"	f	struct:_Mutable_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Mutable_RandomAccessIterator_concept_specification::_RandomAccessIterator_concept_specification::_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^    _RandomAccessIterator_requirement_violation(__i);$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_RandomAccessIterator_concept_specification	signature:(__i)
_Mutable_RandomAccessIterator_concept_specification::_STL_ERROR::__element_assignment_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__element_assignment_operator_requirement_violation(__i,$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __tmp_ptr, _Dist())
_Mutable_RandomAccessIterator_concept_specification::__tmp_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<value_type>::_Type* __tmp_ptr = 0;$/;"	l
_Mutable_RandomAccessIterator_concept_specification::value_type	stl/concept_checks.h	/^    value_type;$/;"	t
_Mutable_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_RandomAccessIterator_requirement_violation(_RandAccIter __i)$/;"	f	struct:_Mutable_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Mutable_TrivialIterator_concept_specification	stl/concept_checks.h	/^struct _Mutable_TrivialIterator_concept_specification {$/;"	s
_Mutable_TrivialIterator_concept_specification::_Mutable_TrivialIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_Mutable_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Mutable_TrivialIterator_concept_specification::_STL_ERROR::__dereference_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_and_assignment_requirement_violation(__i);$/;"	p	class:_Mutable_TrivialIterator_concept_specification::_STL_ERROR	signature:(__i)
_Mutable_TrivialIterator_concept_specification::_TrivialIterator_concept_specification::_TrivialIterator_requirement_violation	stl/concept_checks.h	/^    _TrivialIterator_requirement_violation(__i);$/;"	p	class:_Mutable_TrivialIterator_concept_specification::_TrivialIterator_concept_specification	signature:(__i)
_Mutable_TrivialIterator_requirement_violation	stl/concept_checks.h	/^_Mutable_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_Mutable_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Mutable_trait	stl/concept_checks.h	/^struct _Mutable_trait {$/;"	s
_Mutable_trait	stl/concept_checks.h	/^struct _Mutable_trait<const _Tp> {$/;"	s
_Mutable_trait::_Type	stl/concept_checks.h	/^  typedef _Tp _Type;$/;"	t	struct:_Mutable_trait	access:public
_My_rope	stl/stl_rope.h	/^    typedef rope<_CharT,_Alloc> _My_rope;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
_NFREELISTS	stl/stl_alloc.h	/^    enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:std::__default_alloc_template::__anon14
_NFREELISTS	stl/stl_alloc.h	/^  enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:std::__anon11
_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	class:std::hashtable	access:private
_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:std::_Hashtable_iterator	access:public
_Node	stl/stl_hashtable.h	/^  typedef typename hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::_Node _Node;$/;"	t
_Node	stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	class:std::list	access:public
_Node	stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	struct:std::_List_iterator	access:public
_Node	stl/stl_slist.h	/^  typedef _Slist_node<_Tp>      _Node;$/;"	t	class:std::slist	access:private
_Node	stl/stl_slist.h	/^  typedef _Slist_node<_Tp> _Node;$/;"	t	struct:std::_Slist_iterator	access:public
_Node_alloc_type	stl/stl_deque.h	/^  typedef simple_alloc<_Tp, _Alloc>  _Node_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
_Node_alloc_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Node_alloc_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
_Node_allocator	stl/stl_list.h	/^           _Node_allocator;$/;"	m	class:std::_List_alloc_base	access:protected
_Node_base	stl/stl_slist.h	/^  typedef _Slist_node_base      _Node_base;$/;"	t	class:std::slist	access:private
_Num	stl/stl_algobase.h	/^    const ptrdiff_t _Num = __last - __first;$/;"	l
_Obj	stl/stl_alloc.h	/^  union _Obj {$/;"	u	class:std::__default_alloc_template	access:private
_OutputIterator_concept_specification	stl/concept_checks.h	/^struct _OutputIterator_concept_specification {$/;"	s
_OutputIterator_concept_specification::_Assignable_concept_specification::_Assignable_requirement_violation	stl/concept_checks.h	/^    _Assignable_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_Assignable_concept_specification	signature:(__i)
_OutputIterator_concept_specification::_OutputIterator_requirement_violation	stl/concept_checks.h	/^_OutputIterator_requirement_violation(_OutputIterator __i) {$/;"	f	struct:_OutputIterator_concept_specification	access:public	signature:(_OutputIterator __i)
_OutputIterator_concept_specification::_STL_ERROR::__dereference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
_OutputIterator_concept_specification::_STL_ERROR::__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^    __postincrement_operator_and_assignment_requirement_violation(__i, *__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i, *__i)
_OutputIterator_concept_specification::_STL_ERROR::__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postincrement_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
_OutputIterator_concept_specification::_STL_ERROR::__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__preincrement_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
_OutputIterator_requirement_violation	stl/concept_checks.h	/^    _OutputIterator_requirement_violation(__i);$/;"	p	class:_Mutable_ForwardIterator_concept_specification::_OutputIterator_concept_specification	signature:(__i)
_OutputIterator_requirement_violation	stl/concept_checks.h	/^_OutputIterator_requirement_violation(_OutputIterator __i) {$/;"	f	struct:_OutputIterator_concept_specification	access:public	signature:(_OutputIterator __i)
_Pii	stl/stl_hashtable.h	/^  typedef pair<const_iterator, const_iterator> _Pii;$/;"	t
_Pii	stl/stl_hashtable.h	/^  typedef pair<iterator, iterator> _Pii;$/;"	t
_Project1st	stl/stl_function.h	/^struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {$/;"	s	namespace:std	inherits:binary_function
_Project2nd	stl/stl_function.h	/^struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {$/;"	s	namespace:std	inherits:binary_function
_RC_t	stl/stl_threads.h	/^  typedef long _RC_t;$/;"	t	struct:std::_Refcount_Base	access:public
_ROPE_SWAP_SPECIALIZATION	stl/stl_rope.h	832;"	d
_RandomAccessContainer_concept_specification	stl/container_concepts.h	/^struct _RandomAccessContainer_concept_specification {$/;"	s
_RandomAccessContainer_concept_specification::Dist	stl/container_concepts.h	/^  typedef typename _Mutable_trait<_Dist>::_Type Dist;$/;"	t
_RandomAccessContainer_concept_specification::Type	stl/container_concepts.h	/^  typedef typename _Mutable_trait<__T>::_Type Type;$/;"	t
_RandomAccessContainer_concept_specification::_Dist	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::difference_type _Dist;$/;"	t
_RandomAccessContainer_concept_specification::_Mutable_RandomAccessIterator_concept_specification::iter	stl/container_concepts.h	/^  _Mutable_RandomAccessIterator_concept_specification<iter>::_Mutable_RandomAccessIterator_requirement_violation(iter());$/;"	p	class:_RandomAccessContainer_concept_specification::_Mutable_RandomAccessIterator_concept_specification	signature:()
_RandomAccessContainer_concept_specification::_RandomAccessContainer_requirement_violation	stl/container_concepts.h	/^_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {$/;"	f	struct:_RandomAccessContainer_concept_specification	access:public	signature:(_RandomAccessContainer __c)
_RandomAccessContainer_concept_specification::_RandomAccessIterator_concept_specification::const_iter	stl/container_concepts.h	/^  _RandomAccessIterator_concept_specification<const_iter>::_RandomAccessIterator_requirement_violation(const_iter());$/;"	p	class:_RandomAccessContainer_concept_specification::_RandomAccessIterator_concept_specification	signature:()
_RandomAccessContainer_concept_specification::_ReversibleContainer_concept_specification::_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^  _ReversibleContainer_concept_specification<_RandomAccessContainer>::_ReversibleContainer_requirement_violation(__c);$/;"	p	class:_RandomAccessContainer_concept_specification::_ReversibleContainer_concept_specification	signature:(__c)
_RandomAccessContainer_concept_specification::_STL_ERROR::__element_access_operator_requirement_violation	stl/container_concepts.h	/^  _STL_ERROR::__element_access_operator_requirement_violation(__c,$/;"	p	class:_RandomAccessContainer_concept_specification::_STL_ERROR	signature:(__c, _TypePtr(), Dist())
_RandomAccessContainer_concept_specification::_TypePtr	stl/container_concepts.h	/^  typedef Type* _TypePtr;$/;"	t
_RandomAccessContainer_concept_specification::__T	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::value_type __T;$/;"	t
_RandomAccessContainer_concept_specification::const_iter	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::const_iterator const_iter;$/;"	t
_RandomAccessContainer_concept_specification::iter	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::iterator iter;$/;"	t
_RandomAccessContainer_requirement_violation	stl/container_concepts.h	/^_RandomAccessContainer_requirement_violation(_RandomAccessContainer __c) {$/;"	f	struct:_RandomAccessContainer_concept_specification	access:public	signature:(_RandomAccessContainer __c)
_RandomAccessIterator_concept_specification	stl/concept_checks.h	/^struct _RandomAccessIterator_concept_specification {$/;"	s
_RandomAccessIterator_concept_specification::_BidirectionalIterator_concept_specification::_BidirectionalIterator_requirement_violation	stl/concept_checks.h	/^    _BidirectionalIterator_requirement_violation(__i);$/;"	p	class:_RandomAccessIterator_concept_specification::_BidirectionalIterator_concept_specification	signature:(__i)
_RandomAccessIterator_concept_specification::_Dist	stl/concept_checks.h	/^    _Dist;$/;"	t
_RandomAccessIterator_concept_specification::_LessThanComparable_concept_specification::_LessThanComparable_requirement_violation	stl/concept_checks.h	/^    _LessThanComparable_requirement_violation(__i);$/;"	p	class:_RandomAccessIterator_concept_specification::_LessThanComparable_concept_specification	signature:(__i)
_RandomAccessIterator_concept_specification::_MutDist	stl/concept_checks.h	/^  typedef typename _Mutable_trait<_Dist>::_Type _MutDist;$/;"	t
_RandomAccessIterator_concept_specification::_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^_RandomAccessIterator_requirement_violation(_RandAccIter __i) {$/;"	f	struct:_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_RandomAccessIterator_concept_specification::_STL_ERROR::__difference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__difference_operator_requirement_violation(__i, __i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __i, _MutDist())
_RandomAccessIterator_concept_specification::_STL_ERROR::__element_access_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__element_access_operator_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __dummy_ptr, _MutDist())
_RandomAccessIterator_concept_specification::_STL_ERROR::__iterator_addition_assignment_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_addition_assignment_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
_RandomAccessIterator_concept_specification::_STL_ERROR::__iterator_addition_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_addition_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
_RandomAccessIterator_concept_specification::_STL_ERROR::__iterator_subtraction_assignment_requirement_violation	stl/concept_checks.h	/^    __iterator_subtraction_assignment_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
_RandomAccessIterator_concept_specification::_STL_ERROR::__iterator_subtraction_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_subtraction_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
_RandomAccessIterator_concept_specification::__dummy_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<value_type>::_Type* __dummy_ptr = 0;$/;"	l
_RandomAccessIterator_concept_specification::value_type	stl/concept_checks.h	/^    value_type;$/;"	t
_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^    _RandomAccessIterator_requirement_violation(__i);$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_RandomAccessIterator_concept_specification	signature:(__i)
_RandomAccessIterator_requirement_violation	stl/concept_checks.h	/^_RandomAccessIterator_requirement_violation(_RandAccIter __i) {$/;"	f	struct:_RandomAccessIterator_concept_specification	access:public	signature:(_RandAccIter __i)
_Rb_tree	stl/stl_tree.h	/^  _Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp)
_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x) $/;"	f	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
_Rb_tree	stl/stl_tree.h	/^class _Rb_tree : protected _Rb_tree_base<_Value, _Alloc> {$/;"	c	namespace:std	inherits:_Rb_tree_base
_Rb_tree_Color_type	stl/stl_tree.h	/^typedef bool _Rb_tree_Color_type;$/;"	t	namespace:std
_Rb_tree_alloc_base	stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_alloc_base	stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:(const allocator_type&)
_Rb_tree_alloc_base	stl/stl_tree.h	/^class _Rb_tree_alloc_base {$/;"	c	namespace:std
_Rb_tree_alloc_base	stl/stl_tree.h	/^class _Rb_tree_alloc_base<_Tp, _Alloc, true> {$/;"	c	namespace:std
_Rb_tree_base	stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type& __a) $/;"	f	struct:std::_Rb_tree_base	access:public	signature:(const allocator_type& __a)
_Rb_tree_base	stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type&) $/;"	f	struct:std::_Rb_tree_base	access:public	signature:(const allocator_type&)
_Rb_tree_base	stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s	namespace:std	inherits:_Rb_tree_alloc_base
_Rb_tree_base	stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s	namespace:std
_Rb_tree_base_iterator	stl/stl_tree.h	/^struct _Rb_tree_base_iterator$/;"	s	namespace:std
_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator() {}$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const iterator& __it)
_Rb_tree_iterator	stl/stl_tree.h	/^struct _Rb_tree_iterator : public _Rb_tree_base_iterator$/;"	s	namespace:std	inherits:_Rb_tree_base_iterator
_Rb_tree_node	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value> _Rb_tree_node;$/;"	t	class:std::_Rb_tree	access:protected
_Rb_tree_node	stl/stl_tree.h	/^struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	namespace:std	inherits:_Rb_tree_node_base
_Rb_tree_node_base	stl/stl_tree.h	/^struct _Rb_tree_node_base$/;"	s	namespace:std
_Rb_tree_rebalance	stl/stl_tree.h	/^_Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Rb_tree_rebalance_for_erase	stl/stl_tree.h	/^_Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z,$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __z, _Rb_tree_node_base*& __root, _Rb_tree_node_base*& __leftmost, _Rb_tree_node_base*& __rightmost)
_Rb_tree_rotate_left	stl/stl_tree.h	/^_Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Rb_tree_rotate_right	stl/stl_tree.h	/^_Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
_Refcount_Base	stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n) {}$/;"	f	struct:std::_Refcount_Base	access:public	signature:(_RC_t __n)
_Refcount_Base	stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n)$/;"	f	struct:std::_Refcount_Base	access:public	signature:(_RC_t __n)
_Refcount_Base	stl/stl_threads.h	/^struct _Refcount_Base$/;"	s	namespace:std
_Rep_iterator	stl/stl_multiset.h	/^    typedef typename _Rep_type::iterator _Rep_iterator;$/;"	t
_Rep_iterator	stl/stl_set.h	/^    typedef typename _Rep_type::iterator _Rep_iterator;$/;"	t
_Rep_type	stl/stl_map.h	/^                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::map	access:private
_Rep_type	stl/stl_multimap.h	/^                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::multimap	access:private
_Rep_type	stl/stl_multiset.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::multiset	access:private
_Rep_type	stl/stl_set.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::set	access:private
_Ret	stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
_Ret	stl/stl_function.h	/^  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp::*__pf)
_Ret	stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^inline const_mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^inline const_mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun1_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^inline mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)()) $/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^inline mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
_Ret	stl/stl_function.h	/^mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_Ret	stl/stl_function.h	/^mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
_RevIter1	stl/stl_algo.h	/^  typedef reverse_iterator<_BidirectionalIter1> _RevIter1;$/;"	t
_RevIter2	stl/stl_algo.h	/^  typedef reverse_iterator<_BidirectionalIter2> _RevIter2;$/;"	t
_ReversibleContainer_concept_specification	stl/container_concepts.h	/^struct _ReversibleContainer_concept_specification {$/;"	s
_ReversibleContainer_concept_specification::_BidirectionalIterator_concept_specification::const_iter	stl/container_concepts.h	/^  _BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());$/;"	p	class:_ReversibleContainer_concept_specification::_BidirectionalIterator_concept_specification	signature:()
_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_ReversibleContainer_concept_specification::_ForwardContainer_concept_specification::_ForwardContainer_requirement_violation	stl/container_concepts.h	/^  _ForwardContainer_concept_specification<_ReversibleContainer>::_ForwardContainer_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ForwardContainer_concept_specification	signature:(__c)
_ReversibleContainer_concept_specification::_Mutable_BidirectionalIterator_concept_specification::iter	stl/container_concepts.h	/^  _Mutable_BidirectionalIterator_concept_specification<iter>::_Mutable_BidirectionalIterator_requirement_violation(iter());$/;"	p	class:_ReversibleContainer_concept_specification::_Mutable_BidirectionalIterator_concept_specification	signature:()
_ReversibleContainer_concept_specification::_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_ReversibleContainer_concept_specification::const_iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::const_iterator const_iter;$/;"	t
_ReversibleContainer_concept_specification::iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::iterator iter;$/;"	t
_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^  _ReversibleContainer_concept_specification<_RandomAccessContainer>::_ReversibleContainer_requirement_violation(__c);$/;"	p	class:_RandomAccessContainer_concept_specification::_ReversibleContainer_concept_specification	signature:(__c)
_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_RopeConcatenation	stl/stl_rope.h	/^        typedef _Rope_RopeConcatenation<_CharT,_Alloc> _RopeConcatenation;$/;"	t	class:std::rope	access:protected
_RopeFunction	stl/stl_rope.h	/^        typedef _Rope_RopeFunction<_CharT,_Alloc> _RopeFunction;$/;"	t	class:std::rope	access:protected
_RopeLeaf	stl/stl_rope.h	/^        typedef _Rope_RopeLeaf<_CharT,_Alloc> _RopeLeaf;$/;"	t	class:std::rope	access:protected
_RopeRep	stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::rope	access:protected
_RopeRep	stl/stl_rope.h	/^      typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_const_iterator	access:protected
_RopeRep	stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
_RopeRep	stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_iterator_base	access:public
_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;$/;"	t	class:std::_Rope_base	access:public
_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	struct:std::_Rope_base	access:public
_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Allocator> _RopeRep;$/;"	t	class:std::_Rope_alloc_base	access:public
_RopeSubstring	stl/stl_rope.h	/^        typedef _Rope_RopeSubstring<_CharT,_Alloc> _RopeSubstring;$/;"	t	class:std::rope	access:protected
_Rope_Concat_fn	stl/stl_rope.h	/^struct _Rope_Concat_fn$/;"	s	namespace:std	inherits:binary_function
_Rope_RopeConcatenation	stl/stl_rope.h	/^    _Rope_RopeConcatenation(_Rope_RopeRep<_CharT,_Alloc>* __l,$/;"	f	struct:std::_Rope_RopeConcatenation	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __l, _Rope_RopeRep<_CharT,_Alloc>* __r, allocator_type __a)
_Rope_RopeConcatenation	stl/stl_rope.h	/^struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
_Rope_RopeFunction	stl/stl_rope.h	/^    _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
_Rope_RopeFunction	stl/stl_rope.h	/^struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
_Rope_RopeLeaf	stl/stl_rope.h	/^    _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)
_Rope_RopeLeaf	stl/stl_rope.h	/^struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
_Rope_RopeRep	stl/stl_rope.h	/^    _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Tag __t, int __d, bool __b, size_t __size, allocator_type __a)
_Rope_RopeRep	stl/stl_rope.h	/^struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>$/;"	s	namespace:std	inherits:_Rope_rep_base,_Refcount_Base
_Rope_RopeSubstring	stl/stl_rope.h	/^    _Rope_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
_Rope_RopeSubstring	stl/stl_rope.h	/^struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,$/;"	s	namespace:std	inherits:_Rope_RopeFunction,char_producer
_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type& __a)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type& __a)
_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type&)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type&)
_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(const allocator_type& __a)
_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type&) {}$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(const allocator_type&)
_Rope_alloc_base	stl/stl_rope.h	/^class _Rope_alloc_base {$/;"	c	namespace:std
_Rope_alloc_base	stl/stl_rope.h	/^class _Rope_alloc_base<_CharT,_Allocator,true> {$/;"	c	namespace:std
_Rope_base	stl/stl_rope.h	/^  _Rope_base(_RopeRep * __t, const allocator_type&) : _M_tree_ptr(__t) {}$/;"	f	class:std::_Rope_base	access:public	signature:(_RopeRep * __t, const allocator_type&)
_Rope_base	stl/stl_rope.h	/^  _Rope_base(_RopeRep* __t, const allocator_type& __a) : _Base(__t, __a) {}$/;"	f	struct:std::_Rope_base	access:public	signature:(_RopeRep* __t, const allocator_type& __a)
_Rope_base	stl/stl_rope.h	/^  _Rope_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:std::_Rope_base	access:public	signature:(const allocator_type& __a)
_Rope_base	stl/stl_rope.h	/^  _Rope_base(const allocator_type&) {}$/;"	f	class:std::_Rope_base	access:public	signature:(const allocator_type&)
_Rope_base	stl/stl_rope.h	/^class _Rope_base {$/;"	c	namespace:std
_Rope_base	stl/stl_rope.h	/^struct _Rope_base $/;"	s	namespace:std	inherits:_Rope_alloc_base
_Rope_char_consumer	stl/stl_rope.h	/^class _Rope_char_consumer {$/;"	c	namespace:std
_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy() {}$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:()
_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(_CharT* __x) : _M_root(0), _M_pos(0) {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(_CharT* __x)
_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ptr_proxy& __x)$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x) $/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)
_Rope_char_ptr_proxy	stl/stl_rope.h	/^class _Rope_char_ptr_proxy {$/;"	c	namespace:std
_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p)
_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p, _CharT __c)
_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __x)
_Rope_char_ref_proxy	stl/stl_rope.h	/^class _Rope_char_ref_proxy {$/;"	c	namespace:std
_Rope_const_iterator	stl/ropeimpl.h	/^_Rope_const_iterator<_CharT, _Alloc>::_Rope_const_iterator($/;"	f	class:std::_Rope_const_iterator	signature:( const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator() {};$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _RopeRep* __root, size_t __pos):$/;"	f	class:std::_Rope_const_iterator	access:protected	signature:(const _RopeRep* __root, size_t __pos)
_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_const_iterator& __x) :$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_iterator<_CharT,_Alloc>& __x);$/;"	p	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_iterator<_CharT,_Alloc>& __x)
_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const rope<_CharT,_Alloc>& __r, size_t __pos) :$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_const_iterator	stl/stl_rope.h	/^class _Rope_const_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_iterator_base
_Rope_fill	stl/ropeimpl.h	/^  inline void _Rope_fill(basic_ostream<_CharT, _Traits>& __o, size_t __n)$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, size_t __n)
_Rope_find_char_char_consumer	stl/ropeimpl.h	/^	_Rope_find_char_char_consumer(_CharT __p) $/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:(_CharT __p)
_Rope_find_char_char_consumer	stl/ropeimpl.h	/^class _Rope_find_char_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
_Rope_flatten_char_consumer	stl/ropeimpl.h	/^	_Rope_flatten_char_consumer(_CharT* __buffer) {$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:(_CharT* __buffer)
_Rope_flatten_char_consumer	stl/ropeimpl.h	/^class _Rope_flatten_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
_Rope_insert_char_consumer	stl/ropeimpl.h	/^	_Rope_insert_char_consumer(_Insert_ostream& __writer) $/;"	f	class:std::_Rope_insert_char_consumer	access:public	signature:(_Insert_ostream& __writer)
_Rope_insert_char_consumer	stl/ropeimpl.h	/^class _Rope_insert_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
_Rope_is_simple	stl/ropeimpl.h	/^inline bool _Rope_is_simple(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
_Rope_is_simple	stl/ropeimpl.h	/^inline bool _Rope_is_simple(wchar_t*) { return true; }$/;"	f	namespace:std	signature:(wchar_t*)
_Rope_is_simple	stl/ropeimpl.h	/^template <class _CharT> inline bool _Rope_is_simple(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
_Rope_iterator	stl/ropeimpl.h	/^inline _Rope_iterator<_CharT,_Alloc>::_Rope_iterator($/;"	f	class:std::_Rope_iterator	signature:( rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(const _Rope_iterator& __x) :$/;"	f	class:std::_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>& __r, size_t __pos);$/;"	p	class:std::_Rope_iterator	access:public	signature:(rope<_CharT,_Alloc>& __r, size_t __pos)
_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>* __r, size_t __pos)$/;"	f	class:std::_Rope_iterator	access:protected	signature:(rope<_CharT,_Alloc>* __r, size_t __pos)
_Rope_iterator	stl/stl_rope.h	/^class _Rope_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_iterator_base
_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base() {}$/;"	f	class:std::_Rope_iterator_base	access:protected	signature:()
_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base(_RopeRep* __root, size_t __pos)$/;"	f	class:std::_Rope_iterator_base	access:protected	signature:(_RopeRep* __root, size_t __pos)
_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base(const _Rope_iterator_base& __x) {$/;"	f	class:std::_Rope_iterator_base	access:public	signature:(const _Rope_iterator_base& __x)
_Rope_iterator_base	stl/stl_rope.h	/^class _Rope_iterator_base$/;"	c	namespace:std	inherits:random_access_iterator
_Rope_rep_alloc_base	stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type& __a)$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_alloc_base	stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type&)$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_alloc_base	stl/stl_rope.h	/^class _Rope_rep_alloc_base {$/;"	c	namespace:std
_Rope_rep_alloc_base	stl/stl_rope.h	/^class _Rope_rep_alloc_base<_CharT,_Allocator,true> {$/;"	c	namespace:std
_Rope_rep_base	stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type& __a)$/;"	f	struct:std::_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type& __a)
_Rope_rep_base	stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type&) : _M_size(__size) {}$/;"	f	class:std::_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type&)
_Rope_rep_base	stl/stl_rope.h	/^class _Rope_rep_base {$/;"	c	namespace:std
_Rope_rep_base	stl/stl_rope.h	/^struct _Rope_rep_base$/;"	s	namespace:std	inherits:_Rope_rep_alloc_base
_Rope_rotate	stl/ropeimpl.h	/^_Rope_rotate(_Rope_iterator __first,$/;"	f	namespace:std	signature:(_Rope_iterator __first, _Rope_iterator __middle, _Rope_iterator __last)
_Rope_self_destruct_ptr	stl/stl_rope.h	/^        _Rope_self_destruct_ptr() : _M_ptr(0) {};$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr	stl/stl_rope.h	/^        _Rope_self_destruct_ptr() {};$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
_Rope_self_destruct_ptr	stl/stl_rope.h	/^    _Rope_self_destruct_ptr(_Rope_RopeRep<_CharT,_Alloc>* __p) : _M_ptr(__p) {}$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __p)
_Rope_self_destruct_ptr	stl/stl_rope.h	/^  struct _Rope_self_destruct_ptr {$/;"	s	namespace:std
_STL_BINARY_FUNCTION_ERROR	stl/concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR {$/;"	s
_STL_BINARY_FUNCTION_ERROR	stl/concept_checks.h	/^struct _STL_BINARY_FUNCTION_ERROR<_Func, void, _First, _Second> {$/;"	s
_STL_BINARY_FUNCTION_ERROR::__binary_function_requirement_violation	stl/concept_checks.h	/^  __binary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_BINARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _First& __first, const _Second& __second)
_STL_CONVERT_ERROR	stl/concept_checks.h	/^struct _STL_CONVERT_ERROR {$/;"	s
_STL_CONVERT_ERROR::__type_X_is_not_convertible_to_type_Y	stl/concept_checks.h	/^  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {$/;"	f	struct:_STL_CONVERT_ERROR	access:public	signature:(_TypeX __x, _TypeY)
_STL_CONVERT_ERROR::__y	stl/concept_checks.h	/^    _TypeY __y = __x;$/;"	l
_STL_ERROR	stl/concept_checks.h	/^struct _STL_ERROR {$/;"	s
_STL_ERROR::__assignment_operator_requirement_violation	stl/concept_checks.h	/^  __assignment_operator_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
_STL_ERROR::__c	stl/concept_checks.h	/^    _Type __c(__a);$/;"	p	signature:(__a)
_STL_ERROR::__c	stl/concept_checks.h	/^    _Type __c(__b);$/;"	p	signature:(__b)
_STL_ERROR::__const_parameter_required_for_assignment_operator	stl/concept_checks.h	/^  __const_parameter_required_for_assignment_operator(_Type __a, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, const _Type& __b)
_STL_ERROR::__const_parameter_required_for_copy_constructor	stl/concept_checks.h	/^  __const_parameter_required_for_copy_constructor(_Type \/* __a *\/, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type , const _Type& __b)
_STL_ERROR::__copy_constructor_requirement_violation	stl/concept_checks.h	/^  __copy_constructor_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
_STL_ERROR::__default_constructor_requirement_violation	stl/concept_checks.h	/^  __default_constructor_requirement_violation(_Type) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type)
_STL_ERROR::__dereference_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__dereference_operator_requirement_violation	stl/concept_checks.h	/^  __dereference_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__difference_operator_requirement_violation	stl/concept_checks.h	/^  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Iterator __j, _Distance __n)
_STL_ERROR::__element_access_operator_requirement_violation	stl/concept_checks.h	/^  __element_access_operator_requirement_violation(_Exp __x, _Type*,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type*, _Distance __n)
_STL_ERROR::__element_assignment_operator_requirement_violation	stl/concept_checks.h	/^  __element_assignment_operator_requirement_violation(_Exp __x,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type* __t, _Distance __n)
_STL_ERROR::__equality_comparable_requirement_violation	stl/concept_checks.h	/^  __equality_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
_STL_ERROR::__iterator_addition_assignment_requirement_violation	stl/concept_checks.h	/^  __iterator_addition_assignment_requirement_violation(_Iterator __i, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_addition_requirement_violation	stl/concept_checks.h	/^  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_subtraction_assignment_requirement_violation	stl/concept_checks.h	/^  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__iterator_subtraction_requirement_violation	stl/concept_checks.h	/^  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
_STL_ERROR::__less_than_comparable_requirement_violation	stl/concept_checks.h	/^  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
_STL_ERROR::__postdecrement_operator_requirement_violation	stl/concept_checks.h	/^  __postdecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Type __t)
_STL_ERROR::__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  __postincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__predecrement_operator_requirement_violation	stl/concept_checks.h	/^  __predecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_ERROR::__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  __preincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
_STL_GENERATOR_ERROR	stl/concept_checks.h	/^struct _STL_GENERATOR_ERROR {$/;"	s
_STL_GENERATOR_ERROR	stl/concept_checks.h	/^struct _STL_GENERATOR_ERROR<_Func, void> {$/;"	s
_STL_GENERATOR_ERROR::__generator_requirement_violation	stl/concept_checks.h	/^  static _Ret __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
_STL_GENERATOR_ERROR::__generator_requirement_violation	stl/concept_checks.h	/^  static void __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
_STL_SAME_TYPE_ERROR	stl/concept_checks.h	/^struct _STL_SAME_TYPE_ERROR {$/;"	s
_STL_SAME_TYPE_ERROR::__type_X_not_same_as_type_Y	stl/concept_checks.h	/^  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { $/;"	f	struct:_STL_SAME_TYPE_ERROR	access:public	signature:(_TypeX , _TypeY )
_STL_SAME_TYPE_ERROR::t1	stl/concept_checks.h	/^    __check_equal<_TypeX> t1 = __check_equal<_TypeY>();$/;"	l
_STL_UNARY_FUNCTION_ERROR	stl/concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR {$/;"	s
_STL_UNARY_FUNCTION_ERROR	stl/concept_checks.h	/^struct _STL_UNARY_FUNCTION_ERROR<_Func, void, _Arg> {$/;"	s
_STL_UNARY_FUNCTION_ERROR::__unary_function_requirement_violation	stl/concept_checks.h	/^  __unary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_UNARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _Arg& __arg)
_STL_auto_lock	stl/stl_threads.h	/^  _STL_auto_lock(_STL_mutex_lock& __lock) : _M_lock(__lock)$/;"	f	struct:std::_STL_auto_lock	access:public	signature:(_STL_mutex_lock& __lock)
_STL_auto_lock	stl/stl_threads.h	/^  _STL_auto_lock(const _STL_auto_lock&);$/;"	p	struct:std::_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
_STL_auto_lock	stl/stl_threads.h	/^struct _STL_auto_lock$/;"	s	namespace:std
_STL_mutex_lock	stl/stl_threads.h	/^struct _STL_mutex_lock$/;"	s	namespace:std
_STL_mutex_spin	stl/stl_threads.h	/^struct _STL_mutex_spin {$/;"	s	namespace:std
_S_RopeLeaf_from_unowned_char_ptr	stl/stl_rope.h	/^          _RopeLeaf* _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,$/;"	f	class:std::rope	access:protected	signature:(const _CharT *__s, size_t __size, allocator_type __a)
_S_add_leaf_to_forest	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_leaf_to_forest	stl/stl_rope.h	/^        static void _S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_to_forest	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _RopeRep** __forest)
_S_add_to_forest	stl/stl_rope.h	/^        static void _S_add_to_forest(_RopeRep*__r, _RopeRep** __forest);$/;"	p	class:std::rope	access:private	signature:(_RopeRep*__r, _RopeRep** __forest)
_S_alloc_granularity	stl/stl_rope.h	/^    enum { _S_alloc_granularity = 8 };$/;"	e	enum:std::_Rope_RopeLeaf::__anon19
_S_allocated_capacity	stl/stl_rope.h	/^        static size_t _S_allocated_capacity(size_t __n) {$/;"	f	class:std::rope	access:protected	signature:(size_t __n)
_S_apply_to_pieces	stl/ropeimpl.h	/^bool rope<_CharT, _Alloc>::_S_apply_to_pieces($/;"	f	class:std::rope	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
_S_apply_to_pieces	stl/stl_rope.h	/^        static bool _S_apply_to_pieces($/;"	p	class:std::rope	access:protected	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
_S_balance	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)$/;"	f	class:std::rope	signature:(_RopeRep* __r)
_S_balance	stl/stl_rope.h	/^        static _RopeRep* _S_balance(_RopeRep* __r);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r)
_S_buffer_size	stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	class:std::deque	access:protected	signature:()
_S_buffer_size	stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
_S_char_ptr_len	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_char_ptr_len(const _CharT* __s)$/;"	f	class:std::rope	signature:(const _CharT* __s)
_S_char_ptr_len	stl/stl_rope.h	/^        static size_t _S_char_ptr_len(const _CharT* __s);$/;"	p	class:std::rope	access:private	signature:(const _CharT* __s)
_S_chunk_alloc	stl/stl_alloc.h	/^  static char* _S_chunk_alloc(size_t __size, int& __nobjs);$/;"	p	class:std::__default_alloc_template	access:private	signature:(size_t __size, int& __nobjs)
_S_chunk_alloc	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size, $/;"	f	class:std::__default_alloc_template	signature:(size_t __size, int& __nobjs)
_S_color	stl/stl_tree.h	/^  static _Color_type& _S_color(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_color	stl/stl_tree.h	/^  static _Color_type& _S_color(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_compare	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left, $/;"	f	class:std::rope	signature:(const _RopeRep* __left, const _RopeRep* __right)
_S_compare	stl/stl_rope.h	/^        static int _S_compare(const _RopeRep* __x, const _RopeRep* __y);$/;"	p	class:std::rope	access:private	signature:(const _RopeRep* __x, const _RopeRep* __y)
_S_concat	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_concat(_RopeRep* __left, _RopeRep* __right)$/;"	f	class:std::rope	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat	stl/stl_rope.h	/^                _Self_destruct_ptr __left_result(_S_concat(__left, __r));$/;"	p	signature:(__left, __r)
_S_concat	stl/stl_rope.h	/^        static _RopeRep* _S_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
_S_concat_and_set_balanced	stl/stl_rope.h	/^        static _RopeRep* _S_concat_and_set_balanced(_RopeRep* __left,$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __left, _RopeRep* __right)
_S_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_RopeRep* rope<_CharT,_Alloc>::_S_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeRep* __r, const _CharT*__s, size_t __slen)
_S_concat_char_iter	stl/stl_rope.h	/^              _S_concat_char_iter(__left, __i, __n));$/;"	p	signature:(__left, __i, __n)
_S_concat_char_iter	stl/stl_rope.h	/^        static _RopeRep* _S_concat_char_iter(_RopeRep* __r,$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(_CharT&) {}$/;"	f	namespace:std	signature:(_CharT&)
_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(char& __c) { __c = 0; }$/;"	f	namespace:std	signature:(char& __c)
_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(wchar_t& __c) { __c = 0; }$/;"	f	namespace:std	signature:(wchar_t& __c)
_S_copy_max	stl/stl_rope.h	/^        enum { _S_copy_max = 23 };$/;"	e	enum:std::rope::__anon22
_S_destr_concat_char_iter	stl/ropeimpl.h	/^      _My_rope::_S_destr_concat_char_iter(__left, &__c, 1));$/;"	p	signature:(__left, &__c, 1)
_S_destr_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_concat_char_iter($/;"	f	class:std::rope	signature:( _RopeRep* __r, const _CharT* __s, size_t __slen)
_S_destr_concat_char_iter	stl/stl_rope.h	/^        static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
_S_destr_leaf_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_leaf_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
_S_destr_leaf_concat_char_iter	stl/stl_rope.h	/^          static _RopeLeaf* _S_destr_leaf_concat_char_iter$/;"	p	class:std::rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
_S_dump	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)$/;"	f	class:std::rope	signature:(_RopeRep* __r, int __indent)
_S_dump	stl/stl_rope.h	/^        static void _S_dump(_RopeRep* __r, int __indent = 0);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, int __indent = 0)
_S_empty_c_str	stl/ropeimpl.h	/^  _CharT rope<_CharT,_Alloc>::_S_empty_c_str[1];$/;"	m	class:std::rope
_S_empty_c_str	stl/stl_rope.h	/^        static _CharT _S_empty_c_str[1];$/;"	m	class:std::rope	access:protected
_S_end_free	stl/stl_alloc.h	/^  static char* _S_end_free;$/;"	m	class:std::__default_alloc_template	access:private
_S_end_free	stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;$/;"	m	class:std::__default_alloc_template
_S_eos	stl/stl_rope.h	/^inline _CharT _S_eos(_CharT*) { return _CharT(); }$/;"	f	namespace:std	signature:(_CharT*)
_S_extra	stl/stl_alloc.h	/^  enum {_S_extra = 8};  \/\/ Size of space used to store size.  Note$/;"	e	enum:std::debug_alloc::__anon8
_S_fetch	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_type __i)
_S_fetch	stl/stl_rope.h	/^        static _CharT _S_fetch(_RopeRep* __r, size_type __pos);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
_S_fetch_ptr	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_type __i)
_S_fetch_ptr	stl/stl_rope.h	/^            static _CharT* _S_fetch_ptr(_RopeRep* __r, size_type __pos);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
_S_flatten	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _CharT* __buffer)
_S_flatten	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r,$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
_S_flatten	stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r, _CharT* __buffer);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, _CharT* __buffer)
_S_flatten	stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r,$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
_S_fn_finalization_proc	stl/stl_rope.h	/^      static void _S_fn_finalization_proc(void * __tree, void *) {$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:(void * __tree, void *)
_S_free_if_unref	stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_free_if_unref	stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_free_list	stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[]; $/;"	m	class:std::__default_alloc_template	access:private
_S_free_list	stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS]; $/;"	m	class:std::__default_alloc_template	access:private
_S_free_list	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst> ::_S_free_list[$/;"	m	class:std::__default_alloc_template
_S_free_string	stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string$/;"	f	class:std::_Rope_RopeRep	signature:(const _CharT*, size_t, allocator_type)
_S_free_string	stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string(_CharT* __s,$/;"	f	class:std::_Rope_RopeRep	signature:(_CharT* __s, size_t __n, allocator_type __a)
_S_free_string	stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len);$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len)
_S_free_string	stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len,$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len, allocator_type __a)
_S_freelist_index	stl/stl_alloc.h	/^  static  size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:std::__default_alloc_template	access:private	signature:(size_t __bytes)
_S_function	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
_S_heap_size	stl/stl_alloc.h	/^  static size_t _S_heap_size;$/;"	m	class:std::__default_alloc_template	access:private
_S_heap_size	stl/stl_alloc.h	/^size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;$/;"	m	class:std::__default_alloc_template
_S_initial_map_size	stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon15
_S_initial_map_size	stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon16
_S_instanceless	stl/stl_alloc.h	/^  static const bool _S_instanceless = false;$/;"	m	struct:_Alloc_traits	access:public
_S_instanceless	stl/stl_alloc.h	/^  static const bool _S_instanceless = true;$/;"	m	struct:_Alloc_traits	access:public
_S_instanceless	stl/stl_alloc.h	/^const bool _Alloc_traits<_Tp, _Allocator>::_S_instanceless;$/;"	m	class:_Alloc_traits
_S_is0	stl/stl_rope.h	/^        static bool _S_is0(_CharT __c) { return __c == _S_eos((_CharT*)0); }$/;"	f	class:std::rope	access:protected	signature:(_CharT __c)
_S_is_almost_balanced	stl/ropeimpl.h	/^	    __stl_assert(_S_is_almost_balanced(__insertee));$/;"	p	signature:(__insertee)
_S_is_almost_balanced	stl/ropeimpl.h	/^    __stl_assert(_S_is_almost_balanced(__insertee));$/;"	p	signature:(__insertee)
_S_is_almost_balanced	stl/stl_rope.h	/^        static bool _S_is_almost_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
_S_is_balanced	stl/stl_rope.h	/^        static bool _S_is_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(wchar_t*) { return true; }$/;"	f	namespace:std	signature:(wchar_t*)
_S_is_one_byte_char_type	stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
_S_is_one_byte_char_type	stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
_S_is_roughly_balanced	stl/stl_rope.h	/^        static bool _S_is_roughly_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
_S_iterator_buf_len	stl/stl_rope.h	/^    enum { _S_iterator_buf_len = 15 };$/;"	e	enum:std::_Rope_iterator_base::__anon21
_S_key	stl/stl_tree.h	/^  static const _Key& _S_key(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_key	stl/stl_tree.h	/^  static const _Key& _S_key(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_leaf	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
_S_leaf_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_leaf_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
_S_leaf_concat_char_iter	stl/stl_rope.h	/^        _S_leaf_concat_char_iter(_RopeLeaf* __r,$/;"	p	class:std::rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
_S_left	stl/stl_tree.h	/^  static _Link_type& _S_left(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_left	stl/stl_tree.h	/^  static _Link_type& _S_left(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_max_rope_depth	stl/stl_rope.h	/^    enum { _S_max_rope_depth = 45 };$/;"	e	enum:std::_Rope_RopeRep::__anon18
_S_maximum	stl/stl_tree.h	/^  static _Base_ptr _S_maximum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_maximum	stl/stl_tree.h	/^  static _Link_type _S_maximum(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_min_len	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_min_len[$/;"	m	class:std::rope
_S_min_len	stl/stl_rope.h	/^          _S_min_len[_RopeRep::_S_max_rope_depth + 1];$/;"	m	class:std::rope	access:private
_S_minimum	stl/stl_tree.h	/^  static _Base_ptr _S_minimum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
_S_minimum	stl/stl_tree.h	/^  static _Link_type _S_minimum(_Link_type __x) $/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_new_RopeConcatenation	stl/stl_rope.h	/^        static _RopeConcatenation* _S_new_RopeConcatenation($/;"	f	class:std::rope	access:protected	signature:( _RopeRep* __left, _RopeRep* __right, allocator_type __a)
_S_new_RopeFunction	stl/stl_rope.h	/^        static _RopeFunction* _S_new_RopeFunction(char_producer<_CharT>* __f,$/;"	f	class:std::rope	access:protected	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
_S_new_RopeLeaf	stl/stl_rope.h	/^        static _RopeLeaf* _S_new_RopeLeaf(__GC_CONST _CharT *__s,$/;"	f	class:std::rope	access:protected	signature:(__GC_CONST _CharT *__s, size_t __size, allocator_type __a)
_S_new_RopeSubstring	stl/stl_rope.h	/^        static _RopeSubstring* _S_new_RopeSubstring($/;"	f	class:std::rope	access:protected	signature:( _Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
_S_node_allocator_lock	stl/stl_alloc.h	/^    static _STL_mutex_lock _S_node_allocator_lock;$/;"	m	class:std::__default_alloc_template	access:private
_S_nsec_sleep	stl/stl_threads.h	/^  static void _S_nsec_sleep(int __log_nsec) {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:(int __log_nsec)
_S_oom_malloc	stl/stl_alloc.h	/^  static void* _S_oom_malloc(size_t);$/;"	p	class:std::__malloc_alloc_template	access:private	signature:(size_t)
_S_oom_malloc	stl/stl_alloc.h	/^__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)$/;"	f	class:std::__malloc_alloc_template	signature:(size_t __n)
_S_oom_realloc	stl/stl_alloc.h	/^  static void* _S_oom_realloc(void*, size_t);$/;"	p	class:std::__malloc_alloc_template	access:private	signature:(void*, size_t)
_S_oom_realloc	stl/stl_alloc.h	/^void* __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)$/;"	f	class:std::__malloc_alloc_template	signature:(void* __p, size_t __n)
_S_parent	stl/stl_tree.h	/^  static _Link_type& _S_parent(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_parent	stl/stl_tree.h	/^  static _Link_type& _S_parent(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_path_cache_len	stl/stl_rope.h	/^    enum { _S_path_cache_len = 4 }; \/\/ Must be <= 9.$/;"	e	enum:std::_Rope_iterator_base::__anon20
_S_rb_tree_black	stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_black = true;$/;"	m	namespace:std
_S_rb_tree_red	stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_red = false;$/;"	m	namespace:std
_S_ref	stl/ropeimpl.h	/^        _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
_S_ref	stl/ropeimpl.h	/^    _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
_S_ref	stl/stl_rope.h	/^              _RopeRep::_S_ref(__t);$/;"	p	class:std::rope::_RopeRep	signature:(__t)
_S_ref	stl/stl_rope.h	/^          static void _S_ref(_RopeRep* __t)$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __t)
_S_ref	stl/stl_rope.h	/^          static void _S_ref(_RopeRep*) {}$/;"	f	class:std::rope	access:protected	signature:(_RopeRep*)
_S_ref	stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_ref	stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_ref	stl/stl_rope.h	/^        _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
_S_ref	stl/stl_rope.h	/^        _RopeRep::_S_ref(__x._M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(__x._M_root)
_S_ref	stl/stl_rope.h	/^       { _RopeRep::_S_ref(_M_root); if (!(__r -> empty()))_S_setcache(*this); }$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
_S_refill	stl/stl_alloc.h	/^  static void* _S_refill(size_t __n);$/;"	p	class:std::__default_alloc_template	access:private	signature:(size_t __n)
_S_refill	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_refill(size_t __n)$/;"	f	class:std::__default_alloc_template	signature:(size_t __n)
_S_right	stl/stl_tree.h	/^    _M_erase(_S_right(__x));$/;"	p	signature:(__x)
_S_right	stl/stl_tree.h	/^  static _Link_type& _S_right(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_right	stl/stl_tree.h	/^  static _Link_type& _S_right(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_S_round_up	stl/stl_alloc.h	/^  _S_round_up(size_t __bytes) $/;"	f	class:std::__default_alloc_template	access:private	signature:(size_t __bytes)
_S_rounded_up_size	stl/stl_rope.h	/^        static size_t _S_rounded_up_size(size_t __n) {$/;"	f	class:std::rope	access:protected	signature:(size_t __n)
_S_rounded_up_size	stl/stl_rope.h	/^    static size_t _S_rounded_up_size(size_t __n) {$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:(size_t __n)
_S_setbuf	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setbuf( $/;"	f	class:std::_Rope_iterator_base	signature:( _Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setbuf	stl/stl_rope.h	/^    static void _S_setbuf(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_setcache	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache$/;"	f	class:std::_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setcache	stl/stl_rope.h	/^    static void _S_setcache(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_setcache_for_incr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache_for_incr$/;"	f	class:std::_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
_S_setcache_for_incr	stl/stl_rope.h	/^    static void _S_setcache_for_incr(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
_S_start_free	stl/stl_alloc.h	/^  static char* _S_start_free;$/;"	m	class:std::__default_alloc_template	access:private
_S_start_free	stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;$/;"	m	class:std::__default_alloc_template
_S_substring	stl/ropeimpl.h	/^		  _S_substring(__left, __start, __left_len));$/;"	p	signature:(__left, __start, __left_len)
_S_substring	stl/ropeimpl.h	/^		  _S_substring(__right, 0, __endp1 - __left_len));$/;"	p	signature:(__right, 0, __endp1 - __left_len)
_S_substring	stl/ropeimpl.h	/^	    _Self_destruct_ptr __prefix(_S_substring(__r, 0, __max_len));$/;"	p	signature:(__r, 0, __max_len)
_S_substring	stl/ropeimpl.h	/^      _My_rope::_S_substring(__old, 0, _M_pos));$/;"	p	signature:(__old, 0, _M_pos)
_S_substring	stl/ropeimpl.h	/^      _My_rope::_S_substring(__old, _M_pos+1, __old->_M_size));$/;"	p	signature:(__old, _M_pos+1, __old->_M_size)
_S_substring	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base, $/;"	f	class:std::rope	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
_S_substring	stl/stl_rope.h	/^              _S_substring(__old, 0, __pos1));$/;"	p	signature:(__old, 0, __pos1)
_S_substring	stl/stl_rope.h	/^              _S_substring(__old, __pos2, __old->_M_size));$/;"	p	signature:(__old, __pos2, __old->_M_size)
_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __appendee(_S_substring($/;"	p	signature:(__s._M_root, __s._M_current_pos, __e._M_current_pos)
_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __left(_S_substring(_M_tree_ptr, 0, __p));$/;"	p	signature:(_M_tree_ptr, 0, __p)
_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __right(_S_substring(_M_tree_ptr, __p, size()));$/;"	p	signature:(_M_tree_ptr, __p, size())
_S_substring	stl/stl_rope.h	/^        static _RopeRep* _S_substring(_RopeRep* __base,$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
_S_substringfn	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
_S_swap_lock	stl/stl_threads.h	/^        static mutex_t _S_swap_lock;$/;"	m	struct:std::_Swap_lock_struct	access:public
_S_swap_lock	stl/stl_threads.h	/^        static pthread_mutex_t _S_swap_lock;$/;"	m	struct:std::_Swap_lock_struct	access:public
_S_swap_lock	stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = DEFAULTMUTEX;$/;"	m	class:std::_Swap_lock_struct
_S_swap_lock	stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:std::_Swap_lock_struct
_S_tree_concat	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_tree_concat (_RopeRep* __left, _RopeRep* __right)$/;"	f	class:std::rope	signature:(_RopeRep* __left, _RopeRep* __right)
_S_tree_concat	stl/stl_rope.h	/^        _S_tree_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
_S_unref	stl/ropeimpl.h	/^	    __STL_UNWIND(_S_unref(__leftleft); _S_unref(__rest))$/;"	p	signature:(__leftleft)
_S_unref	stl/ropeimpl.h	/^	  __STL_UNWIND(_S_unref(__left); _S_unref(__nright));$/;"	p	signature:(__left)
_S_unref	stl/ropeimpl.h	/^        _RopeRep::_S_unref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
_S_unref	stl/ropeimpl.h	/^      _RopeRep::_S_unref(__old);$/;"	p	class:std::_RopeRep	signature:(__old)
_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__left); _S_unref(__right));$/;"	p	signature:(__left)
_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__r); _S_unref(__nright));$/;"	p	signature:(__r)
_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__r); _S_unref(__right))$/;"	p	signature:(__r)
_S_unref	stl/stl_rope.h	/^              _RopeRep::_S_unref(__t);$/;"	p	class:std::rope::_RopeRep	signature:(__t)
_S_unref	stl/stl_rope.h	/^          static void _S_unref(_RopeRep* __t)$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __t)
_S_unref	stl/stl_rope.h	/^          static void _S_unref(_RopeRep*) {}$/;"	f	class:std::rope	access:protected	signature:(_RopeRep*)
_S_unref	stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
_S_unref	stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
_S_unref	stl/stl_rope.h	/^        _RopeRep::_S_unref(_M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
_S_unref	stl/stl_rope.h	/^        _RopeRep::_S_unref(__old);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(__old)
_S_unref	stl/stl_rope.h	/^      { _Rope_RopeRep<_CharT,_Alloc>::_S_unref(_M_ptr); }$/;"	p	class:std::_Rope_self_destruct_ptr::_Rope_RopeRep	signature:(_M_ptr)
_S_value	stl/stl_tree.h	/^  static reference _S_value(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
_S_value	stl/stl_tree.h	/^  static reference _S_value(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
_Select1st	stl/stl_function.h	/^struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {$/;"	s	namespace:std	inherits:unary_function
_Select2nd	stl/stl_function.h	/^struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>$/;"	s	namespace:std	inherits:unary_function
_Self	stl/stl_deque.h	/^  typedef _Deque_iterator _Self;$/;"	t	struct:std::_Deque_iterator	access:public
_Self	stl/stl_iterator.h	/^                                         _Reference, _Distance>  _Self;$/;"	t	class:std::reverse_bidirectional_iterator	access:private
_Self	stl/stl_iterator.h	/^        _Self;$/;"	t	class:std::reverse_iterator	access:private
_Self	stl/stl_iterator.h	/^  typedef reverse_iterator<_Iterator> _Self;$/;"	t	class:std::reverse_iterator	access:public
_Self	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;$/;"	t	struct:std::_List_iterator	access:public
_Self	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Ref, _Ptr>             _Self;$/;"	t	struct:std::_Slist_iterator	access:public
_Self	stl/stl_tree.h	/^    _Self;$/;"	t	struct:std::_Rb_tree_iterator	access:public
_Self_destruct_ptr	stl/stl_rope.h	/^            typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:std::rope	access:protected
_Self_destruct_ptr	stl/stl_rope.h	/^            typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:std::rope	access:protected
_Self_destruct_ptr	stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
_Self_destruct_ptr	stl/stl_rope.h	/^        typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
_Sequence_concept_specification	stl/sequence_concepts.h	/^struct _Sequence_concept_specification {$/;"	s
_Sequence_concept_specification::_DefaultConstructible_concept_specification::_DefaultConstructible_requirement_violation	stl/sequence_concepts.h	/^  _DefaultConstructible_concept_specification<_Sequence>::_DefaultConstructible_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_DefaultConstructible_concept_specification	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__erase_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__erase_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__front_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__range_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
_Sequence_concept_specification::_ForwardContainer_concept_specification::_ForwardContainer_requirement_violation	stl/sequence_concepts.h	/^  _ForwardContainer_concept_specification<_Sequence>::_ForwardContainer_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ForwardContainer_concept_specification	signature:(__s)
_Sequence_concept_specification::_Sequence_requirement_violation	stl/sequence_concepts.h	/^_Sequence_requirement_violation(_Sequence __s) {$/;"	f	struct:_Sequence_concept_specification	access:public	signature:(_Sequence __s)
_Sequence_requirement_violation	stl/sequence_concepts.h	/^  _Sequence_concept_specification<_BackInsertionSequence>::_Sequence_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_Sequence_concept_specification	signature:(__s)
_Sequence_requirement_violation	stl/sequence_concepts.h	/^  _Sequence_concept_specification<_FrontInsertionSequence>::_Sequence_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_Sequence_concept_specification	signature:(__s)
_Sequence_requirement_violation	stl/sequence_concepts.h	/^_Sequence_requirement_violation(_Sequence __s) {$/;"	f	struct:_Sequence_concept_specification	access:public	signature:(_Sequence __s)
_Sequence_value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::priority_queue	access:private
_Sequence_value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::queue	access:private
_Sequence_value_type	stl/stl_stack.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::stack	access:private
_Slist_alloc_base	stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type& __a) : _M_node_allocator(__a) {}$/;"	f	class:std::_Slist_alloc_base	access:public	signature:(const allocator_type& __a)
_Slist_alloc_base	stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type&) {}$/;"	f	class:std::_Slist_alloc_base	access:public	signature:(const allocator_type&)
_Slist_alloc_base	stl/stl_slist.h	/^class _Slist_alloc_base {$/;"	c	namespace:std
_Slist_alloc_base	stl/stl_slist.h	/^class _Slist_alloc_base<_Tp,_Allocator, true> {$/;"	c	namespace:std
_Slist_base	stl/stl_slist.h	/^  _Slist_base(const allocator_type& __a)$/;"	f	struct:std::_Slist_base	access:public	signature:(const allocator_type& __a)
_Slist_base	stl/stl_slist.h	/^  _Slist_base(const allocator_type&) { _M_head._M_next = 0; }$/;"	f	struct:std::_Slist_base	access:public	signature:(const allocator_type&)
_Slist_base	stl/stl_slist.h	/^struct _Slist_base {$/;"	s	namespace:std
_Slist_base	stl/stl_slist.h	/^struct _Slist_base$/;"	s	namespace:std	inherits:_Slist_alloc_base
_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator() : _Slist_iterator_base(0) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:()
_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:(_Node* __x)
_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:(const iterator& __x)
_Slist_iterator	stl/stl_slist.h	/^struct _Slist_iterator : public _Slist_iterator_base$/;"	s	namespace:std	inherits:_Slist_iterator_base
_Slist_iterator_base	stl/stl_slist.h	/^  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(_Slist_node_base* __x)
_Slist_iterator_base	stl/stl_slist.h	/^struct _Slist_iterator_base$/;"	s	namespace:std
_Slist_node	stl/stl_slist.h	/^struct _Slist_node : public _Slist_node_base$/;"	s	namespace:std	inherits:_Slist_node_base
_Slist_node_base	stl/stl_slist.h	/^struct _Slist_node_base$/;"	s	namespace:std
_Swap_lock_struct	stl/stl_threads.h	/^    struct _Swap_lock_struct {$/;"	s	namespace:std
_Tag	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	g	struct:std::_Rope_RopeRep	access:public
_Temporary_buffer	stl/stl_tempbuf.h	/^  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
_Temporary_buffer	stl/stl_tempbuf.h	/^  _Temporary_buffer(const _Temporary_buffer&) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
_Temporary_buffer	stl/stl_tempbuf.h	/^class _Temporary_buffer {$/;"	c	namespace:std
_Tp	stl/concept_checks.h	/^  typedef typename _Alloc::value_type _Tp;$/;"	t
_Tp	stl/stl_algobase.h	/^  typedef typename iterator_traits<_InputIter>::value_type _Tp;$/;"	t
_Tp	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	p	signature:(__val)
_Tp	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	p	signature:()
_Trivial	stl/stl_algobase.h	/^          _Trivial;$/;"	t
_Trivial	stl/stl_tempbuf.h	/^    typedef typename __type_traits<_Tp>::is_POD_type _Trivial;$/;"	t
_TrivialIterator_concept_specification	stl/concept_checks.h	/^struct _TrivialIterator_concept_specification {$/;"	s
_TrivialIterator_concept_specification::_Assignable_concept_specification::_Assignable_requirement_violation	stl/concept_checks.h	/^    _Assignable_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_Assignable_concept_specification	signature:(__i)
_TrivialIterator_concept_specification::_DefaultConstructible_concept_specification::_DefaultConstructible_requirement_violation	stl/concept_checks.h	/^    _DefaultConstructible_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_DefaultConstructible_concept_specification	signature:(__i)
_TrivialIterator_concept_specification::_EqualityComparable_concept_specification::_EqualityComparable_requirement_violation	stl/concept_checks.h	/^    _EqualityComparable_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_EqualityComparable_concept_specification	signature:(__i)
_TrivialIterator_concept_specification::_STL_ERROR::__dereference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_STL_ERROR	signature:(__i)
_TrivialIterator_concept_specification::_TrivialIterator_requirement_violation	stl/concept_checks.h	/^_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_TrivialIterator_concept_specification::__T	stl/concept_checks.h	/^    value_type __T;$/;"	t
_TrivialIterator_requirement_violation	stl/concept_checks.h	/^    _TrivialIterator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_TrivialIterator_concept_specification	signature:(__i)
_TrivialIterator_requirement_violation	stl/concept_checks.h	/^    _TrivialIterator_requirement_violation(__i);$/;"	p	class:_Mutable_TrivialIterator_concept_specification::_TrivialIterator_concept_specification	signature:(__i)
_TrivialIterator_requirement_violation	stl/concept_checks.h	/^_TrivialIterator_requirement_violation(_TrivialIterator __i) {$/;"	f	struct:_TrivialIterator_concept_specification	access:public	signature:(_TrivialIterator __i)
_Trivial_destructor	stl/stl_construct.h	/^          _Trivial_destructor;$/;"	t
_Type	stl/concept_checks.h	/^  typedef _Tp _Type;$/;"	t	struct:_Mutable_trait	access:public
_TypePtr	stl/container_concepts.h	/^  typedef Type* _TypePtr;$/;"	t
_UITHREADS	stl/stl_config.h	245;"	d
_Vector_alloc_base	stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Vector_alloc_base	access:public	signature:(const allocator_type& __a)
_Vector_alloc_base	stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type&)$/;"	f	class:std::_Vector_alloc_base	access:public	signature:(const allocator_type&)
_Vector_alloc_base	stl/stl_vector.h	/^class _Vector_alloc_base {$/;"	c	namespace:std
_Vector_alloc_base	stl/stl_vector.h	/^class _Vector_alloc_base<_Tp, _Allocator, true> {$/;"	c	namespace:std
_Vector_base	stl/stl_vector.h	/^  _Vector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:std::_Vector_base	access:public	signature:(const allocator_type& __a)
_Vector_base	stl/stl_vector.h	/^  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
_Vector_base	stl/stl_vector.h	/^struct _Vector_base$/;"	s	namespace:std	inherits:_Vector_alloc_base
_Void_pointer	stl/stl_list.h	/^  typedef void* _Void_pointer;$/;"	t	class:std::list	access:protected
__BVECTOR	stl/stl_bvector.h	/^class __BVECTOR : public __BVECTOR_BASE $/;"	c	namespace:std	inherits:__BVECTOR_BASE
__BVECTOR	stl/stl_bvector.h	358;"	d
__BVECTOR	stl/stl_bvector.h	880;"	d
__BVECTOR_BASE	stl/stl_bvector.h	360;"	d
__BVECTOR_BASE	stl/stl_bvector.h	882;"	d
__BVECTOR_TMPL_LIST	stl/stl_bvector.h	361;"	d
__BVECTOR_TMPL_LIST	stl/stl_bvector.h	883;"	d
__CONCEPT_CHECKS_H	stl/concept_checks.h	15;"	d
__DECLARE_INSTANCE	stl/stl_threads.h	/^    __DECLARE_INSTANCE(mutex_t, _Swap_lock_struct<__dummy>::_S_swap_lock, $/;"	p	namespace:std	signature:(mutex_t, _Swap_lock_struct<__dummy>::_S_swap_lock, =DEFAULTMUTEX)
__DISTANCE_TYPE	stl/stl_iterator_base.h	178;"	d
__DISTANCE_TYPE	stl/stl_iterator_base.h	262;"	d
__GC_CONST	stl/stl_rope.h	28;"	d
__GC_CONST	stl/stl_rope.h	31;"	d
__HASH_ALLOC_INIT	stl/stl_hashtable.h	216;"	d
__HASH_ALLOC_INIT	stl/stl_hashtable.h	225;"	d
__HASH_ALLOC_INIT	stl/stl_hashtable.h	288;"	d
__ITERATOR_CATEGORY	stl/stl_iterator_base.h	177;"	d
__ITERATOR_CATEGORY	stl/stl_iterator_base.h	261;"	d
__L	stl/stl_tree.h	/^    _Link_type __L = _S_left(__x);$/;"	l
__List_base_reverse	stl/stl_list.h	/^inline void __List_base_reverse(_List_node_base* __p)$/;"	f	namespace:std	signature:(_List_node_base* __p)
__M	stl/stl_algo.h	/^    _Distance __M = __rand(__t);$/;"	l
__M	stl/stl_algo.h	/^    _Distance __M = __random_number(__t);$/;"	l
__NODE_ALLOCATOR_LOCK	stl/stl_alloc.h	74;"	d
__NODE_ALLOCATOR_LOCK	stl/stl_alloc.h	79;"	d
__NODE_ALLOCATOR_LOCK	stl/stl_alloc.h	86;"	d
__NODE_ALLOCATOR_THREADS	stl/stl_alloc.h	62;"	d
__NODE_ALLOCATOR_THREADS	stl/stl_alloc.h	88;"	d
__NODE_ALLOCATOR_UNLOCK	stl/stl_alloc.h	76;"	d
__NODE_ALLOCATOR_UNLOCK	stl/stl_alloc.h	81;"	d
__NODE_ALLOCATOR_UNLOCK	stl/stl_alloc.h	87;"	d
__PRIVATE	stl/stl_alloc.h	22;"	d
__PRIVATE	stl/stl_alloc.h	26;"	d
__R	stl/stl_tree.h	/^    _Link_type __R = _S_right(__x);$/;"	l
__RESTRICT	stl/stl_alloc.h	57;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1279;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1287;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1307;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1317;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1350;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	1357;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	397;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	405;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	422;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	432;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	462;"	d
__ROPE_DEFINE_ALLOC	stl/stl_rope.h	469;"	d
__ROPE_DEFINE_ALLOCS	stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Alloc);$/;"	p	class:std::_Rope_rep_base	access:protected	signature:(_Alloc)
__ROPE_DEFINE_ALLOCS	stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Allocator);$/;"	p	class:std::_Rope_rep_alloc_base	access:protected	signature:(_Allocator)
__ROPE_DEFINE_ALLOCS	stl/stl_rope.h	356;"	d
__SGI_STL_ALGOBASE_H	stl/algobase.h	27;"	d
__SGI_STL_ALGO_H	stl/algo.h	28;"	d
__SGI_STL_ALLOC_H	stl/alloc.h	15;"	d
__SGI_STL_BVECTOR_H	stl/bvector.h	28;"	d
__SGI_STL_CHAR_TRAITS_H	stl/char_traits.h	15;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	stl/stl_algobase.h	275;"	d
__SGI_STL_DECLARE_COPY_TRIVIAL	stl/stl_algobase.h	301;"	d
__SGI_STL_DEQUE_H	stl/deque.h	28;"	d
__SGI_STL_EXCEPTION_H	stl/stl_exception.h	15;"	d
__SGI_STL_FUNCTION_H	stl/function.h	28;"	d
__SGI_STL_HASHTABLE_H	stl/hashtable.h	32;"	d
__SGI_STL_HASH_FUN_H	stl/stl_hash_fun.h	32;"	d
__SGI_STL_HASH_MAP_H	stl/hash_map.h	28;"	d
__SGI_STL_HASH_SET_H	stl/hash_set.h	28;"	d
__SGI_STL_HEAP_H	stl/heap.h	27;"	d
__SGI_STL_INTERNAL_ALGOBASE_H	stl/stl_algobase.h	33;"	d
__SGI_STL_INTERNAL_ALGO_H	stl/stl_algo.h	32;"	d
__SGI_STL_INTERNAL_ALLOC_H	stl/stl_alloc.h	19;"	d
__SGI_STL_INTERNAL_BVECTOR_H	stl/stl_bvector.h	32;"	d
__SGI_STL_INTERNAL_CONSTRUCT_H	stl/stl_construct.h	32;"	d
__SGI_STL_INTERNAL_CTRAITS_FUNCTIONS_H	stl/stl_ctraits_fns.h	19;"	d
__SGI_STL_INTERNAL_DEQUE_H	stl/stl_deque.h	34;"	d
__SGI_STL_INTERNAL_FUNCTION_H	stl/stl_function.h	32;"	d
__SGI_STL_INTERNAL_HASHTABLE_H	stl/stl_hashtable.h	32;"	d
__SGI_STL_INTERNAL_HASH_MAP_H	stl/stl_hash_map.h	32;"	d
__SGI_STL_INTERNAL_HASH_SET_H	stl/stl_hash_set.h	32;"	d
__SGI_STL_INTERNAL_HEAP_H	stl/stl_heap.h	31;"	d
__SGI_STL_INTERNAL_ITERATOR_BASE_H	stl/stl_iterator_base.h	32;"	d
__SGI_STL_INTERNAL_ITERATOR_H	stl/stl_iterator.h	32;"	d
__SGI_STL_INTERNAL_LIST_H	stl/stl_list.h	32;"	d
__SGI_STL_INTERNAL_MAP_H	stl/stl_map.h	32;"	d
__SGI_STL_INTERNAL_MULTIMAP_H	stl/stl_multimap.h	32;"	d
__SGI_STL_INTERNAL_MULTISET_H	stl/stl_multiset.h	32;"	d
__SGI_STL_INTERNAL_NUMERIC_H	stl/stl_numeric.h	33;"	d
__SGI_STL_INTERNAL_PAIR_H	stl/stl_pair.h	32;"	d
__SGI_STL_INTERNAL_QUEUE_H	stl/stl_queue.h	32;"	d
__SGI_STL_INTERNAL_RAW_STORAGE_ITERATOR_H	stl/stl_raw_storage_iter.h	32;"	d
__SGI_STL_INTERNAL_RELOPS	stl/stl_relops.h	32;"	d
__SGI_STL_INTERNAL_ROPE_H	stl/stl_rope.h	25;"	d
__SGI_STL_INTERNAL_SET_H	stl/stl_set.h	32;"	d
__SGI_STL_INTERNAL_SLIST_H	stl/stl_slist.h	20;"	d
__SGI_STL_INTERNAL_STACK_H	stl/stl_stack.h	32;"	d
__SGI_STL_INTERNAL_TEMPBUF_H	stl/stl_tempbuf.h	32;"	d
__SGI_STL_INTERNAL_THREADS_H	stl/stl_threads.h	20;"	d
__SGI_STL_INTERNAL_TREE_H	stl/stl_tree.h	34;"	d
__SGI_STL_INTERNAL_UNINITIALIZED_H	stl/stl_uninitialized.h	32;"	d
__SGI_STL_INTERNAL_VECTOR_H	stl/stl_vector.h	32;"	d
__SGI_STL_ITERATOR_H	stl/iterator.h	28;"	d
__SGI_STL_LIST_H	stl/list.h	28;"	d
__SGI_STL_MAP_H	stl/map.h	28;"	d
__SGI_STL_MULTIMAP_H	stl/multimap.h	28;"	d
__SGI_STL_MULTISET_H	stl/multiset.h	28;"	d
__SGI_STL_NO_ARROW_OPERATOR	stl/stl_config.h	304;"	d
__SGI_STL_NO_ARROW_OPERATOR	stl/stl_config.h	371;"	d
__SGI_STL_NO_ARROW_OPERATOR	stl/stl_config.h	415;"	d
__SGI_STL_PAIR_H	stl/pair.h	28;"	d
__SGI_STL_PTHREAD_ALLOC_H	stl/pthread_alloc.h	15;"	d
__SGI_STL_ROPE_H	stl/rope.h	15;"	d
__SGI_STL_SET_H	stl/set.h	28;"	d
__SGI_STL_SLIST_H	stl/slist.h	16;"	d
__SGI_STL_STACK_H	stl/stack.h	28;"	d
__SGI_STL_STRING_FWD_H	stl/stl_string_fwd.h	15;"	d
__SGI_STL_TEMPBUF_H	stl/tempbuf.h	28;"	d
__SGI_STL_TREE_H	stl/tree.h	30;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	stl/stl_config.h	219;"	d
__SGI_STL_USE_AUTO_PTR_CONVERSIONS	stl/stl_config.h	279;"	d
__SGI_STL_VECBOOL_TEMPLATE	stl/stl_bvector.h	357;"	d
__SGI_STL_VECBOOL_TEMPLATE	stl/stl_bvector.h	879;"	d
__SGI_STL_VECTOR_H	stl/vector.h	28;"	d
__STATIC_IF_SGI_ALLOC	stl/stl_rope.h	379;"	d
__STATIC_IF_SGI_ALLOC	stl/stl_rope.h	450;"	d
__STD	stl/stl_config.h	494;"	d
__STD	stl/stl_config.h	510;"	d
__STD_QUALIFIER	stl/stl_config.h	399;"	d
__STD_QUALIFIER	stl/stl_config.h	527;"	d
__STD_QUALIFIER	stl/stl_config.h	529;"	d
__STD_RELOPS	stl/stl_config.h	502;"	d
__STD_RELOPS	stl/stl_config.h	507;"	d
__STD_RELOPS	stl/stl_config.h	516;"	d
__STL_BEGIN_RELOPS_NAMESPACE	stl/stl_config.h	500;"	d
__STL_BEGIN_RELOPS_NAMESPACE	stl/stl_config.h	505;"	d
__STL_BEGIN_RELOPS_NAMESPACE	stl/stl_config.h	514;"	d
__STL_BINARY_FUNCTION_CHECK	stl/concept_checks.h	131;"	d
__STL_BINARY_FUNCTION_CHECK	stl/concept_checks.h	64;"	d
__STL_CAN_THROW_RANGE_ERRORS	stl/stl_config.h	216;"	d
__STL_CAN_THROW_RANGE_ERRORS	stl/stl_config.h	273;"	d
__STL_CAN_THROW_RANGE_ERRORS	stl/stl_config.h	382;"	d
__STL_CATCH_ALL	stl/stl_config.h	534;"	d
__STL_CATCH_ALL	stl/stl_config.h	541;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/concept_checks.h	155;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/concept_checks.h	206;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/concept_checks.h	66;"	d
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:std::hash_map	access:private	signature:(_EqualKey, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:std::hash_multimap	access:private	signature:(_EqualKey, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:std::hash_multiset	access:private	signature:(_EqualKey, bool, _Value, _Value)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:std::hash_set	access:private	signature:(_EqualKey, bool, _Value, _Value)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::map	access:public	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_multimap.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::multimap	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_multiset.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::multiset	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_queue.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Tp, _Tp);$/;"	p	class:std::priority_queue	access:private	signature:(_Compare, bool, _Tp, _Tp)
__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::set	access:private	signature:(_Compare, bool, _Key, _Key)
__STL_CLASS_GENERATOR_CHECK	stl/concept_checks.h	153;"	d
__STL_CLASS_GENERATOR_CHECK	stl/concept_checks.h	185;"	d
__STL_CLASS_GENERATOR_CHECK	stl/concept_checks.h	59;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	167;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	235;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	269;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	314;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	326;"	d
__STL_CLASS_PARTIAL_SPECIALIZATION	stl/stl_config.h	407;"	d
__STL_CLASS_REQUIRES	stl/concept_checks.h	151;"	d
__STL_CLASS_REQUIRES	stl/concept_checks.h	165;"	d
__STL_CLASS_REQUIRES	stl/concept_checks.h	52;"	d
__STL_CLASS_REQUIRES	stl/stl_deque.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::deque	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::hash_map	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::hash_multimap	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::hash_map	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::hash_multimap	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:std::hash_multiset	access:private	signature:(_Value, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:std::hash_set	access:private	signature:(_Value, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_list.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::list	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::map	access:public	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_multimap.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::multimap	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_multiset.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::multiset	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:std::queue	access:private	signature:(_Sequence, _BackInsertionSequence)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _FrontInsertionSequence);$/;"	p	class:std::queue	access:private	signature:(_Sequence, _FrontInsertionSequence)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _RandomAccessContainer);$/;"	p	class:std::priority_queue	access:private	signature:(_Sequence, _RandomAccessContainer)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _Sequence);$/;"	p	class:std::priority_queue	access:private	signature:(_Sequence, _Sequence)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::priority_queue	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::queue	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_set.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::set	access:private	signature:(_Key, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_slist.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::slist	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:std::stack	access:private	signature:(_Sequence, _BackInsertionSequence)
__STL_CLASS_REQUIRES	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::stack	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES	stl/stl_vector.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::vector	access:private	signature:(_Tp, _Assignable)
__STL_CLASS_REQUIRES_BINARY_OP	stl/concept_checks.h	156;"	d
__STL_CLASS_REQUIRES_BINARY_OP	stl/concept_checks.h	217;"	d
__STL_CLASS_REQUIRES_BINARY_OP	stl/concept_checks.h	70;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	stl/concept_checks.h	152;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	stl/concept_checks.h	175;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	stl/concept_checks.h	56;"	d
__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::priority_queue	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::queue	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::stack	access:private	signature:(_Tp, _Sequence_value_type)
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/concept_checks.h	154;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/concept_checks.h	195;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/concept_checks.h	62;"	d
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:std::hash_map	access:private	signature:(_HashFcn, size_t, _Key)
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:std::hash_multimap	access:private	signature:(_HashFcn, size_t, _Key)
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:std::hash_multiset	access:private	signature:(_HashFcn, size_t, _Value)
__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:std::hash_set	access:private	signature:(_HashFcn, size_t, _Value)
__STL_CONFIG_H	stl/stl_config.h	28;"	d
__STL_CONTAINER_CONCEPTS_H	stl/container_concepts.h	15;"	d
__STL_CONVERTIBLE	stl/concept_checks.h	100;"	d
__STL_CONVERTIBLE	stl/concept_checks.h	54;"	d
__STL_DEFAULT_ALLOCATOR	stl/stl_config.h	481;"	d
__STL_DEFAULT_ALLOCATOR	stl/stl_config.h	483;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	stl/stl_config.h	187;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	stl/stl_config.h	284;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	stl/stl_config.h	372;"	d
__STL_DEFAULT_CONSTRUCTOR_BUG	stl/stl_config.h	405;"	d
__STL_DEFINE_BINARY_OP_CHECK	stl/concept_checks.h	323;"	d
__STL_DEPENDENT_DEFAULT_TMPL	stl/stl_config.h	437;"	d
__STL_DEPENDENT_DEFAULT_TMPL	stl/stl_config.h	439;"	d
__STL_DONT_USE_BOOL_TYPEDEF	stl/stl_config.h	368;"	d
__STL_END_RELOPS_NAMESPACE	stl/stl_config.h	501;"	d
__STL_END_RELOPS_NAMESPACE	stl/stl_config.h	506;"	d
__STL_END_RELOPS_NAMESPACE	stl/stl_config.h	515;"	d
__STL_EXCEPTION_BASE	stl/stl_exception.h	35;"	d
__STL_EXCEPTION_BASE	stl/stl_exception.h	47;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	stl/stl_config.h	181;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	stl/stl_config.h	271;"	d
__STL_EXPLICIT_FUNCTION_TMPL_ARGS	stl/stl_config.h	409;"	d
__STL_FREE_STRING	stl/ropeimpl.h	/^		__STL_UNWIND(_RopeRep::__STL_FREE_STRING($/;"	p	signature:(__section, __result_len, __base->get_allocator())
__STL_FREE_STRING	stl/ropeimpl.h	/^    __STL_UNWIND(_RopeRep::__STL_FREE_STRING(__new_data, __old_len + __len,$/;"	p	signature:(__new_data, __old_len + __len, __r->get_allocator())
__STL_FREE_STRING	stl/stl_rope.h	510;"	d
__STL_FREE_STRING	stl/stl_rope.h	513;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	stl/stl_config.h	170;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	stl/stl_config.h	237;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	stl/stl_config.h	270;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	stl/stl_config.h	325;"	d
__STL_FUNCTION_TMPL_PARTIAL_ORDER	stl/stl_config.h	408;"	d
__STL_GENERATOR_CHECK	stl/concept_checks.h	115;"	d
__STL_GENERATOR_CHECK	stl/concept_checks.h	58;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	196;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	241;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	280;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	316;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	328;"	d
__STL_HAS_NAMESPACES	stl/stl_config.h	381;"	d
__STL_HAS_WCHAR_T	stl/stl_config.h	161;"	d
__STL_HAS_WCHAR_T	stl/stl_config.h	234;"	d
__STL_LIMITED_DEFAULT_TEMPLATES	stl/stl_config.h	414;"	d
__STL_LONG_LONG	stl/stl_config.h	210;"	d
__STL_LONG_LONG	stl/stl_config.h	243;"	d
__STL_LONG_LONG	stl/stl_config.h	321;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	173;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	238;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	272;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	311;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	322;"	d
__STL_MEMBER_TEMPLATES	stl/stl_config.h	410;"	d
__STL_MEMBER_TEMPLATE_CLASSES	stl/stl_config.h	175;"	d
__STL_MEMBER_TEMPLATE_CLASSES	stl/stl_config.h	239;"	d
__STL_MEMBER_TEMPLATE_CLASSES	stl/stl_config.h	277;"	d
__STL_MEMBER_TEMPLATE_CLASSES	stl/stl_config.h	312;"	d
__STL_MEMBER_TEMPLATE_CLASSES	stl/stl_config.h	323;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	stl/stl_config.h	178;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	stl/stl_config.h	184;"	d
__STL_MEMBER_TEMPLATE_KEYWORD	stl/stl_config.h	330;"	d
__STL_MUTEX_INITIALIZER	stl/stl_alloc.h	/^        __STL_MUTEX_INITIALIZER;$/;"	m	namespace:std
__STL_MUTEX_INITIALIZER	stl/stl_threads.h	338;"	d
__STL_MUTEX_INITIALIZER	stl/stl_threads.h	342;"	d
__STL_MUTEX_INITIALIZER	stl/stl_threads.h	344;"	d
__STL_MUTEX_INITIALIZER	stl/stl_threads.h	346;"	d
__STL_NEED_EXPLICIT	stl/stl_config.h	190;"	d
__STL_NEED_EXPLICIT	stl/stl_config.h	262;"	d
__STL_NEED_EXPLICIT	stl/stl_config.h	299;"	d
__STL_NEED_EXPLICIT	stl/stl_config.h	362;"	d
__STL_NEED_TYPENAME	stl/stl_config.h	164;"	d
__STL_NEED_TYPENAME	stl/stl_config.h	261;"	d
__STL_NEED_TYPENAME	stl/stl_config.h	298;"	d
__STL_NEED_TYPENAME	stl/stl_config.h	358;"	d
__STL_NEED_TYPENAME	stl/stl_config.h	413;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	stl/stl_config.h	370;"	d
__STL_NON_TYPE_TMPL_PARAM_BUG	stl/stl_config.h	416;"	d
__STL_NOTHROW	stl/stl_alloc.h	/^  __allocator(const __allocator& __a) __STL_NOTHROW$/;"	m	struct:std::__allocator	access:public
__STL_NOTHROW	stl/stl_alloc.h	/^  __allocator(const __allocator<_Tp1, _Alloc>& __a) __STL_NOTHROW$/;"	m	struct:std::__allocator	access:public
__STL_NOTHROW	stl/stl_config.h	537;"	d
__STL_NOTHROW	stl/stl_config.h	544;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	204;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	266;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	307;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	364;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	395;"	d
__STL_NO_BAD_ALLOC	stl/stl_config.h	403;"	d
__STL_NO_BOOL	stl/stl_config.h	155;"	d
__STL_NO_BOOL	stl/stl_config.h	297;"	d
__STL_NO_BOOL	stl/stl_config.h	363;"	d
__STL_NO_DRAND48	stl/stl_config.h	327;"	d
__STL_NO_DRAND48	stl/stl_config.h	341;"	d
__STL_NO_DRAND48	stl/stl_config.h	349;"	d
__STL_NO_DRAND48	stl/stl_config.h	356;"	d
__STL_NO_DRAND48	stl/stl_config.h	404;"	d
__STL_NO_EXCEPTION_HEADER	stl/stl_config.h	200;"	d
__STL_NO_EXCEPTION_HEADER	stl/stl_config.h	265;"	d
__STL_NO_EXCEPTION_HEADER	stl/stl_config.h	306;"	d
__STL_NO_EXCEPTION_HEADER	stl/stl_config.h	394;"	d
__STL_NO_FRIEND_TEMPLATE_CLASS	stl/stl_config.h	360;"	d
__STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE	stl/stl_config.h	292;"	d
__STL_NO_USING_CLAUSE_IN_CLASS	stl/stl_config.h	359;"	d
__STL_NULL_TMPL_ARGS	stl/stl_config.h	453;"	d
__STL_NULL_TMPL_ARGS	stl/stl_config.h	455;"	d
__STL_NULL_TMPL_ARGS	stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_map&, const hash_map&);$/;"	p	class:std::hash_map	access:friend	signature:(const hash_map&, const hash_map&)
__STL_NULL_TMPL_ARGS	stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multimap&,const hash_multimap&);$/;"	p	class:std::hash_multimap	access:friend	signature:(const hash_multimap&,const hash_multimap&)
__STL_NULL_TMPL_ARGS	stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multiset&,const hash_multiset&);$/;"	p	class:std::hash_multiset	access:friend	signature:(const hash_multiset&,const hash_multiset&)
__STL_NULL_TMPL_ARGS	stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_set&, const hash_set&);$/;"	p	class:std::hash_set	access:friend	signature:(const hash_set&, const hash_set&)
__STL_NULL_TMPL_ARGS	stl/stl_hashtable.h	/^  operator== __STL_NULL_TMPL_ARGS (const hashtable&, const hashtable&);$/;"	p	class:std::hashtable	access:friend	signature:(const hashtable&, const hashtable&)
__STL_NULL_TMPL_ARGS	stl/stl_map.h	/^  operator< __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:std::map	access:friend	signature:(const map&, const map&)
__STL_NULL_TMPL_ARGS	stl/stl_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:std::map	access:friend	signature:(const map&, const map&)
__STL_NULL_TMPL_ARGS	stl/stl_multimap.h	/^  operator< __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:std::multimap	access:friend	signature:(const multimap&, const multimap&)
__STL_NULL_TMPL_ARGS	stl/stl_multimap.h	/^  operator== __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:std::multimap	access:friend	signature:(const multimap&, const multimap&)
__STL_NULL_TMPL_ARGS	stl/stl_multiset.h	/^  operator< __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:std::multiset	access:friend	signature:(const multiset&, const multiset&)
__STL_NULL_TMPL_ARGS	stl/stl_multiset.h	/^  operator== __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:std::multiset	access:friend	signature:(const multiset&, const multiset&)
__STL_NULL_TMPL_ARGS	stl/stl_queue.h	/^  operator<  __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:std::queue	access:friend	signature:(const queue&, const queue&)
__STL_NULL_TMPL_ARGS	stl/stl_queue.h	/^  operator== __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:std::queue	access:friend	signature:(const queue&, const queue&)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator==  __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
__STL_NULL_TMPL_ARGS	stl/stl_set.h	/^  operator<  __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:std::set	access:friend	signature:(const set&, const set&)
__STL_NULL_TMPL_ARGS	stl/stl_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:std::set	access:friend	signature:(const set&, const set&)
__STL_NULL_TMPL_ARGS	stl/stl_stack.h	/^  operator< __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:std::stack	access:friend	signature:(const stack&, const stack&)
__STL_NULL_TMPL_ARGS	stl/stl_stack.h	/^  operator== __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:std::stack	access:friend	signature:(const stack&, const stack&)
__STL_PARTIAL_SPECIALIZATION_SYNTAX	stl/stl_config.h	236;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	stl/stl_config.h	305;"	d
__STL_PARTIAL_SPECIALIZATION_SYNTAX	stl/stl_config.h	380;"	d
__STL_PTHREADS	stl/stl_config.h	145;"	d
__STL_PTHREADS	stl/stl_config.h	289;"	d
__STL_PTHREADS	stl/stl_config.h	302;"	d
__STL_RANGE_ERRORS_H	stl/stl_range_errors.h	16;"	d
__STL_REQUIRES	stl/concept_checks.h	51;"	d
__STL_REQUIRES	stl/concept_checks.h	94;"	d
__STL_REQUIRES_BINARY_OP	stl/concept_checks.h	139;"	d
__STL_REQUIRES_BINARY_OP	stl/concept_checks.h	68;"	d
__STL_REQUIRES_SAME_TYPE	stl/concept_checks.h	107;"	d
__STL_REQUIRES_SAME_TYPE	stl/concept_checks.h	55;"	d
__STL_RETHROW	stl/stl_config.h	536;"	d
__STL_RETHROW	stl/stl_config.h	543;"	d
__STL_ROPE_FROM_UNOWNED_CHAR_PTR	stl/stl_rope.h	1544;"	d
__STL_SGI_THREADS	stl/stl_config.h	207;"	d
__STL_STATIC_CONST_INIT_BUG	stl/stl_config.h	158;"	d
__STL_STATIC_CONST_INIT_BUG	stl/stl_config.h	357;"	d
__STL_STATIC_TEMPLATE_MEMBER_BUG	stl/stl_config.h	258;"	d
__STL_TEMPLATE	stl/stl_config.h	443;"	d
__STL_TEMPLATE	stl/stl_config.h	445;"	d
__STL_TEMPLATE_FRIENDS	stl/stl_config.h	174;"	d
__STL_TEMPLATE_FRIENDS	stl/stl_config.h	278;"	d
__STL_TEMPLATE_FRIENDS	stl/stl_config.h	313;"	d
__STL_TEMPLATE_FRIENDS	stl/stl_config.h	324;"	d
__STL_TEMPLATE_FRIENDS	stl/stl_config.h	411;"	d
__STL_TEMPLATE_NULL	stl/stl_config.h	460;"	d
__STL_TEMPLATE_NULL	stl/stl_config.h	462;"	d
__STL_THREADS	stl/stl_config.h	559;"	d
__STL_THROW	stl/stl_config.h	535;"	d
__STL_THROW	stl/stl_config.h	542;"	d
__STL_THROW_RANGE_ERRORS	stl/stl_range_errors.h	30;"	d
__STL_TRY	stl/stl_config.h	533;"	d
__STL_TRY	stl/stl_config.h	540;"	d
__STL_TYPEDEF_REQUIREMENT	stl/concept_checks.h	766;"	d
__STL_UITHREADS	stl/stl_config.h	149;"	d
__STL_UITHREADS	stl/stl_config.h	246;"	d
__STL_UNARY_FUNCTION_CHECK	stl/concept_checks.h	123;"	d
__STL_UNARY_FUNCTION_CHECK	stl/concept_checks.h	61;"	d
__STL_UNWIND	stl/stl_config.h	538;"	d
__STL_UNWIND	stl/stl_config.h	545;"	d
__STL_USE_CONCEPT_CHECKS	stl/stl_config.h	568;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	193;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	240;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	286;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	300;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	315;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	329;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	332;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	374;"	d
__STL_USE_EXCEPTIONS	stl/stl_config.h	419;"	d
__STL_USE_NAMESPACES	stl/stl_config.h	242;"	d
__STL_USE_NAMESPACES	stl/stl_config.h	493;"	d
__STL_USE_NAMESPACES	stl/stl_config.h	517;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	stl/stl_config.h	499;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	stl/stl_config.h	504;"	d
__STL_USE_NAMESPACE_FOR_RELOPS	stl/stl_config.h	513;"	d
__STL_USE_NEW_IOSTREAMS	stl/stl_config.h	213;"	d
__STL_USE_STD_ALLOCATORS	stl/stl_config.h	476;"	d
__STL_VOLATILE	stl/stl_config.h	560;"	d
__STL_VOLATILE	stl/stl_config.h	562;"	d
__STL_WIN32THREADS	stl/stl_config.h	335;"	d
__STL_WIN32THREADS	stl/stl_config.h	343;"	d
__STL_WIN32THREADS	stl/stl_config.h	377;"	d
__STL_WIN32THREADS	stl/stl_config.h	422;"	d
__T	stl/concept_checks.h	/^    _BidirectionalIterator>::value_type __T;$/;"	t
__T	stl/concept_checks.h	/^    value_type __T;$/;"	t
__T	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::value_type __T;$/;"	t
__THROW_BAD_ALLOC	stl/stl_alloc.h	45;"	d
__THROW_BAD_ALLOC	stl/stl_alloc.h	48;"	d
__TYPEDEF_WORKAROUND	stl/stl_rope.h	102;"	d
__TYPE_TRAITS_H	stl/type_traits.h	16;"	d
__USE_MALLOC	stl/stl_alloc.h	30;"	d
__VALUE_TYPE	stl/stl_iterator_base.h	179;"	d
__VALUE_TYPE	stl/stl_iterator_base.h	263;"	d
__VECTOR	stl/stl_bvector.h	/^  __VECTOR(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const __VECTOR& __x) : __BVECTOR_BASE(__x.get_allocator()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(const __VECTOR& __x)
__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const bool* __first, const bool* __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(const bool* __first, const bool* __last, const allocator_type& __a = allocator_type())
__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const_iterator __first, const_iterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
__VECTOR	stl/stl_bvector.h	/^  __VECTOR(size_type __n, bool __value,$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n, bool __value, const allocator_type& __a = allocator_type())
__VECTOR	stl/stl_bvector.h	/^  explicit __VECTOR(const allocator_type& __a = allocator_type())$/;"	f	class:std::__BVECTOR	access:public	signature:(const allocator_type& __a = allocator_type())
__VECTOR	stl/stl_bvector.h	/^  explicit __VECTOR(size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
__VECTOR	stl/stl_bvector.h	359;"	d
__VECTOR	stl/stl_bvector.h	881;"	d
__WORD_BIT	stl/stl_bvector.h	/^static const int __WORD_BIT = int(CHAR_BIT*sizeof(unsigned int));$/;"	m	namespace:std
__add_and_fetch	stl/stl_threads.h	50;"	d
__adj_endp1	stl/ropeimpl.h	/^    size_t __adj_endp1;$/;"	l
__adjacent_difference	stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
__adjacent_difference	stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
__adjust_heap	stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
__adjust_heap	stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
__advance	stl/stl_iterator_base.h	/^inline void __advance(_BidirectionalIterator& __i, _Distance __n, $/;"	f	namespace:std	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
__advance	stl/stl_iterator_base.h	/^inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag) {$/;"	f	namespace:std	signature:(_InputIter& __i, _Distance __n, input_iterator_tag)
__advance	stl/stl_iterator_base.h	/^inline void __advance(_RandomAccessIterator& __i, _Distance __n, $/;"	f	namespace:std	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
__after	stl/stl_slist.h	/^    _Slist_node_base* __after = __pos->_M_next;$/;"	l
__allocator	stl/stl_alloc.h	/^class __allocator<void, _Alloc> {$/;"	c
__allocator	stl/stl_alloc.h	/^struct __allocator {$/;"	s	namespace:std
__allocator::const_pointer	stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:__allocator	access:private
__allocator::difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:__allocator	access:private
__allocator::pointer	stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:__allocator	access:private
__allocator::rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:__allocator	access:private
__allocator::rebind::other	stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:__allocator::rebind	access:public
__allocator::size_type	stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:__allocator	access:private
__allocator::value_type	stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:__allocator	access:private
__assignment_operator_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__assignment_operator_requirement_violation(__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a)
__assignment_operator_requirement_violation	stl/concept_checks.h	/^  __assignment_operator_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
__back1	stl/stl_deque.h	/^    iterator __back1 = _M_finish;$/;"	l
__back2	stl/stl_deque.h	/^    iterator __back2 = __back1;$/;"	l
__back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__back_function_requirement_violation	stl/sequence_concepts.h	/^  __back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__balanced	stl/ropeimpl.h	/^        _RopeRep* __balanced;$/;"	l
__base_buffer	stl/ropeimpl.h	/^	_CharT* __base_buffer =$/;"	l
__base_leaf	stl/ropeimpl.h	/^	_RopeLeaf* __base_leaf;$/;"	l
__base_rope	stl/ropeimpl.h	/^	rope __base_rope;$/;"	l
__bc	stl/stl_tree.h	/^    int __bc = __node->_M_color == _S_rb_tree_black ? 1 : 0;$/;"	l
__before	stl/stl_tree.h	/^    iterator __before = __position;$/;"	l
__before_last	stl/stl_slist.h	/^  _Slist_node_base* __before_last = __slist_previous(__head, 0);$/;"	l
__begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__begin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __begin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__binary_function_requirement_violation	stl/concept_checks.h	/^  __binary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_BINARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _First& __first, const _Second& __second)
__black_count	stl/stl_tree.h	/^__black_count(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)
__bucket	stl/stl_hashtable.h	/^    size_type __bucket = _M_ht->_M_bkt_num(__old->_M_val);$/;"	l
__buf	stl/stl_algo.h	/^  _Temporary_buffer<_BidirectionalIter, _Tp> __buf(__first, __last);$/;"	p	signature:(__first, __last)
__buf	stl/stl_algo.h	/^  _Temporary_buffer<_ForwardIter, _Tp> __buf(__first, __last);$/;"	p	signature:(__first, __last)
__buf	stl/stl_rope.h	/^            _CharT* __buf = _Data_allocate(_S_rounded_up_size(1));$/;"	l
__buf_start_pos	stl/ropeimpl.h	/^		size_t __buf_start_pos = __leaf_pos;$/;"	l
__buffer	stl/ropeimpl.h	/^		_CharT* __buffer =$/;"	l
__buffer	stl/ropeimpl.h	/^	    _CharT __buffer[__max_len + 1];$/;"	l
__buffer_end	stl/stl_algo.h	/^    _Pointer __buffer_end = copy(__first, __middle, __buffer);$/;"	l
__buffer_end	stl/stl_algo.h	/^    _Pointer __buffer_end = copy(__middle, __last, __buffer);$/;"	l
__buffer_end	stl/stl_algo.h	/^  _BidirectionalIter2 __buffer_end;$/;"	l
__buffer_last	stl/stl_algo.h	/^  _Pointer __buffer_last = __buffer + __len;$/;"	l
__bytes_left	stl/stl_alloc.h	/^    size_t __bytes_left = _S_end_free - _S_start_free;$/;"	l
__bytes_to_get	stl/stl_alloc.h	/^        size_t __bytes_to_get = $/;"	l
__c	stl/concept_checks.h	/^    _Type __c(__a);$/;"	p	signature:(__a)
__c	stl/concept_checks.h	/^    _Type __c(__b);$/;"	p	signature:(__b)
__c	stl/ropeimpl.h	/^		_RopeConcatenation* __c = (_RopeConcatenation*)__base;$/;"	l
__c	stl/ropeimpl.h	/^		_RopeConcatenation* __c = (_RopeConcatenation*)__r;$/;"	l
__c	stl/ropeimpl.h	/^		_Rope_RopeConcatenation<_CharT,_Alloc>* __c =$/;"	l
__c	stl/ropeimpl.h	/^	        _Rope_RopeConcatenation<_CharT,_Alloc>* __c$/;"	l
__c	stl/ropeimpl.h	/^	_RopeConcatenation* __c = (_RopeConcatenation*)__r;$/;"	l
__c	stl/ropeimpl.h	/^      _Rope_insert_char_consumer<_CharT, _Traits> __c(__o);$/;"	p	signature:(__o)
__c	stl/ropeimpl.h	/^      _Rope_insert_char_consumer<_CharT> __c(__o);$/;"	p	signature:(__o)
__c	stl/ropeimpl.h	/^    _Rope_RopeConcatenation<_CharT,_Alloc>* __c;$/;"	l
__c	stl/ropeimpl.h	/^    _Rope_find_char_char_consumer<_CharT> __c(__pattern);$/;"	p	signature:(__pattern)
__c	stl/ropeimpl.h	/^    _Rope_flatten_char_consumer<_CharT> __c(__buffer);$/;"	p	signature:(__buffer)
__c	stl/stl_iterator.h	/^    int_type __c = _M_buf->sgetc();$/;"	l
__c	stl/stl_iterator.h	/^    int_type __c = _M_buf->snextc();$/;"	l
__c	stl/stl_rope.h	/^            _CharT __c = _CharT();$/;"	l
__carry	stl/stl_list.h	/^    list<_Tp, _Alloc> __carry;$/;"	l
__carry	stl/stl_slist.h	/^    slist __carry;$/;"	l
__char_traits_base	stl/char_traits.h	/^template <class _CharT, class _IntT> class __char_traits_base {$/;"	c	namespace:std
__chars_left	stl/ropeimpl.h	/^        size_t __chars_left = _M_buf_end - _M_buf_ptr;$/;"	l
__chars_left	stl/ropeimpl.h	/^        size_t __chars_left = _M_buf_ptr - _M_buf_start;$/;"	l
__check_equal	stl/concept_checks.h	/^template <class _Type> struct __check_equal { };$/;"	s
__chunk	stl/stl_alloc.h	/^    char* __chunk = _S_chunk_alloc(__n, __nobjs);$/;"	l
__chunk_insertion_sort	stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size)
__chunk_insertion_sort	stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size, _Compare __comp)
__clrstack	stl/ropeimpl.h	/^    _RopeRep* __clrstack[_RopeRep::_S_max_rope_depth];$/;"	l
__comp	stl/stl_tree.h	/^  bool __comp = true;$/;"	l
__conc	stl/ropeimpl.h	/^		_RopeConcatenation* __conc = (_RopeConcatenation*)__r;$/;"	l
__const_back_function_requirement_violation	stl/sequence_concepts.h	/^  __const_back_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
__const_begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_begin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_begin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_begin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_end_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_end_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_front_function_requirement_violation	stl/sequence_concepts.h	/^  __const_front_function_requirement_violation(const _XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(const _XX& __s)
__const_parameter_required_for_assignment_operator	stl/concept_checks.h	/^    _STL_ERROR::__const_parameter_required_for_assignment_operator(__a,__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a,__a)
__const_parameter_required_for_assignment_operator	stl/concept_checks.h	/^  __const_parameter_required_for_assignment_operator(_Type __a, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, const _Type& __b)
__const_parameter_required_for_copy_constructor	stl/concept_checks.h	/^    _STL_ERROR::__const_parameter_required_for_copy_constructor(__a,__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a,__a)
__const_parameter_required_for_copy_constructor	stl/concept_checks.h	/^  __const_parameter_required_for_copy_constructor(_Type \/* __a *\/, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Type , const _Type& __b)
__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_rbegin_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __const_rend_iterator_accessor_requirement_violation(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__copy	stl/stl_algobase.h	/^__copy(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _OutputIter __result, random_access_iterator_tag, _Distance*)
__copy	stl/stl_algobase.h	/^inline _OutputIter __copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, input_iterator_tag, _Distance*)
__copy	stl/stl_hashtable.h	/^        _Node* __copy = _M_new_node(__cur->_M_val);$/;"	l
__copy_aux	stl/stl_algobase.h	/^inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
__copy_aux2	stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __false_type)
__copy_aux2	stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __true_type)
__copy_aux2	stl/stl_algobase.h	/^inline _Tp* __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result,$/;"	f	namespace:std	signature:(_Tp* __first, _Tp* __last, _Tp* __result, __true_type)
__copy_aux2	stl/stl_algobase.h	/^inline _Tp* __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result,$/;"	f	namespace:std	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result, __true_type)
__copy_backward	stl/stl_algobase.h	/^inline _BidirectionalIter __copy_backward(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _BidirectionalIter __result, random_access_iterator_tag, _Distance*)
__copy_backward	stl/stl_algobase.h	/^inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first, $/;"	f	namespace:std	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result, bidirectional_iterator_tag, _Distance*)
__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch$/;"	s	namespace:std
__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>$/;"	s	namespace:std
__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s	namespace:std
__copy_constructor_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__copy_constructor_requirement_violation(__a);$/;"	p	class:_Assignable_concept_specification::_STL_ERROR	signature:(__a)
__copy_constructor_requirement_violation	stl/concept_checks.h	/^  __copy_constructor_requirement_violation(_Type __a) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a)
__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch {$/;"	s	namespace:std
__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch<_Tp*, _Tp*, __true_type>$/;"	s	namespace:std
__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s	namespace:std
__copy_n	stl/stl_algobase.h	/^__copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result)
__copy_n	stl/stl_algobase.h	/^__copy_n(_RAIter __first, _Size __count,$/;"	f	namespace:std	signature:(_RAIter __first, _Size __count, _OutputIter __result, random_access_iterator_tag)
__copy_n	stl/stl_algobase.h	/^pair<_InputIter, _OutputIter> __copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result, input_iterator_tag)
__copy_sz	stl/stl_alloc.h	/^    size_t __copy_sz;$/;"	l
__copy_trivial	stl/stl_algobase.h	/^__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	namespace:std	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
__counter	stl/stl_list.h	/^    list<_Tp, _Alloc> __counter[64];$/;"	l
__counter	stl/stl_slist.h	/^    slist __counter[64];$/;"	l
__csptr	stl/ropeimpl.h	/^    size_t __csptr = 0;$/;"	l
__cstr	stl/ropeimpl.h	/^    _CharT* __cstr = _M_c_string;$/;"	l
__cstr	stl/ropeimpl.h	/^    __GC_CONST _CharT* __cstr = __r->_M_c_string;$/;"	l
__cur	stl/stl_bvector.h	/^    iterator __cur = begin();$/;"	l
__cur	stl/stl_deque.h	/^  _Map_pointer __cur;$/;"	l
__cur	stl/stl_deque.h	/^  _Tp** __cur;$/;"	l
__cur	stl/stl_deque.h	/^  iterator __cur = begin();$/;"	l
__cur	stl/stl_hashtable.h	/^      const _Node* __cur = __ht._M_buckets[__i];$/;"	l
__cur	stl/stl_hashtable.h	/^    _Node* __cur = _M_buckets[__i];$/;"	l
__cur	stl/stl_hashtable.h	/^    _Node* __cur = _M_buckets[__n];$/;"	l
__cur	stl/stl_hashtable.h	/^    _Node* __cur = __first;$/;"	l
__cur	stl/stl_hashtable.h	/^  _Node* __cur = _M_buckets[__n];$/;"	l
__cur	stl/stl_list.h	/^  _List_node<_Tp>* __cur = (_List_node<_Tp>*) _M_node->_M_next;$/;"	l
__cur	stl/stl_slist.h	/^  _Node* __cur = (_Node*) this->_M_head._M_next;$/;"	l
__cur	stl/stl_slist.h	/^  _Node_base* __cur = &this->_M_head;$/;"	l
__cur	stl/stl_slist.h	/^  _Node_base* __cur = this->_M_head._M_next;$/;"	l
__cur	stl/stl_slist.h	/^  _Slist_node<_Tp>* __cur = (_Slist_node<_Tp>*) (__before_first->_M_next);$/;"	l
__cur	stl/stl_uninitialized.h	/^  _ForwardIter __cur = __first;$/;"	l
__cur	stl/stl_uninitialized.h	/^  _ForwardIter __cur = __result;$/;"	l
__cur	stl/stl_vector.h	/^  iterator __cur = begin();$/;"	l
__cur1	stl/stl_hashtable.h	/^    _Node* __cur1 = __ht1._M_buckets[__n];$/;"	l
__cur2	stl/stl_hashtable.h	/^    _Node* __cur2 = __ht2._M_buckets[__n];$/;"	l
__cur_node	stl/stl_deque.h	/^  _Map_pointer __cur_node;$/;"	l
__curr_depth	stl/ropeimpl.h	/^    int __curr_depth = -1;  \/* index into path    *\/$/;"	l
__curr_rope	stl/ropeimpl.h	/^    const _RopeRep* __curr_rope;$/;"	l
__curr_start_pos	stl/ropeimpl.h	/^    size_t __curr_start_pos = 0;$/;"	l
__current	stl/stl_algo.h	/^  _ForwardIter1 __current = __first1;$/;"	l
__current_index	stl/ropeimpl.h	/^    int __current_index = __x._M_leaf_index;$/;"	l
__current_node	stl/ropeimpl.h	/^    const _RopeRep* __current_node = __x._M_path_end[__current_index];$/;"	l
__current_obj	stl/stl_alloc.h	/^    _Obj* __current_obj;$/;"	l
__cut	stl/stl_algo.h	/^    _RandomAccessIter __cut =$/;"	l
__d	stl/ropeimpl.h	/^		    _RopeRep* __d = __clrstack[__csptr];$/;"	l
__d	stl/stl_algo.h	/^  _Distance __d = __gcd(__n, __k);$/;"	l
__default_alloc_template	stl/stl_alloc.h	/^class __default_alloc_template {$/;"	c	namespace:std
__default_constructor_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__default_constructor_requirement_violation(__a);$/;"	p	class:_DefaultConstructible_concept_specification::_STL_ERROR	signature:(__a)
__default_constructor_requirement_violation	stl/concept_checks.h	/^  __default_constructor_requirement_violation(_Type) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type)
__depth	stl/ropeimpl.h	/^    size_t __depth = __result->_M_depth;$/;"	l
__deque_buf_size	stl/stl_deque.h	/^inline size_t __deque_buf_size(size_t __size) {$/;"	f	namespace:std	signature:(size_t __size)
__dereference_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_and_assignment_requirement_violation(__i);$/;"	p	class:_Mutable_TrivialIterator_concept_specification::_STL_ERROR	signature:(__i)
__dereference_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  __dereference_operator_and_assignment_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__dereference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
__dereference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__dereference_operator_requirement_violation(__i);$/;"	p	class:_TrivialIterator_concept_specification::_STL_ERROR	signature:(__i)
__dereference_operator_requirement_violation	stl/concept_checks.h	/^  __dereference_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__destroy	stl/stl_construct.h	/^__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Tp*)
__destroy_aux	stl/stl_construct.h	/^__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
__destroy_aux	stl/stl_construct.h	/^inline void __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type) {}$/;"	f	namespace:std	signature:(_ForwardIterator, _ForwardIterator, __true_type)
__difference_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__difference_operator_requirement_violation(__i, __i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __i, _MutDist())
__difference_operator_requirement_violation	stl/concept_checks.h	/^  __difference_operator_requirement_violation(_Iterator __i, _Iterator __j,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Iterator __j, _Distance __n)
__difference_type_type_definition_requirement_violation	stl/concept_checks.h	/^struct __difference_type_type_definition_requirement_violation {$/;"	s
__difference_type_type_definition_requirement_violation::difference_type	stl/concept_checks.h	/^          difference_type;$/;"	t	struct:__difference_type_type_definition_requirement_violation	access:public
__dirns	stl/ropeimpl.h	/^    unsigned char __dirns = 0; \/\/ Bit vector marking right turns in the path$/;"	l
__dirns	stl/ropeimpl.h	/^    unsigned char __dirns = __x._M_path_directions;$/;"	l
__distance	stl/stl_iterator_base.h	/^__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
__distance	stl/stl_iterator_base.h	/^__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
__distance	stl/stl_iterator_base.h	/^inline void __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n, input_iterator_tag)
__distance	stl/stl_iterator_base.h	/^inline void __distance(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance& __n, random_access_iterator_tag)
__distance_type	stl/stl_iterator_base.h	/^__distance_type(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
__dummy_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<value_type>::_Type* __dummy_ptr = 0;$/;"	l
__element_access_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__element_access_operator_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __dummy_ptr, _MutDist())
__element_access_operator_requirement_violation	stl/concept_checks.h	/^  __element_access_operator_requirement_violation(_Exp __x, _Type*,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type*, _Distance __n)
__element_access_operator_requirement_violation	stl/container_concepts.h	/^  _STL_ERROR::__element_access_operator_requirement_violation(__c,$/;"	p	class:_RandomAccessContainer_concept_specification::_STL_ERROR	signature:(__c, _TypePtr(), Dist())
__element_assignment_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__element_assignment_operator_requirement_violation(__i,$/;"	p	class:_Mutable_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, __tmp_ptr, _Dist())
__element_assignment_operator_requirement_violation	stl/concept_checks.h	/^  __element_assignment_operator_requirement_violation(_Exp __x,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Exp __x, _Type* __t, _Distance __n)
__elems_after	stl/stl_deque.h	/^    const difference_type __elems_after = $/;"	l
__elems_after	stl/stl_vector.h	/^      const size_type __elems_after = _M_finish - __position;$/;"	l
__elems_before	stl/stl_deque.h	/^    difference_type __elems_before = __first - _M_start;$/;"	l
__elems_before	stl/stl_deque.h	/^  const difference_type __elems_before = __pos - _M_start;$/;"	l
__elemsafter	stl/stl_deque.h	/^    const difference_type __elemsafter = $/;"	l
__elemsafter	stl/stl_deque.h	/^    const difference_type __elemsafter = __length - __elemsbefore;$/;"	l
__elemsbefore	stl/stl_deque.h	/^  const difference_type __elemsbefore = __pos - _M_start;$/;"	l
__empty_function_must_be_const	stl/container_concepts.h	/^  __empty_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__empty_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__empty_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__empty_function_requirement_violation	stl/container_concepts.h	/^  __empty_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__end1	stl/stl_list.h	/^  const_iterator __end1 = __x.end();$/;"	l
__end1	stl/stl_slist.h	/^  const_iterator __end1 = _SL1.end();$/;"	l
__end2	stl/stl_list.h	/^  const_iterator __end2 = __y.end();$/;"	l
__end2	stl/stl_slist.h	/^  const_iterator __end2 = _SL2.end();$/;"	l
__end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__end_iterator_accessor_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__end_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __end_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__equal_range	stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__equal_range	stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__equality_comparable_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__equality_comparable_requirement_violation(__a, __a);$/;"	p	class:_EqualityComparable_concept_specification::_STL_ERROR	signature:(__a, __a)
__equality_comparable_requirement_violation	stl/concept_checks.h	/^  __equality_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
__erase_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__erase_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__erase_function_requirement_violation	stl/sequence_concepts.h	/^  __erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__erased	stl/stl_hashtable.h	/^  size_type __erased = 0;$/;"	l
__exponent	stl/ropeimpl.h	/^    size_t __exponent;$/;"	l
__exponentiate_threshold	stl/ropeimpl.h	/^    const size_t __exponentiate_threshold = 32;$/;"	l
__f	stl/ropeimpl.h	/^		_RopeFunction* __f = (_RopeFunction*)__base;$/;"	l
__f	stl/ropeimpl.h	/^		_RopeFunction* __f = (_RopeFunction*)__r;$/;"	l
__f	stl/ropeimpl.h	/^	        _Rope_RopeFunction<_CharT,_Alloc>* __f$/;"	l
__f	stl/ropeimpl.h	/^    char __f = __o.fill();$/;"	l
__f_bucket	stl/stl_hashtable.h	/^  size_type __f_bucket = __first._M_cur ? $/;"	l
__false_type	stl/type_traits.h	/^struct __false_type {$/;"	s
__fill	stl/stl_list.h	/^    int __fill = 0;$/;"	l
__fill	stl/stl_slist.h	/^    int __fill = 0;$/;"	l
__fill_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__fill_constructor_requirement_violation	stl/sequence_concepts.h	/^  __fill_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__fill_default_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_default_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__fill_default_constructor_requirement_violation	stl/sequence_concepts.h	/^  __fill_default_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__fill_insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__fill_insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__fill_insert_function_requirement_violation	stl/sequence_concepts.h	/^  __fill_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__final_insertion_sort	stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__final_insertion_sort	stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__find_end	stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag)
__find_end	stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
__find_end	stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
__find_end	stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
__finish_n	stl/stl_deque.h	/^        iterator __finish_n = _M_finish - difference_type(__n);$/;"	l
__first	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	l
__first	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	l
__first	stl/stl_hashtable.h	/^          _Node* __first = _M_buckets[__bucket];$/;"	l
__first	stl/stl_hashtable.h	/^    _Node* __first;$/;"	l
__first	stl/stl_hashtable.h	/^    const _Node* __first;$/;"	l
__first	stl/stl_hashtable.h	/^  _Node* __first = _M_buckets[__n];$/;"	l
__first	stl/stl_hashtable.h	/^  const unsigned long* __first = __stl_prime_list;$/;"	l
__first	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	l
__first	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	l
__first	stl/stl_list.h	/^  iterator __first = begin();$/;"	l
__first	stl/stl_slist.h	/^                          __first, __last);$/;"	l
__first	stl/stl_slist.h	/^    _Slist_node_base* __first = __before_first->_M_next;$/;"	l
__first	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	l
__first1	stl/stl_list.h	/^    iterator __first1 = begin();$/;"	l
__first1	stl/stl_list.h	/^  iterator __first1 = begin();$/;"	l
__first2	stl/stl_list.h	/^    const_iterator __first2 = __x.begin();$/;"	l
__first2	stl/stl_list.h	/^  iterator __first2 = __x.begin();$/;"	l
__first_cut	stl/stl_algo.h	/^    _BidirectionalIter __first_cut = __first;$/;"	l
__first_cut	stl/stl_algo.h	/^  _BidirectionalIter __first_cut = __first;$/;"	l
__fn	stl/ropeimpl.h	/^		char_producer<_CharT>* __fn =$/;"	l
__fn	stl/stl_rope.h	/^                char_producer<_CharT>* __fn =$/;"	l
__forest	stl/ropeimpl.h	/^    _RopeRep* __forest[_RopeRep::_S_max_rope_depth + 1];$/;"	l
__front1	stl/stl_deque.h	/^    iterator __front1 = _M_start;$/;"	l
__front2	stl/stl_deque.h	/^    iterator __front2 = __front1;$/;"	l
__front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__front_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__front_function_requirement_violation	stl/sequence_concepts.h	/^  __front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__gcd	stl/stl_algo.h	/^_EuclideanRingElement __gcd(_EuclideanRingElement __m,$/;"	f	namespace:std	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
__generator_requirement_violation	stl/concept_checks.h	/^  static _Ret __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
__generator_requirement_violation	stl/concept_checks.h	/^  static void __generator_requirement_violation(_Func& __f) {$/;"	f	struct:_STL_GENERATOR_ERROR	access:public	signature:(_Func& __f)
__get_c_string	stl/stl_string_fwd.h	/^static const char* __get_c_string(const string&);$/;"	p	namespace:std	signature:(const string&)
__get_temporary_buffer	stl/stl_tempbuf.h	/^__get_temporary_buffer(ptrdiff_t __len, _Tp*)$/;"	f	namespace:std	signature:(ptrdiff_t __len, _Tp*)
__h	stl/stl_hash_fun.h	/^  unsigned long __h = 0; $/;"	l
__half	stl/stl_algo.h	/^  _Distance __half;$/;"	l
__high_max	stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:std::_STL_mutex_spin::__anon23
__ht	stl/stl_hashtable.h	/^    _M_copy_from(__ht);$/;"	v
__i	stl/char_traits.h	/^    size_t __i;$/;"	l
__i	stl/ropeimpl.h	/^	    int __i;$/;"	l
__i	stl/ropeimpl.h	/^	    size_t __i;$/;"	l
__i	stl/ropeimpl.h	/^	int __i = -1;$/;"	l
__i	stl/ropeimpl.h	/^    int __i;  				\/\/ forest[0..__i-1] is empty$/;"	l
__i	stl/ropeimpl.h	/^    int __i;$/;"	l
__i	stl/ropeimpl.h	/^    size_t __i;$/;"	l
__i	stl/sequence_concepts.h	/^    typename _XX::iterator __i = typename _XX::iterator();$/;"	l
__i	stl/stl_algo.h	/^      _ForwardIter __i = __first;$/;"	l
__i	stl/stl_algo.h	/^  _ForwardIter __i = __first;$/;"	l
__i	stl/stl_algo.h	/^  _ForwardIter __i = lower_bound(__first, __last, __val);$/;"	l
__i	stl/stl_algo.h	/^  _ForwardIter __i = lower_bound(__first, __last, __val, __comp);$/;"	l
__i	stl/stl_alloc.h	/^            size_t __i;$/;"	l
__i	stl/stl_alloc.h	/^    int __i;$/;"	l
__i	stl/stl_bvector.h	/^        iterator __i = copy(begin(), __position, iterator(__q, 0));$/;"	l
__i	stl/stl_bvector.h	/^      iterator __i = copy(begin(), __position, iterator(__q, 0));$/;"	l
__i	stl/stl_deque.h	/^  size_type __i;$/;"	l
__i	stl/stl_function.h	/^    size_t __i;$/;"	l
__i	stl/stl_list.h	/^      int __i = 0;$/;"	l
__i	stl/stl_list.h	/^  iterator __i = begin();$/;"	l
__i	stl/stl_map.h	/^    iterator __i = lower_bound(__k);$/;"	l
__i	stl/stl_rope.h	/^                size_t __i = _M_buf_count;$/;"	l
__i	stl/stl_rope.h	/^            iterator __i(this, __p);$/;"	p	signature:(this, __p)
__i	stl/stl_slist.h	/^      int __i = 0;$/;"	l
__i	stl/stl_threads.h	/^    unsigned __i;$/;"	l
__i	stl/stl_vector.h	/^      iterator __i = copy(__x.begin(), __x.end(), begin());$/;"	l
__i	stl/stl_vector.h	/^    iterator __i = copy(__last, _M_finish, __first);$/;"	l
__i1	stl/stl_list.h	/^  const_iterator __i1 = __x.begin();$/;"	l
__i1	stl/stl_slist.h	/^  const_iterator __i1 = _SL1.begin();$/;"	l
__i2	stl/stl_list.h	/^  const_iterator __i2 = __y.begin();$/;"	l
__i2	stl/stl_slist.h	/^  const_iterator __i2 = _SL2.begin();$/;"	l
__ii	stl/stl_algo.h	/^    _BidirectionalIter __ii = __i;$/;"	l
__ii	stl/stl_function.h	/^        size_t __ii = (21 * (__i + 1) % 55) - 1;$/;"	l
__index	stl/stl_deque.h	/^    difference_type __index = __pos - _M_start;$/;"	l
__index	stl/stl_deque.h	/^  difference_type __index = __pos - _M_start;$/;"	l
__inplace_merge_aux	stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*)
__inplace_merge_aux	stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*, _Compare __comp)
__inplace_stable_partition	stl/stl_algo.h	/^_ForwardIter __inplace_stable_partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len)
__inplace_stable_sort	stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__inplace_stable_sort	stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__insert_element_function_requirement_violation	stl/sequence_concepts.h	/^  __insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__insert_function_requirement_violation	stl/sequence_concepts.h	/^  __insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__insertee	stl/ropeimpl.h	/^    _RopeRep* __insertee;   		\/\/ included in refcount$/;"	l
__insertion_sort	stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__insertion_sort	stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__introsort_loop	stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit)
__introsort_loop	stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit, _Compare __comp)
__is_heap	stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _Distance __n)$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _Distance __n)
__is_heap	stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _StrictWeakOrdering __comp, _Distance __n)
__is_simple	stl/ropeimpl.h	/^    bool __is_simple = _Rope_is_simple((_CharT*)0);$/;"	l
__iter	stl/stl_iterator.h	/^  typedef typename _Container::iterator __iter;$/;"	t
__iter_swap	stl/stl_algobase.h	/^inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*) {$/;"	f	namespace:std	signature:(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*)
__iterator_addition_assignment_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_addition_assignment_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
__iterator_addition_assignment_requirement_violation	stl/concept_checks.h	/^  __iterator_addition_assignment_requirement_violation(_Iterator __i, $/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_addition_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_addition_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
__iterator_addition_requirement_violation	stl/concept_checks.h	/^  __iterator_addition_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_category	stl/stl_iterator_base.h	/^__iterator_category(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
__iterator_category_type_definition_requirement_violation	stl/concept_checks.h	/^struct __iterator_category_type_definition_requirement_violation {$/;"	s
__iterator_category_type_definition_requirement_violation::iterator_category	stl/concept_checks.h	/^          iterator_category;$/;"	t	struct:__iterator_category_type_definition_requirement_violation	access:public
__iterator_subtraction_assignment_requirement_violation	stl/concept_checks.h	/^    __iterator_subtraction_assignment_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
__iterator_subtraction_assignment_requirement_violation	stl/concept_checks.h	/^  __iterator_subtraction_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__iterator_subtraction_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__iterator_subtraction_requirement_violation(__i,$/;"	p	class:_RandomAccessIterator_concept_specification::_STL_ERROR	signature:(__i, _MutDist())
__iterator_subtraction_requirement_violation	stl/concept_checks.h	/^  __iterator_subtraction_requirement_violation(_Iterator __i, _Distance __n) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Distance __n)
__j	stl/ropeimpl.h	/^	int __j = __curr_depth + 1 - _S_path_cache_len;$/;"	l
__j	stl/sequence_concepts.h	/^    typename _XX::iterator __j = typename _XX::iterator();$/;"	l
__j	stl/stl_algo.h	/^      _BidirectionalIter __j = __last;$/;"	l
__j	stl/stl_list.h	/^    iterator __j = __i;$/;"	l
__j	stl/stl_rope.h	/^                size_t __j = 0;$/;"	l
__j	stl/stl_tree.h	/^  const_iterator __j = const_iterator(__y);   $/;"	l
__j	stl/stl_tree.h	/^  iterator __j = iterator(__y);   $/;"	l
__junk	stl/stl_threads.h	/^    volatile unsigned __junk = 17;      \/\/ Value doesn't matter.$/;"	l
__k	stl/stl_algo.h	/^  _Distance __k = __middle - __first;$/;"	l
__k	stl/stl_algo.h	/^  _Size __k;$/;"	l
__k	stl/stl_function.h	/^    unsigned int __k = 1;$/;"	l
__kind	stl/ropeimpl.h	/^	char* __kind;$/;"	l
__l	stl/ropeimpl.h	/^		_RopeLeaf* __l = (_RopeLeaf*)__base;$/;"	l
__l	stl/ropeimpl.h	/^		_RopeLeaf* __l = (_RopeLeaf*)__r;$/;"	l
__l	stl/ropeimpl.h	/^	        _Rope_RopeLeaf<_CharT,_Alloc>* __l$/;"	l
__l	stl/ropeimpl.h	/^	_RopeLeaf* __l = (_RopeLeaf*) __left;$/;"	l
__l	stl/stl_algo.h	/^  _Distance __l = __n - __k;$/;"	l
__l_bucket	stl/stl_hashtable.h	/^  size_type __l_bucket = __last._M_cur ? $/;"	l
__last	stl/stl_algobase.h	/^  _RAIter __last = __first + __count;$/;"	l
__last	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	l
__last	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	l
__last	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	l
__last	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	l
__last	stl/stl_hashtable.h	/^  const unsigned long* __last = __stl_prime_list + (int)__stl_num_primes;$/;"	l
__last	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	l
__last	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	l
__last	stl/stl_list.h	/^  iterator __last = end();$/;"	l
__last	stl/stl_rope.h	/^            rope<_CharT,_Alloc> __last(__n, __c);$/;"	p	signature:(__n, __c)
__last	stl/stl_slist.h	/^                          __first, __last);$/;"	l
__last	stl/stl_threads.h	/^        _STL_mutex_spin<0>::__last = __i;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
__last	stl/stl_threads.h	/^  static unsigned __last;$/;"	m	struct:std::_STL_mutex_spin	access:public
__last	stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__last = 0;$/;"	m	class:std::_STL_mutex_spin
__last	stl/stl_uninitialized.h	/^  _RandomAccessIter __last = __first + __count;$/;"	l
__last	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	l
__last1	stl/stl_list.h	/^    iterator __last1 = end();$/;"	l
__last1	stl/stl_list.h	/^  iterator __last1 = end();$/;"	l
__last2	stl/stl_list.h	/^    const_iterator __last2 = __x.end();$/;"	l
__last2	stl/stl_list.h	/^  iterator __last2 = __x.end();$/;"	l
__lazy_threshold	stl/ropeimpl.h	/^    const size_t __lazy_threshold = 128;$/;"	l
__leaf	stl/ropeimpl.h	/^    const _RopeRep* __leaf = __x._M_path_end[__x._M_leaf_index];$/;"	l
__leaf	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) _M_o << __leaf[__i];$/;"	l
__leaf_end	stl/ropeimpl.h	/^		size_t __leaf_end = __leaf_pos + __leaf->_M_size;$/;"	l
__leaf_pos	stl/ropeimpl.h	/^    size_t __leaf_pos = __x._M_leaf_pos;$/;"	l
__left	stl/ropeimpl.h	/^		_RopeRep* __left =  __conc->_M_left;$/;"	l
__left	stl/ropeimpl.h	/^		_RopeRep* __left = __c->_M_left;$/;"	l
__left	stl/ropeimpl.h	/^	  _RopeRep* __left = ((_RopeConcatenation*)__r)->_M_left;$/;"	l
__left	stl/ropeimpl.h	/^	_RopeRep* __left = __c->_M_left;$/;"	l
__left	stl/ropeimpl.h	/^    bool __left = bool(__o.flags() & ios::left);$/;"	l
__left	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
__left	stl/stl_rope.h	/^            _RopeRep* __left =$/;"	l
__left_end	stl/ropeimpl.h	/^		    size_t __left_end = min(__left_len, __end);$/;"	l
__left_len	stl/ropeimpl.h	/^		size_t __left_len = __left->_M_size;$/;"	l
__left_len	stl/ropeimpl.h	/^    size_t __left_len;$/;"	l
__leftleft	stl/ropeimpl.h	/^	    _RopeRep* __leftleft = ((_RopeConcatenation*)__left)->_M_left;$/;"	l
__leftright	stl/ropeimpl.h	/^	  _RopeLeaf* __leftright =$/;"	l
__len	stl/ropeimpl.h	/^		size_t __len = _S_iterator_buf_len;$/;"	l
__len	stl/ropeimpl.h	/^		size_t __len = __end - __begin;$/;"	l
__len	stl/ropeimpl.h	/^    size_t __len = __current_node->_M_size;$/;"	l
__len	stl/stl_algo.h	/^  _Distance __len = (__last - __first + 1) \/ 2;$/;"	l
__len	stl/stl_algo.h	/^  _Distance __len = 0;$/;"	l
__len	stl/stl_algo.h	/^  _Distance __len = __last - __first;$/;"	l
__len	stl/stl_bvector.h	/^        size_type __len = size() + max(size(), __n);$/;"	l
__len	stl/stl_bvector.h	/^      size_type __len = size() + max(size(), __n);$/;"	l
__len	stl/stl_bvector.h	/^      size_type __len = size() ? 2 * size() : __WORD_BIT;$/;"	l
__len	stl/stl_bvector.h	/^    size_type __len = 0;$/;"	l
__len	stl/stl_deque.h	/^    const size_type __len = size();$/;"	l
__len	stl/stl_deque.h	/^    size_type __len = 0;$/;"	l
__len	stl/stl_list.h	/^  size_type __len = 0;$/;"	l
__len	stl/stl_rope.h	/^            size_t __len = (__pos + __n > __size? __size - __pos : __n);$/;"	l
__len	stl/stl_rope.h	/^            size_t __len = _S_char_ptr_len(__c_string);$/;"	l
__len	stl/stl_tree.h	/^  int __len = __black_count(_M_leftmost(), _M_root());$/;"	l
__len	stl/stl_vector.h	/^      const size_type __len = __old_size + max(__old_size, __n);$/;"	l
__len	stl/stl_vector.h	/^    const size_type __len = __old_size != 0 ? 2 * __old_size : 1;$/;"	l
__len	stl/stl_vector.h	/^  size_type __len = 0;$/;"	l
__len1	stl/stl_algo.h	/^  _Distance __len1 = 0;$/;"	l
__len1	stl/stl_algobase.h	/^  const ptrdiff_t __len1 = __last1 - __first1;$/;"	l
__len1	stl/stl_algobase.h	/^  const size_t __len1 = __last1 - __first1;$/;"	l
__len11	stl/stl_algo.h	/^    _Distance __len11 = 0;$/;"	l
__len11	stl/stl_algo.h	/^  _Distance __len11 = 0;$/;"	l
__len2	stl/stl_algo.h	/^  _Distance __len2 = 0;$/;"	l
__len2	stl/stl_algobase.h	/^  const ptrdiff_t __len2 = __last2 - __first2;$/;"	l
__len2	stl/stl_algobase.h	/^  const size_t __len2 = __last2 - __first2;$/;"	l
__len22	stl/stl_algo.h	/^    _Distance __len22 = 0;$/;"	l
__len22	stl/stl_algo.h	/^  _Distance __len22 = 0;$/;"	l
__lend	stl/ropeimpl.h	/^	const_iterator __lend(__left, __left_len);$/;"	p	signature:(__left, __left_len)
__length	stl/stl_deque.h	/^  size_type __length = size();$/;"	l
__length	stl/stl_deque.h	/^  size_type __length = this->size();$/;"	l
__less_than_comparable_requirement_violation	stl/concept_checks.h	/^    _STL_ERROR::__less_than_comparable_requirement_violation(__a, __a);$/;"	p	class:_LessThanComparable_concept_specification::_STL_ERROR	signature:(__a, __a)
__less_than_comparable_requirement_violation	stl/concept_checks.h	/^  __less_than_comparable_requirement_violation(_Type __a, _Type __b) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Type __a, _Type __b)
__lexicographical_compare_3way	stl/stl_algobase.h	/^__lexicographical_compare_3way(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
__lexicographical_compare_3way	stl/stl_algobase.h	/^__lexicographical_compare_3way(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
__lexicographical_compare_3way	stl/stl_algobase.h	/^int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
__lg	stl/stl_algo.h	/^inline _Size __lg(_Size __n) {$/;"	f	namespace:std	signature:(_Size __n)
__linear_insert	stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
__linear_insert	stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
__lock	stl/stl_threads.h	/^    volatile unsigned long* __lock = &_M_lock;$/;"	l
__lock	stl/stl_threads.h	/^    volatile unsigned long* __lock = &this->_M_lock;$/;"	l
__lock_instance	stl/stl_alloc.h	/^      _Lock __lock_instance;$/;"	l
__log_nsec	stl/stl_threads.h	/^      int __log_nsec = __i + 6;$/;"	l
__low_max	stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:std::_STL_mutex_spin::__anon23
__lower_bound	stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__lower_bound	stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__lstart	stl/ropeimpl.h	/^	const_iterator __lstart(__left, 0);$/;"	p	signature:(__left, 0)
__m	stl/stl_algo.h	/^  _Distance __m = 0;$/;"	l
__m	stl/stl_algo.h	/^  _Distance __m = min(__n, __remaining);$/;"	l
__make_heap	stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Tp*, _Distance*)
__make_heap	stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Distance*)
__malloc_alloc_oom_handler	stl/stl_alloc.h	/^    void (* __malloc_alloc_oom_handler)() = 0;$/;"	m	namespace:std
__malloc_alloc_oom_handler	stl/stl_alloc.h	/^  static void (* __malloc_alloc_oom_handler)();$/;"	m	class:std::__malloc_alloc_template	access:private
__malloc_alloc_oom_handler	stl/stl_alloc.h	/^void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;$/;"	m	namespace:std
__malloc_alloc_template	stl/stl_alloc.h	/^class __malloc_alloc_template {$/;"	c	namespace:std
__max	stl/stl_threads.h	/^        _STL_mutex_spin<0>::__max = _STL_mutex_spin<0>::__high_max;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
__max	stl/stl_threads.h	/^    _STL_mutex_spin<0>::__max = _STL_mutex_spin<0>::__low_max;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
__max	stl/stl_threads.h	/^  static unsigned __max;$/;"	m	struct:std::_STL_mutex_spin	access:public
__max	stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__max = _STL_mutex_spin<__inst>::__low_max;$/;"	m	class:std::_STL_mutex_spin
__max_len	stl/ropeimpl.h	/^	    const int __max_len = 40;$/;"	l
__max_size_function_must_be_const	stl/container_concepts.h	/^  __max_size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__max_size_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__max_size_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__max_size_function_requirement_violation	stl/container_concepts.h	/^  __max_size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__median	stl/stl_algo.h	/^__median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
__median	stl/stl_algo.h	/^inline const _Tp& __median(const _Tp& __a, const _Tp& __b, const _Tp& __c) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
__merge_adaptive	stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first, $/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__merge_adaptive	stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
__merge_backward	stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result)
__merge_backward	stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result, _Compare __comp)
__merge_sort_loop	stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size)
__merge_sort_loop	stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size, _Compare __comp)
__merge_sort_with_buffer	stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*)
__merge_sort_with_buffer	stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*, _Compare __comp)
__merge_without_buffer	stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2)
__merge_without_buffer	stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Compare __comp)
__mid	stl/stl_bvector.h	/^      _ForwardIterator __mid = __first;$/;"	l
__mid	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	l
__mid	stl/stl_deque.h	/^        _ForwardIterator __mid = __first;$/;"	l
__mid	stl/stl_deque.h	/^        const value_type* __mid = $/;"	l
__mid	stl/stl_deque.h	/^        const value_type* __mid = __first + __elemsafter;$/;"	l
__mid	stl/stl_deque.h	/^        const_iterator __mid = __first + (__n - __elemsbefore);$/;"	l
__mid	stl/stl_deque.h	/^        const_iterator __mid = __first + __elemsafter;$/;"	l
__mid	stl/stl_deque.h	/^        const_iterator __mid = __x.begin() + difference_type(__len);$/;"	l
__mid	stl/stl_deque.h	/^      _ForwardIterator __mid = __first;$/;"	l
__mid	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	l
__mid	stl/stl_uninitialized.h	/^  _ForwardIter __mid = uninitialized_copy(__first1, __last1, __result);$/;"	l
__mid	stl/stl_vector.h	/^        _ForwardIterator __mid = __first;$/;"	l
__mid	stl/stl_vector.h	/^    _ForwardIter __mid = __first;$/;"	l
__mid2	stl/stl_uninitialized.h	/^  _ForwardIter __mid2 = uninitialized_copy(__first1, __last1, __first2);$/;"	l
__middle	stl/stl_algo.h	/^    _ForwardIter __middle = __first;$/;"	l
__middle	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
__middle	stl/stl_algo.h	/^  _ForwardIter __middle;$/;"	l
__middle	stl/stl_algo.h	/^  _RandomAccessIter __middle = __first + (__last - __first) \/ 2;$/;"	l
__middle	stl/stl_algo.h	/^  _RandomAccessIter __middle = __first + __len;$/;"	l
__mutable_reference_at	stl/stl_rope.h	/^inline crope::reference __mutable_reference_at(crope& __c, size_t __i)$/;"	f	namespace:std	signature:(crope& __c, size_t __i)
__mutable_reference_at	stl/stl_rope.h	/^inline wrope::reference __mutable_reference_at(wrope& __c, size_t __i)$/;"	f	namespace:std	signature:(wrope& __c, size_t __i)
__my_free_list	stl/stl_alloc.h	/^            _Obj* __STL_VOLATILE* __my_free_list =$/;"	l
__my_free_list	stl/stl_alloc.h	/^            _Obj* __STL_VOLATILE* __my_free_list;$/;"	l
__my_free_list	stl/stl_alloc.h	/^      _Obj* __STL_VOLATILE*  __my_free_list$/;"	l
__my_free_list	stl/stl_alloc.h	/^      _Obj* __STL_VOLATILE* __my_free_list$/;"	l
__my_free_list	stl/stl_alloc.h	/^    _Obj* __STL_VOLATILE* __my_free_list;$/;"	l
__my_last_spins	stl/stl_threads.h	/^    unsigned __my_last_spins = _STL_mutex_spin<0>::__last;$/;"	l
__my_spin_max	stl/stl_threads.h	/^    unsigned __my_spin_max = _STL_mutex_spin<0>::__max;$/;"	l
__n	stl/sequence_concepts.h	/^    typename _XX::difference_type __n = typename _XX::difference_type();$/;"	l
__n	stl/stl_algo.h	/^      _Integer __n = __count - 1;$/;"	l
__n	stl/stl_algo.h	/^  _Distance __n = __last   - __first;$/;"	l
__n	stl/stl_algo.h	/^  typename iterator_traits<_InputIter>::difference_type __n = 0;$/;"	l
__n	stl/stl_bvector.h	/^      size_type __n = 0;$/;"	l
__n	stl/stl_bvector.h	/^    difference_type __n = __i + _M_offset;$/;"	l
__n	stl/stl_bvector.h	/^    difference_type __n = __position - begin();$/;"	l
__n	stl/stl_bvector.h	/^    size_type __n = 0;$/;"	l
__n	stl/stl_deque.h	/^    difference_type __n = __last - __first;$/;"	l
__n	stl/stl_deque.h	/^  size_type __n = 0;$/;"	l
__n	stl/stl_deque.h	/^  size_type __n = __last - __first;$/;"	l
__n	stl/stl_hashtable.h	/^    _M_initialize_buckets(__n);$/;"	v
__n	stl/stl_hashtable.h	/^    _Node* __n = _M_get_node();$/;"	l
__n	stl/stl_hashtable.h	/^    const size_type __n = _M_bkt_num(__p->_M_val);$/;"	l
__n	stl/stl_hashtable.h	/^    const size_type __n = _M_bkt_num_key(__key);$/;"	l
__n	stl/stl_hashtable.h	/^    const size_type __n = _M_next_size(__num_elements_hint);$/;"	l
__n	stl/stl_hashtable.h	/^    size_type __n = 0;$/;"	l
__n	stl/stl_hashtable.h	/^    size_type __n = _M_bkt_num_key(__key);$/;"	l
__n	stl/stl_hashtable.h	/^    size_type __n = __l - __f;$/;"	l
__n	stl/stl_hashtable.h	/^  const size_type __n = _M_bkt_num(__obj);$/;"	l
__n	stl/stl_hashtable.h	/^  const size_type __n = _M_bkt_num_key(__key);$/;"	l
__n	stl/stl_hashtable.h	/^  size_type __n = _M_bkt_num(__obj);$/;"	l
__n	stl/stl_iterator_base.h	/^  typename iterator_traits<_InputIterator>::difference_type __n = 0;$/;"	l
__n	stl/stl_list.h	/^    _Node* __n = (_Node*) __position._M_node;$/;"	l
__n	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	l
__n	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	l
__n	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	l
__n	stl/stl_slist.h	/^                         __n, __x);$/;"	l
__n	stl/stl_tree.h	/^  size_type __n = 0;$/;"	l
__n	stl/stl_vector.h	/^    size_type __n = 0;$/;"	l
__n	stl/stl_vector.h	/^    size_type __n = __position - begin();$/;"	l
__n1	stl/stl_slist.h	/^    _Node* __n1 = (_Node*) this->_M_head._M_next;$/;"	l
__n1	stl/stl_slist.h	/^  _Node_base* __n1 = &this->_M_head;$/;"	l
__n2	stl/stl_slist.h	/^    const _Node* __n2 = (const _Node*) __x._M_head._M_next;$/;"	l
__n_buckets	stl/stl_hashtable.h	/^    const size_type __n_buckets = _M_next_size(__n);$/;"	l
__new_bucket	stl/stl_hashtable.h	/^            size_type __new_bucket = _M_bkt_num(__first->_M_val, __n);$/;"	l
__new_data	stl/ropeimpl.h	/^    _CharT* __new_data = (_CharT*)$/;"	l
__new_finish	stl/stl_deque.h	/^      iterator __new_finish = _M_finish - __n;$/;"	l
__new_finish	stl/stl_deque.h	/^    iterator __new_finish = _M_reserve_elements_at_back(__n);$/;"	l
__new_finish	stl/stl_vector.h	/^      iterator __new_finish = __new_start;$/;"	l
__new_finish	stl/stl_vector.h	/^    iterator __new_finish = __new_start;$/;"	l
__new_finish	stl/stl_vector.h	/^    iterator __new_finish = copy(__first, __last, _M_start);$/;"	l
__new_map	stl/stl_deque.h	/^    _Map_pointer __new_map = _M_allocate_map(__new_map_size);$/;"	l
__new_map_size	stl/stl_deque.h	/^    size_type __new_map_size = $/;"	l
__new_middle	stl/stl_algo.h	/^    _BidirectionalIter __new_middle =$/;"	l
__new_middle	stl/stl_algo.h	/^  _BidirectionalIter __new_middle$/;"	l
__new_middle	stl/stl_algo.h	/^  _ForwardIter __new_middle = __first;$/;"	l
__new_nodes	stl/stl_deque.h	/^  size_type __new_nodes$/;"	l
__new_nstart	stl/stl_deque.h	/^  _Map_pointer __new_nstart;$/;"	l
__new_num_nodes	stl/stl_deque.h	/^  size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;$/;"	l
__new_result	stl/stl_algo.h	/^      _ForwardIter1 __new_result$/;"	l
__new_right	stl/ropeimpl.h	/^	  _RopeRep* __new_right = $/;"	l
__new_start	stl/stl_deque.h	/^      iterator __new_start = _M_start + __n;$/;"	l
__new_start	stl/stl_deque.h	/^    iterator __new_start = _M_reserve_elements_at_front(__n);$/;"	l
__new_start	stl/stl_vector.h	/^      iterator __new_start = _M_allocate(__len);$/;"	l
__new_start	stl/stl_vector.h	/^    iterator __new_start = _M_allocate(__len);$/;"	l
__next	stl/stl_algo.h	/^  _RandomAccessIter __next = __last;$/;"	l
__next	stl/stl_deque.h	/^    iterator __next = __pos;$/;"	l
__next	stl/stl_hashtable.h	/^      _Node* __next = __cur->_M_next;$/;"	l
__next	stl/stl_hashtable.h	/^    _Node* __next = __cur->_M_next;$/;"	l
__next	stl/stl_hashtable.h	/^    _Node* __next;$/;"	l
__next	stl/stl_list.h	/^      iterator __next = __first2;$/;"	l
__next	stl/stl_list.h	/^    iterator __next = __first;$/;"	l
__next	stl/stl_rope.h	/^        __GC_CONST _CharT* __next;$/;"	l
__next	stl/stl_slist.h	/^    _Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);$/;"	l
__next	stl/stl_slist.h	/^    _Slist_node_base* __next = __node->_M_next;$/;"	l
__next_next	stl/stl_slist.h	/^    _Slist_node_base* __next_next = __next->_M_next;$/;"	l
__next_node	stl/stl_list.h	/^    _List_node_base* __next_node = __position._M_node->_M_next;$/;"	l
__next_obj	stl/stl_alloc.h	/^    _Obj* __next_obj;$/;"	l
__nfinish	stl/stl_deque.h	/^  _Tp** __nfinish = __nstart + __num_nodes;$/;"	l
__nobjs	stl/stl_alloc.h	/^    int __nobjs = 20;$/;"	l
__node	stl/stl_slist.h	/^    _Node* __node = (_Node*) this->_M_head._M_next;$/;"	l
__node	stl/stl_slist.h	/^    _Node* __node = this->_M_get_node();$/;"	l
__node	stl/stl_slist.h	/^  _Node* __node = (_Node*) this->_M_head._M_next;$/;"	l
__node_offset	stl/stl_deque.h	/^      difference_type __node_offset =$/;"	l
__node_start_pos	stl/ropeimpl.h	/^    size_t __node_start_pos = __x._M_leaf_pos;$/;"	l
__nright	stl/ropeimpl.h	/^	  _RopeRep* __nright = $/;"	l
__nright	stl/ropeimpl.h	/^    _RopeRep* __nright =$/;"	l
__nstart	stl/stl_deque.h	/^  _Tp** __nstart = _M_map + (_M_map_size - __num_nodes) \/ 2;$/;"	l
__nth_element	stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*)
__nth_element	stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*, _Compare __comp)
__nullchar	stl/char_traits.h	/^    const _CharT __nullchar = _CharT();$/;"	l
__num_nodes	stl/stl_deque.h	/^  size_t __num_nodes = $/;"	l
__offset	stl/stl_deque.h	/^    difference_type __offset = __n + (_M_cur - _M_first);$/;"	l
__old	stl/ropeimpl.h	/^		_RopeSubstring* __old = (_RopeSubstring*)__base;$/;"	l
__old	stl/ropeimpl.h	/^	      _Self_destruct_ptr __old(__insertee);$/;"	p	signature:(__insertee)
__old	stl/ropeimpl.h	/^	      _Self_destruct_ptr __old(__too_tiny);$/;"	p	signature:(__too_tiny)
__old	stl/ropeimpl.h	/^	  _Self_destruct_ptr __old(__result);$/;"	p	signature:(__result)
__old	stl/ropeimpl.h	/^	  _Self_destruct_ptr __old(__too_tiny);$/;"	p	signature:(__too_tiny)
__old	stl/ropeimpl.h	/^    _RopeRep* __old = _M_root->_M_tree_ptr;$/;"	l
__old	stl/stl_hashtable.h	/^  const _Node* __old = _M_cur;$/;"	l
__old	stl/stl_rope.h	/^            _RopeRep* __old = _M_tree_ptr;$/;"	l
__old	stl/stl_rope.h	/^        _RopeRep* __old = _M_root;$/;"	l
__old_c_string	stl/ropeimpl.h	/^    __GC_CONST _CharT* __old_c_string = _M_tree_ptr->_M_c_string;$/;"	l
__old_finish	stl/stl_deque.h	/^    iterator __old_finish = _M_finish;$/;"	l
__old_finish	stl/stl_vector.h	/^      iterator __old_finish = _M_finish;$/;"	l
__old_len	stl/ropeimpl.h	/^    size_t __old_len = __r->_M_size;$/;"	l
__old_n	stl/stl_hashtable.h	/^  const size_type __old_n = _M_buckets.size();$/;"	l
__old_num_nodes	stl/stl_deque.h	/^  size_type __old_num_nodes = _M_finish._M_node - _M_start._M_node + 1;$/;"	l
__old_pos	stl/stl_rope.h	/^        size_t __old_pos = _M_current_pos;$/;"	l
__old_size	stl/stl_vector.h	/^      const size_type __old_size = size();        $/;"	l
__old_size	stl/stl_vector.h	/^      const size_type __old_size = size();$/;"	l
__old_size	stl/stl_vector.h	/^    const size_type __old_size = size();$/;"	l
__old_start	stl/stl_deque.h	/^    iterator __old_start = _M_start;$/;"	l
__orig_size	stl/ropeimpl.h	/^    size_t __orig_size = __r->_M_size;$/;"	l
__p	stl/ropeimpl.h	/^    const _CharT* __p = __s;$/;"	l
__p	stl/sequence_concepts.h	/^    typename _XX::iterator __p = typename _XX::iterator();$/;"	l
__p	stl/sequence_concepts.h	/^    typename _XX::iterator __p;$/;"	l
__p	stl/stl_algo.h	/^    _RandomAccessIter __p = __first;$/;"	l
__p	stl/stl_algo.h	/^  _ForwardIter2 __p1, __p;$/;"	l
__p	stl/stl_alloc.h	/^	    _Obj* __p;$/;"	l
__p	stl/stl_hash_set.h	/^      pair<typename _Ht::iterator, bool> __p = _M_ht.insert_unique(__obj);$/;"	l
__p	stl/stl_hash_set.h	/^    pair<typename _Ht::iterator, bool> __p = $/;"	l
__p	stl/stl_hashtable.h	/^  _Node* __p = __it._M_cur;$/;"	l
__p	stl/stl_list.h	/^    _Node* __p = _M_get_node();$/;"	l
__p	stl/stl_set.h	/^    pair<typename _Rep_type::iterator, bool> __p = _M_t.insert_unique(__x); $/;"	l
__p	stl/stl_tree.h	/^  pair<const_iterator, const_iterator> __p = equal_range(__k);$/;"	l
__p	stl/stl_tree.h	/^  pair<iterator,iterator> __p = equal_range(__x);$/;"	l
__p1	stl/stl_algo.h	/^  _ForwardIter2 __p1, __p;$/;"	l
__p1	stl/stl_slist.h	/^    _Node_base* __p1 = &this->_M_head;$/;"	l
__p_index	stl/stl_rope.h	/^            size_t __p_index = __p.index();$/;"	l
__pad_len	stl/ropeimpl.h	/^    size_t __pad_len;$/;"	l
__parent	stl/stl_algo.h	/^  _Distance __parent = 0;$/;"	l
__parent	stl/stl_heap.h	/^  _Distance __parent = (__holeIndex - 1) \/ 2;$/;"	l
__parent	stl/stl_heap.h	/^  _Distance __parent = (__len - 2)\/2;$/;"	l
__part1	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __part1 = $/;"	l
__part2	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __part2 = $/;"	l
__partial_sort	stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*)
__partial_sort	stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*, _Compare __comp)
__partial_sort_copy	stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp, _Distance*, _Tp*)
__partial_sort_copy	stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Distance*, _Tp*)
__partial_sum	stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
__partial_sum	stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
__partition	stl/stl_algo.h	/^_BidirectionalIter __partition(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Predicate __pred, bidirectional_iterator_tag)
__partition	stl/stl_algo.h	/^_ForwardIter __partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, forward_iterator_tag)
__path	stl/ropeimpl.h	/^    const _RopeRep* __path[_RopeRep::_S_max_rope_depth+1];$/;"	l
__pointer_type_definition_requirement_violation	stl/concept_checks.h	/^struct __pointer_type_definition_requirement_violation {$/;"	s
__pointer_type_definition_requirement_violation::pointer	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::pointer pointer;$/;"	t	struct:__pointer_type_definition_requirement_violation	access:public
__pop_back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__pop_back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__pop_back_function_requirement_violation	stl/sequence_concepts.h	/^  __pop_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__pop_front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__pop_front_function_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__pop_front_function_requirement_violation	stl/sequence_concepts.h	/^  __pop_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__pop_heap	stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp, _Distance*)
__pop_heap	stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Distance*)
__pop_heap_aux	stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*)
__pop_heap_aux	stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Compare __comp)
__pos	stl/ropeimpl.h	/^    size_t __pos = __x._M_current_pos;$/;"	l
__pos	stl/stl_rope.h	/^            size_t __pos = __start.index();$/;"	l
__pos1	stl/stl_deque.h	/^    iterator __pos1 = __pos;$/;"	l
__postdecrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postdecrement_operator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i)
__postdecrement_operator_requirement_violation	stl/concept_checks.h	/^  __postdecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^    __postincrement_operator_and_assignment_requirement_violation(__i, *__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i, *__i)
__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^    __postincrement_operator_and_assignment_requirement_violation(__i,$/;"	p	class:_Mutable_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i, *__tmp_ptr)
__postincrement_operator_and_assignment_requirement_violation	stl/concept_checks.h	/^  __postincrement_operator_and_assignment_requirement_violation(_Iterator __i,$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i, _Type __t)
__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postincrement_operator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_STL_ERROR	signature:(__i)
__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__postincrement_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
__postincrement_operator_requirement_violation	stl/concept_checks.h	/^  __postincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__power	stl/stl_numeric.h	/^_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
__power	stl/stl_numeric.h	/^inline _Tp __power(_Tp __x, _Integer __n)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n)
__predecrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__predecrement_operator_requirement_violation(__i);$/;"	p	class:_BidirectionalIterator_concept_specification::_STL_ERROR	signature:(__i)
__predecrement_operator_requirement_violation	stl/concept_checks.h	/^  __predecrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__prefix	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __prefix = __r.substr(0, __first.index());$/;"	l
__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__preincrement_operator_requirement_violation(__i);$/;"	p	class:_InputIterator_concept_specification::_STL_ERROR	signature:(__i)
__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  _STL_ERROR::__preincrement_operator_requirement_violation(__i);$/;"	p	class:_OutputIterator_concept_specification::_STL_ERROR	signature:(__i)
__preincrement_operator_requirement_violation	stl/concept_checks.h	/^  __preincrement_operator_requirement_violation(_Iterator __i) {$/;"	f	struct:_STL_ERROR	access:public	signature:(_Iterator __i)
__prev	stl/stl_slist.h	/^  _Node_base* __prev = &this->_M_head;$/;"	l
__prev_node	stl/stl_list.h	/^    _List_node_base* __prev_node = __position._M_node->_M_prev;$/;"	l
__ptr	stl/ropeimpl.h	/^	_CharT* __ptr = _My_rope::_S_fetch_ptr(__old, _M_pos);$/;"	l
__push_back_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__push_back_function_requirement_violation(__s);$/;"	p	class:_BackInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__push_back_function_requirement_violation	stl/sequence_concepts.h	/^  __push_back_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__push_front_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__push_front_function_requirement_violation(__s);$/;"	p	class:_FrontInsertionSequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__push_front_function_requirement_violation	stl/sequence_concepts.h	/^  __push_front_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__push_heap	stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
__push_heap	stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
__push_heap_aux	stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Distance*, _Tp*)
__push_heap_aux	stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance*, _Tp*)
__q	stl/sequence_concepts.h	/^    typename _XX::iterator __q = typename _XX::iterator();$/;"	l
__q	stl/stl_alloc.h	/^      _Obj* __q = (_Obj*)__p;$/;"	l
__q	stl/stl_bvector.h	/^        unsigned int* __q = _M_bit_alloc(__len);$/;"	l
__q	stl/stl_bvector.h	/^      unsigned int* __q = _M_bit_alloc(__len);$/;"	l
__q	stl/stl_bvector.h	/^      unsigned int* __q = _M_bit_alloc(__n);$/;"	l
__q	stl/stl_bvector.h	/^    unsigned int* __q = _M_bit_alloc(__n);$/;"	l
__r	stl/ropeimpl.h	/^	    _RopeLeaf* __r = (_RopeLeaf*) __right;$/;"	l
__r	stl/ropeimpl.h	/^  rope<_CharT,_Alloc>& __r(__first.container());$/;"	p	signature:(__first.container())
__r	stl/sequence_concepts.h	/^    std::pair<typename _XX::iterator, bool> __r;$/;"	l
__r	stl/stl_rope.h	/^            rope __r(__c);$/;"	p	signature:(__c)
__r	stl/stl_rope.h	/^            rope __r(__c_string);$/;"	p	signature:(__c_string)
__r	stl/stl_rope.h	/^            rope __r(__i, __i_len);$/;"	p	signature:(__i, __i_len)
__r	stl/stl_rope.h	/^            rope __r(__i, __j);$/;"	p	signature:(__i, __j)
__r	stl/stl_rope.h	/^            rope<_CharT,_Alloc> __r(__n,__c);$/;"	p	signature:(__n,__c)
__random_number	stl/stl_algo.h	/^inline _Distance __random_number(_Distance __n) {$/;"	f	namespace:std	signature:(_Distance __n)
__random_sample	stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, _RandomNumberGenerator& __rand, const _Distance __n)
__random_sample	stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, const _Distance __n)
__range_constructor_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_constructor_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__range_constructor_requirement_violation	stl/sequence_concepts.h	/^  __range_constructor_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__range_erase_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_erase_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__range_erase_function_requirement_violation	stl/sequence_concepts.h	/^  __range_erase_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__range_insert_function_requirement_violation	stl/sequence_concepts.h	/^  _ERROR_IN_STL_SEQ::__range_insert_function_requirement_violation(__s);$/;"	p	class:_Sequence_concept_specification::_ERROR_IN_STL_SEQ	signature:(__s)
__range_insert_function_requirement_violation	stl/sequence_concepts.h	/^  __range_insert_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__rb_verify	stl/stl_tree.h	/^  bool __rb_verify() const;$/;"	p	class:std::_Rb_tree	access:public	signature:() const
__rb_verify	stl/stl_tree.h	/^bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:std::_Rb_tree	signature:() const
__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __rbegin_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__real_p	stl/stl_alloc.h	/^    char* __real_p = (char*)__p - (int) _S_extra;$/;"	l
__reference_type_definition_requirement_violation	stl/concept_checks.h	/^struct __reference_type_definition_requirement_violation {$/;"	s
__reference_type_definition_requirement_violation::reference	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::reference reference;$/;"	t	struct:__reference_type_definition_requirement_violation	access:public
__remainder	stl/ropeimpl.h	/^    _RopeRep* __remainder;$/;"	l
__remainder_rope	stl/ropeimpl.h	/^    rope<_CharT,_Alloc> __remainder_rope;$/;"	l
__remaining	stl/stl_algo.h	/^  _Distance __remaining = 0;$/;"	l
__rend	stl/ropeimpl.h	/^	    const_iterator __rend(__right, __right_len);$/;"	p	signature:(__right, __right_len)
__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  __rend_iterator_accessor_requirement_violation(_Container __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container __c)
__rest	stl/ropeimpl.h	/^		_CharT* __rest = _S_flatten(__left, __buffer);$/;"	l
__rest	stl/ropeimpl.h	/^	    _RopeRep* __rest = _S_leaf_concat_char_iter(__leftright,$/;"	l
__rest	stl/ropeimpl.h	/^    size_t __rest;$/;"	l
__rest_buffer	stl/ropeimpl.h	/^    _CharT* __rest_buffer;$/;"	l
__result	stl/ropeimpl.h	/^		    _RopeSubstring* __result =$/;"	l
__result	stl/ropeimpl.h	/^		_CharT __result;$/;"	l
__result	stl/ropeimpl.h	/^		_RopeLeaf* __result;$/;"	l
__result	stl/ropeimpl.h	/^		_RopeRep* __result;$/;"	l
__result	stl/ropeimpl.h	/^		bool __result;$/;"	l
__result	stl/ropeimpl.h	/^	_RopeLeaf* __result = _S_leaf_concat_char_iter(__r, __iter, __len);$/;"	l
__result	stl/ropeimpl.h	/^    _CharT* __result = _Data_allocate(_S_rounded_up_size(__s));$/;"	l
__result	stl/ropeimpl.h	/^    _CharT* __result = _Data_allocate(__s + 1);$/;"	l
__result	stl/ropeimpl.h	/^    _RopeConcatenation* __result =$/;"	l
__result	stl/ropeimpl.h	/^    _RopeLeaf* __result;$/;"	l
__result	stl/ropeimpl.h	/^    _RopeRep* __result = 0;$/;"	l
__result	stl/ropeimpl.h	/^    _RopeRep* __result =$/;"	l
__result	stl/ropeimpl.h	/^    _RopeRep* __result;$/;"	l
__result	stl/ropeimpl.h	/^    rope<_CharT,_Alloc> __result;$/;"	l
__result	stl/stl_algo.h	/^    _BidirectionalIter1 __result = __rresult.base();$/;"	l
__result	stl/stl_algo.h	/^    _ForwardIter1 __result = __last1;$/;"	l
__result	stl/stl_algo.h	/^  _RandomAccessIter __result = __first + (__last - __middle);$/;"	l
__result	stl/stl_algobase.h	/^  const int __result = memcmp(__first1, __first2, min(__len1, __len2));$/;"	l
__result	stl/stl_alloc.h	/^      _Obj* __RESTRICT __result = *__my_free_list;$/;"	l
__result	stl/stl_alloc.h	/^    _Obj* __result;$/;"	l
__result	stl/stl_alloc.h	/^    char* __result = (char*)$/;"	l
__result	stl/stl_alloc.h	/^    char* __result = (char*)_Alloc::allocate(__n + (int) _S_extra);$/;"	l
__result	stl/stl_alloc.h	/^    char* __result;$/;"	l
__result	stl/stl_alloc.h	/^    void* __result = malloc(__n);$/;"	l
__result	stl/stl_alloc.h	/^    void* __result = realloc(__p, __new_sz);$/;"	l
__result	stl/stl_alloc.h	/^    void* __result;$/;"	l
__result	stl/stl_hashtable.h	/^    size_type __result = 0;$/;"	l
__result	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	l
__result	stl/stl_list.h	/^    size_type __result = 0;$/;"	l
__result	stl/stl_numeric.h	/^    _Tp __result = __x;$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result = $/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(_M_tree_ptr, __y._M_tree_ptr);$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(__left, __right);$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(__left_result, __right);$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result = replace(_M_tree_ptr, __p, __p + __n, 0);$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result =$/;"	l
__result	stl/stl_rope.h	/^            _RopeRep* __result;$/;"	l
__result	stl/stl_rope.h	/^            const_iterator __result = search(const_begin() + __pos, const_end(),$/;"	l
__result	stl/stl_slist.h	/^  _Slist_node_base* __result = __node;$/;"	l
__result	stl/stl_slist.h	/^  size_t __result = 0;$/;"	l
__result	stl/stl_threads.h	/^        unsigned long __result = *__p;$/;"	l
__result	stl/stl_vector.h	/^    iterator __result = _M_allocate(__n);$/;"	l
__result1	stl/stl_algo.h	/^    _ForwardIter __result1 = __first;$/;"	l
__result2	stl/stl_algo.h	/^    _Pointer __result2 = __buffer;$/;"	l
__result_len	stl/ropeimpl.h	/^		size_t __result_len;$/;"	l
__result_pos	stl/ropeimpl.h	/^    size_type __result_pos = __start + __c._M_count;$/;"	l
__result_pos	stl/stl_rope.h	/^            size_type __result_pos;$/;"	l
__ret	stl/stl_alloc.h	/^    void* __ret = 0;$/;"	l
__reverse	stl/stl_algo.h	/^void __reverse(_BidirectionalIter __first, _BidirectionalIter __last, $/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, bidirectional_iterator_tag)
__reverse	stl/stl_algo.h	/^void __reverse(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, random_access_iterator_tag)
__right	stl/ropeimpl.h	/^		    _RopeRep* __right =  __conc->_M_right;$/;"	l
__right	stl/ropeimpl.h	/^		_RopeRep* __right = __c->_M_right;$/;"	l
__right	stl/ropeimpl.h	/^	_RopeLeaf* __right = $/;"	l
__right	stl/ropeimpl.h	/^	_RopeLeaf* __right = (_RopeLeaf*)(((_RopeConcatenation*)__r)->_M_right);$/;"	l
__right	stl/ropeimpl.h	/^	_RopeRep* __right = __c->_M_right;$/;"	l
__right	stl/ropeimpl.h	/^    _RopeRep* __right =$/;"	l
__right	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
__right_len	stl/ropeimpl.h	/^    size_t __right_len;$/;"	l
__right_start	stl/ropeimpl.h	/^		    size_t __right_start = max(__left_len, __begin);$/;"	l
__rlast1	stl/stl_algo.h	/^  _RevIter1 __rlast1(__first1);$/;"	p	signature:(__first1)
__rlast2	stl/stl_algo.h	/^  _RevIter2 __rlast2(__first2);$/;"	p	signature:(__first2)
__rlen	stl/stl_rope.h	/^    size_t __rlen = rope<_CharT,_Alloc>::_S_char_ptr_len(__right);$/;"	l
__rope_len	stl/ropeimpl.h	/^    size_t __rope_len = __r.size();$/;"	l
__rotate	stl/stl_algo.h	/^_BidirectionalIter __rotate(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance*, bidirectional_iterator_tag)
__rotate	stl/stl_algo.h	/^_ForwardIter __rotate(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _Distance*, forward_iterator_tag)
__rotate	stl/stl_algo.h	/^_RandomAccessIter __rotate(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Distance *, _Tp *)
__rotate_adaptive	stl/stl_algo.h	/^_BidirectionalIter1 __rotate_adaptive(_BidirectionalIter1 __first,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __middle, _BidirectionalIter1 __last, _Distance __len1, _Distance __len2, _BidirectionalIter2 __buffer, _Distance __buffer_size)
__rresult	stl/stl_algo.h	/^  _RevIter1 __rresult = search(_RevIter1(__last1), __rlast1,$/;"	l
__rstart	stl/ropeimpl.h	/^	    const_iterator __rstart(__right, 0);$/;"	p	signature:(__right, 0)
__s	stl/ropeimpl.h	/^    size_t __s = __r->_M_size;$/;"	l
__s	stl/ropeimpl.h	/^    size_t __s = size();$/;"	l
__s	stl/stl_rope.h	/^                __GC_CONST _CharT* __s =$/;"	l
__secondChild	stl/stl_heap.h	/^  _Distance __secondChild = 2 * __holeIndex + 2;$/;"	l
__second_cut	stl/stl_algo.h	/^    _BidirectionalIter __second_cut = __middle;$/;"	l
__second_cut	stl/stl_algo.h	/^  _BidirectionalIter __second_cut = __middle;$/;"	l
__section	stl/ropeimpl.h	/^		    const _CharT* __section = __l->_M_data + __start;$/;"	l
__section	stl/ropeimpl.h	/^		_CharT* __section;$/;"	l
__set_malloc_handler	stl/stl_alloc.h	/^  static void (* __set_malloc_handler(void (*__f)()))()$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void (*__f)())
__sink_unused_warning	stl/concept_checks.h	/^void __sink_unused_warning(_Type) { }$/;"	f	signature:(_Type)
__size	stl/ropeimpl.h	/^	size_t __size = _M_size + 1;$/;"	l
__size	stl/stl_rope.h	/^            size_t __size = size();$/;"	l
__size	stl/stl_rope.h	/^    size_t __size = __str.size();$/;"	l
__size_function_must_be_const	stl/container_concepts.h	/^  __size_function_must_be_const(const _Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(const _Container& __c)
__size_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__size_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__size_function_requirement_violation	stl/container_concepts.h	/^  __size_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__size_with_eos	stl/stl_rope.h	/^        size_t __size_with_eos;$/;"	l
__slist_make_link	stl/stl_slist.h	/^__slist_make_link(_Slist_node_base* __prev_node,$/;"	f	namespace:std	signature:(_Slist_node_base* __prev_node, _Slist_node_base* __new_node)
__slist_previous	stl/stl_slist.h	/^                           __slist_previous(__first._M_node, __last._M_node));$/;"	p	signature:(__first._M_node, __last._M_node)
__slist_previous	stl/stl_slist.h	/^__slist_previous(_Slist_node_base* __head,$/;"	f	namespace:std	signature:(_Slist_node_base* __head, const _Slist_node_base* __node)
__slist_previous	stl/stl_slist.h	/^__slist_previous(const _Slist_node_base* __head,$/;"	f	namespace:std	signature:(const _Slist_node_base* __head, const _Slist_node_base* __node)
__slist_reverse	stl/stl_slist.h	/^inline _Slist_node_base* __slist_reverse(_Slist_node_base* __node)$/;"	f	namespace:std	signature:(_Slist_node_base* __node)
__slist_size	stl/stl_slist.h	/^inline size_t __slist_size(_Slist_node_base* __node)$/;"	f	namespace:std	signature:(_Slist_node_base* __node)
__slist_splice_after	stl/stl_slist.h	/^__slist_splice_after(_Slist_node_base* __pos, _Slist_node_base* __head)$/;"	f	namespace:std	signature:(_Slist_node_base* __pos, _Slist_node_base* __head)
__slist_splice_after	stl/stl_slist.h	/^inline void __slist_splice_after(_Slist_node_base* __pos,$/;"	f	namespace:std	signature:(_Slist_node_base* __pos, _Slist_node_base* __before_first, _Slist_node_base* __before_last)
__space	stl/stl_rope.h	/^              _RopeConcatenation* __space = _CAllocator(__a).allocate(1);$/;"	l
__space	stl/stl_rope.h	/^              _RopeFunction* __space = _FAllocator(__a).allocate(1);$/;"	l
__space	stl/stl_rope.h	/^              _RopeLeaf* __space = _LAllocator(__a).allocate(1);$/;"	l
__space	stl/stl_rope.h	/^              _RopeSubstring* __space = _SAllocator(__a).allocate(1);$/;"	l
__ss	stl/ropeimpl.h	/^	        _Rope_RopeSubstring<_CharT,_Alloc>* __ss =$/;"	l
__stable_partition_adaptive	stl/stl_algo.h	/^_ForwardIter __stable_partition_adaptive(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
__stable_partition_aux	stl/stl_algo.h	/^__stable_partition_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Tp*, _Distance*)
__stable_sort_adaptive	stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size)
__stable_sort_adaptive	stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
__stable_sort_aux	stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*)
__stable_sort_aux	stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*, _Compare __comp)
__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + __n;$/;"	l
__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + difference_type(__n); $/;"	l
__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + difference_type(__n);$/;"	l
__step_size	stl/stl_algo.h	/^  _Distance __step_size = __stl_chunk_size;$/;"	l
__stl_assert	stl/stl_config.h	550;"	d
__stl_assert	stl/stl_config.h	554;"	d
__stl_chunk_size	stl/stl_algo.h	/^const int __stl_chunk_size = 7;$/;"	m	namespace:std
__stl_hash_string	stl/stl_hash_fun.h	/^inline size_t __stl_hash_string(const char* __s)$/;"	f	namespace:std	signature:(const char* __s)
__stl_next_prime	stl/stl_hashtable.h	/^inline unsigned long __stl_next_prime(unsigned long __n)$/;"	f	namespace:std	signature:(unsigned long __n)
__stl_num_primes	stl/stl_hashtable.h	/^enum { __stl_num_primes = 28 };$/;"	e	enum:std::__anon17
__stl_prime_list	stl/stl_hashtable.h	/^static const unsigned long __stl_prime_list[__stl_num_primes] =$/;"	m	namespace:std
__stl_threshold	stl/stl_algo.h	/^const int __stl_threshold = 16;$/;"	m	namespace:std
__stl_throw_length_error	stl/stl_range_errors.h	/^void __stl_throw_length_error(const char* __msg);$/;"	p	namespace:std	signature:(const char* __msg)
__stl_throw_range_error	stl/stl_range_errors.h	/^void __stl_throw_range_error(const char* __msg);$/;"	p	namespace:std	signature:(const char* __msg)
__suffix	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __suffix = $/;"	l
__swap_function_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__swap_function_requirement_violation(__c);$/;"	p	class:_Container_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
__swap_function_requirement_violation	stl/container_concepts.h	/^  __swap_function_requirement_violation(_Container& __c) {$/;"	f	struct:_ERROR_IN_STL_CONTAINER	access:public	signature:(_Container& __c)
__t	stl/sequence_concepts.h	/^    typename _XX::const_reference __t = __s.back();$/;"	l
__t	stl/sequence_concepts.h	/^    typename _XX::const_reference __t = __s.front();$/;"	l
__t	stl/sequence_concepts.h	/^    typename _XX::reference __t = __s.back();$/;"	l
__t	stl/sequence_concepts.h	/^    typename _XX::reference __t = __s.front();$/;"	l
__t	stl/sequence_concepts.h	/^    typename _XX::value_type __t = typename _XX::value_type();$/;"	l
__t	stl/stl_algo.h	/^    _EuclideanRingElement __t = __m % __n;$/;"	l
__t	stl/stl_algo.h	/^  _Distance __t = __n;$/;"	l
__t_copy	stl/stl_deque.h	/^  value_type __t_copy = __t;$/;"	l
__test_and_set	stl/stl_threads.h	51;"	d
__tmp	stl/stl_algo.h	/^    _Tp __tmp = *__first;$/;"	l
__tmp	stl/stl_algobase.h	/^  _Tp __tmp = *__a;$/;"	l
__tmp	stl/stl_algobase.h	/^  _Tp __tmp = __a;$/;"	l
__tmp	stl/stl_algobase.h	/^  char __tmp = __c;$/;"	l
__tmp	stl/stl_algobase.h	/^  signed char __tmp = __c;$/;"	l
__tmp	stl/stl_algobase.h	/^  unsigned char __tmp = __c;$/;"	l
__tmp	stl/stl_bvector.h	/^    const_iterator __tmp = *this;$/;"	l
__tmp	stl/stl_bvector.h	/^    iterator __tmp = *this;$/;"	l
__tmp	stl/stl_bvector.h	/^  bool __tmp = __x;$/;"	l
__tmp	stl/stl_deque.h	/^      iterator __tmp = _M_finish;$/;"	l
__tmp	stl/stl_deque.h	/^    _Self __tmp = *this;$/;"	l
__tmp	stl/stl_deque.h	/^    const_iterator __tmp = _M_finish;$/;"	l
__tmp	stl/stl_deque.h	/^    iterator __tmp = _M_finish;$/;"	l
__tmp	stl/stl_hashtable.h	/^      _Node* __tmp = _M_new_node(__obj);$/;"	l
__tmp	stl/stl_hashtable.h	/^      vector<_Node*, _All> __tmp(__n, (_Node*)(0),$/;"	p	signature:(__n, (_Node*)(0), _M_buckets.get_allocator())
__tmp	stl/stl_hashtable.h	/^  _Node* __tmp = _M_new_node(__obj);$/;"	l
__tmp	stl/stl_hashtable.h	/^  const_iterator __tmp = *this;$/;"	l
__tmp	stl/stl_hashtable.h	/^  iterator __tmp = *this;$/;"	l
__tmp	stl/stl_iterator.h	/^    _BidirectionalIterator __tmp = current;$/;"	l
__tmp	stl/stl_iterator.h	/^    _Iterator __tmp = current;$/;"	l
__tmp	stl/stl_iterator.h	/^    _Self __tmp = *this;$/;"	l
__tmp	stl/stl_iterator.h	/^    istream_iterator __tmp = *this;$/;"	l
__tmp	stl/stl_iterator.h	/^    istream_iterator<_Tp, _Dist> __tmp = *this;$/;"	l
__tmp	stl/stl_iterator.h	/^    istreambuf_iterator __tmp = *this;$/;"	l
__tmp	stl/stl_list.h	/^      _List_node_base* __tmp      = __position._M_node->_M_prev;$/;"	l
__tmp	stl/stl_list.h	/^    _List_node<_Tp>* __tmp = __cur;$/;"	l
__tmp	stl/stl_list.h	/^    _Node* __tmp = _M_create_node(__x);$/;"	l
__tmp	stl/stl_list.h	/^    _Self __tmp = *this;$/;"	l
__tmp	stl/stl_list.h	/^    iterator __tmp = end();$/;"	l
__tmp	stl/stl_list.h	/^  _List_node_base* __tmp = __p;$/;"	l
__tmp	stl/stl_numeric.h	/^    _Tp __tmp = *__first;$/;"	l
__tmp	stl/stl_raw_storage_iter.h	/^    raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;$/;"	l
__tmp	stl/stl_rope.h	/^            _RopeRep* __tmp = _M_tree_ptr;$/;"	l
__tmp	stl/stl_rope.h	/^        _CharT __tmp = __a;$/;"	l
__tmp	stl/stl_slist.h	/^    _Self __tmp = *this;$/;"	l
__tmp	stl/stl_slist.h	/^    _Slist_node<_Tp>* __tmp = __cur;$/;"	l
__tmp	stl/stl_tempbuf.h	/^    _Tp* __tmp = (_Tp*) malloc((size_t)__len * sizeof(_Tp));$/;"	l
__tmp	stl/stl_threads.h	/^    \/*volatile*\/ _RC_t __tmp = --_M_ref_count;$/;"	l
__tmp	stl/stl_threads.h	/^    volatile _RC_t __tmp = --_M_ref_count;$/;"	l
__tmp	stl/stl_tree.h	/^    _Link_type __tmp = _M_create_node(__x->_M_value_field);$/;"	l
__tmp	stl/stl_tree.h	/^    _Link_type __tmp = _M_get_node();$/;"	l
__tmp	stl/stl_tree.h	/^    _Self __tmp = *this;$/;"	l
__tmp	stl/stl_vector.h	/^      iterator __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);$/;"	l
__tmp	stl/stl_vector.h	/^      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());$/;"	l
__tmp	stl/stl_vector.h	/^    iterator __tmp = _M_allocate_and_copy(__len, __first, __last);$/;"	l
__tmp	stl/stl_vector.h	/^    vector<_Tp, _Alloc> __tmp(__n, __val, get_allocator());$/;"	p	signature:(__n, __val, get_allocator())
__tmp_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<__T>::_Type* __tmp_ptr = 0;$/;"	l
__tmp_ptr	stl/concept_checks.h	/^  typename _Mutable_trait<value_type>::_Type* __tmp_ptr = 0;$/;"	l
__too_big	stl/ropeimpl.h	/^	    bool __too_big = __r->_M_size > __prefix->_M_size;$/;"	l
__too_tiny	stl/ropeimpl.h	/^    _RopeRep* __too_tiny = 0;    	\/\/ included in refcount$/;"	l
__top	stl/stl_tree.h	/^  _Link_type __top = _M_clone_node(__x);$/;"	l
__topIndex	stl/stl_heap.h	/^  _Distance __topIndex = __holeIndex;$/;"	l
__total_bytes	stl/stl_alloc.h	/^    size_t __total_bytes = __size * __nobjs;$/;"	l
__trip_count	stl/stl_algo.h	/^  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count$/;"	l
__true_type	stl/type_traits.h	/^struct __true_type {$/;"	s
__ts	stl/stl_threads.h	/^          struct timespec __ts;$/;"	l
__two_step	stl/stl_algo.h	/^  _Distance __two_step = 2 * __step_size;$/;"	l
__type_X_is_not_convertible_to_type_Y	stl/concept_checks.h	/^  __type_X_is_not_convertible_to_type_Y(_TypeX __x, _TypeY) {$/;"	f	struct:_STL_CONVERT_ERROR	access:public	signature:(_TypeX __x, _TypeY)
__type_X_not_same_as_type_Y	stl/concept_checks.h	/^  __type_X_not_same_as_type_Y(_TypeX , _TypeY ) { $/;"	f	struct:_STL_SAME_TYPE_ERROR	access:public	signature:(_TypeX , _TypeY )
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<bool> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<char> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const signed char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<const unsigned char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<double> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<float> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<int> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long double> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long long> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<long> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<short> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<signed char> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char*> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned char> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned int> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long long> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned long> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<unsigned short> {$/;"	s
__type_traits	stl/type_traits.h	/^__STL_TEMPLATE_NULL struct __type_traits<wchar_t> {$/;"	s
__type_traits	stl/type_traits.h	/^struct __type_traits { $/;"	s
__type_traits	stl/type_traits.h	/^struct __type_traits<_Tp*> {$/;"	s
__type_traits::has_trivial_assignment_operator	stl/type_traits.h	/^   typedef __false_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_assignment_operator	stl/type_traits.h	/^   typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_copy_constructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_copy_constructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_default_constructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_default_constructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_destructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
__type_traits::has_trivial_destructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
__type_traits::is_POD_type	stl/type_traits.h	/^   typedef __false_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
__type_traits::is_POD_type	stl/type_traits.h	/^   typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
__type_traits::this_dummy_member_must_be_first	stl/type_traits.h	/^   typedef __true_type     this_dummy_member_must_be_first;$/;"	t	struct:__type_traits	access:public
__unary_function_requirement_violation	stl/concept_checks.h	/^  __unary_function_requirement_violation(_Func& __f,$/;"	f	struct:_STL_UNARY_FUNCTION_ERROR	access:public	signature:(_Func& __f, const _Arg& __arg)
__unconditional_insert_element_function_requirement_violation	stl/sequence_concepts.h	/^  __unconditional_insert_element_function_requirement_violation(_XX& __s) {$/;"	f	struct:_ERROR_IN_STL_SEQ	access:public	signature:(_XX& __s)
__underlying_alloc	stl/stl_alloc.h	/^  _Alloc __underlying_alloc;$/;"	m	struct:std::__allocator	access:public
__unguarded_insertion_sort	stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
__unguarded_insertion_sort	stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
__unguarded_insertion_sort_aux	stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
__unguarded_insertion_sort_aux	stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
__unguarded_linear_insert	stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val) {$/;"	f	namespace:std	signature:(_RandomAccessIter __last, _Tp __val)
__unguarded_linear_insert	stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val, $/;"	f	namespace:std	signature:(_RandomAccessIter __last, _Tp __val, _Compare __comp)
__unguarded_partition	stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot)
__unguarded_partition	stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot, _Compare __comp)
__uninitialized_copy	stl/stl_uninitialized.h	/^__uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _Tp*)
__uninitialized_copy_aux	stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __false_type)
__uninitialized_copy_aux	stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __true_type)
__uninitialized_copy_copy	stl/stl_uninitialized.h	/^__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _ForwardIter __result)
__uninitialized_copy_fill	stl/stl_uninitialized.h	/^__uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, const _Tp& __x)
__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result, input_iterator_tag)
__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_RandomAccessIter __first, _Size __count,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _Size __count, _ForwardIter __result, random_access_iterator_tag)
__uninitialized_fill	stl/stl_uninitialized.h	/^inline void __uninitialized_fill(_ForwardIter __first, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, _Tp1*)
__uninitialized_fill_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __false_type)
__uninitialized_fill_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __true_type)
__uninitialized_fill_copy	stl/stl_uninitialized.h	/^__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,$/;"	f	namespace:std	signature:(_ForwardIter __result, _ForwardIter __mid, const _Tp& __x, _InputIter __first, _InputIter __last)
__uninitialized_fill_n	stl/stl_uninitialized.h	/^__uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)
__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __false_type)
__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __true_type)
__unique_copy	stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _BinaryPredicate __binary_pred, forward_iterator_tag)
__unique_copy	stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, forward_iterator_tag)
__unique_copy	stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, _Tp*)
__unique_copy	stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
__unique_copy	stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, output_iterator_tag)
__unique_copy	stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, output_iterator_tag)
__upper_bound	stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
__upper_bound	stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
__vacancies	stl/stl_deque.h	/^    size_type __vacancies = (_M_finish._M_last - _M_finish._M_cur) - 1;$/;"	l
__vacancies	stl/stl_deque.h	/^    size_type __vacancies = _M_start._M_cur - _M_start._M_first;$/;"	l
__val	stl/stl_algo.h	/^  _Tp __val = *__last;$/;"	l
__val	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	l
__val	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	l
__val	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	l
__val	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	l
__value	stl/stl_algo.h	/^  _Tp __value = *__first;$/;"	l
__value	stl/stl_iterator.h	/^    *_M_stream << __value;$/;"	l
__value	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	l
__value	stl/stl_numeric.h	/^  _Tp __value = *__first;$/;"	l
__value_type	stl/stl_iterator_base.h	/^__value_type(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
__value_type_type_definition_requirement_violation	stl/concept_checks.h	/^struct __value_type_type_definition_requirement_violation {$/;"	s
__value_type_type_definition_requirement_violation::value_type	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::value_type value_type;$/;"	t	struct:__value_type_type_definition_requirement_violation	access:public
__w	stl/ropeimpl.h	/^    size_t __w = __o.width();$/;"	l
__w	stl/stl_tree.h	/^        _Rb_tree_node_base* __w = __x_parent->_M_left;$/;"	l
__w	stl/stl_tree.h	/^        _Rb_tree_node_base* __w = __x_parent->_M_right;$/;"	l
__x	stl/sequence_concepts.h	/^    _XX __x(__n);$/;"	p	signature:(__n)
__x	stl/sequence_concepts.h	/^    _XX __x(__n, __t);$/;"	p	signature:(__n, __t)
__x	stl/sequence_concepts.h	/^    _XX __x(__s.begin(), __s.end());$/;"	p	signature:(__s.begin(), __s.end())
__x	stl/stl_bvector.h	/^      _M_insert_aux(end(), __x);$/;"	l
__x	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	l
__x	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	l
__x	stl/stl_list.h	/^    insert(end(), __new_size - __len, __x);$/;"	l
__x	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	l
__x	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	l
__x	stl/stl_slist.h	/^                         __n, __x);$/;"	l
__x	stl/stl_tree.h	/^    _Link_type __x = (_Link_type) __it._M_node;$/;"	l
__x	stl/stl_tree.h	/^  _Link_type __x = (_Link_type) __x_;$/;"	l
__x	stl/stl_tree.h	/^  _Link_type __x = _M_root();      \/\/ Current node. $/;"	l
__x	stl/stl_tree.h	/^  _Link_type __x = _M_root(); \/* Current node. *\/$/;"	l
__x	stl/stl_tree.h	/^  _Link_type __x = _M_root();$/;"	l
__x	stl/stl_tree.h	/^  _Rb_tree_node_base* __x = 0;$/;"	l
__x	stl/stl_vector.h	/^      _M_insert_aux(end(), __x);$/;"	l
__x	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	l
__x_copy	stl/stl_deque.h	/^  value_type __x_copy = __x;$/;"	l
__x_copy	stl/stl_vector.h	/^      _Tp __x_copy = __x;$/;"	l
__x_copy	stl/stl_vector.h	/^    _Tp __x_copy = __x;$/;"	l
__x_parent	stl/stl_tree.h	/^  _Rb_tree_node_base* __x_parent = 0;$/;"	l
__xlen	stl/stl_vector.h	/^    const size_type __xlen = __x.size();$/;"	l
__y	stl/concept_checks.h	/^    _TypeY __y = __x;$/;"	l
__y	stl/stl_tree.h	/^      _Base_ptr __y = _M_node->_M_left;$/;"	l
__y	stl/stl_tree.h	/^      _Base_ptr __y = _M_node->_M_parent;$/;"	l
__y	stl/stl_tree.h	/^      _Link_type __y = _M_clone_node(__x);$/;"	l
__y	stl/stl_tree.h	/^      _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_left;$/;"	l
__y	stl/stl_tree.h	/^      _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_right;$/;"	l
__y	stl/stl_tree.h	/^    _Link_type __y = _S_left(__x);$/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = $/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = (_Link_type) __y_;$/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = _M_header;      \/\/ Last node which is not less than __k. $/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = _M_header; \/* Last node which is greater than __k. *\/$/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = _M_header; \/* Last node which is not less than __k. *\/$/;"	l
__y	stl/stl_tree.h	/^  _Link_type __y = _M_header;$/;"	l
__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __x->_M_left;$/;"	l
__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __x->_M_right;$/;"	l
__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __z;$/;"	l
__z	stl/stl_tree.h	/^  _Link_type __z;$/;"	l
_allocator_type	stl/stl_rope.h	/^    typedef _Alloc _allocator_type; \/\/ used in _Rope_rotate, VC++ workaround$/;"	t	class:std::_Rope_iterator_base	access:public
_const_ReversibleContainer_concept_specification	stl/container_concepts.h	/^struct _const_ReversibleContainer_concept_specification {$/;"	s
_const_ReversibleContainer_concept_specification::_Container_concept_specification::_Container_requirement_violation	stl/container_concepts.h	/^  _Container_concept_specification<_ReversibleContainer>::_Container_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_Container_concept_specification	signature:(__c)
_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__const_rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rbegin_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation	stl/container_concepts.h	/^  _ERROR_IN_STL_CONTAINER::__rend_iterator_accessor_requirement_violation(__c);$/;"	p	class:_const_ReversibleContainer_concept_specification::_ERROR_IN_STL_CONTAINER	signature:(__c)
_const_ReversibleContainer_concept_specification::__BidirectionalIterator_concept_specification::const_iter	stl/container_concepts.h	/^  __BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());$/;"	p	class:_const_ReversibleContainer_concept_specification::__BidirectionalIterator_concept_specification	signature:()
_const_ReversibleContainer_concept_specification::_const_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_const_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
_const_ReversibleContainer_concept_specification::const_iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::const_iterator const_iter;$/;"	t
_const_ReversibleContainer_concept_specification::iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::iterator iter;$/;"	t
_const_ReversibleContainer_requirement_violation	stl/container_concepts.h	/^_const_ReversibleContainer_requirement_violation(_ReversibleContainer __c) {$/;"	f	struct:_const_ReversibleContainer_concept_specification	access:public	signature:(_ReversibleContainer __c)
accumulate	stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
accumulate	stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
address	stl/defalloc.h	/^    pointer address(reference x) { return (pointer)&x; }$/;"	f	class:allocator	access:public	signature:(reference x)
address	stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:std::allocator	access:public	signature:(const_reference __x) const
address	stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	namespace:std	signature:(const_reference __x) const
address	stl/stl_alloc.h	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:std::allocator	access:public	signature:(reference __x) const
adjacent_difference	stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
adjacent_difference	stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
adjacent_find	stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
adjacent_find	stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
advance	stl/stl_iterator_base.h	/^inline void advance(_InputIterator& __i, _Distance __n) {$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n)
alloc	stl/stl_alloc.h	/^typedef __default_alloc_template<__NODE_ALLOCATOR_THREADS, 0> alloc;$/;"	t	namespace:std
alloc	stl/stl_alloc.h	/^typedef malloc_alloc alloc;$/;"	t	namespace:std
allocate	stl/defalloc.h	/^    pointer allocate(size_type n) { $/;"	f	class:allocator	access:public	signature:(size_type n)
allocate	stl/defalloc.h	/^inline T* allocate(ptrdiff_t size, T*) {$/;"	f	signature:(ptrdiff_t size, T*)
allocate	stl/stl_alloc.h	/^    static _Tp* allocate(size_t __n)$/;"	f	class:std::simple_alloc	access:public	signature:(size_t __n)
allocate	stl/stl_alloc.h	/^    static _Tp* allocate(void)$/;"	f	class:std::simple_alloc	access:public	signature:(void)
allocate	stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:std::allocator	access:public	signature:(size_type __n, const void* = 0)
allocate	stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	namespace:std	signature:(size_type __n, const void* = 0)
allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::__default_alloc_template	access:public	signature:(size_t __n)
allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(size_t __n)
allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::debug_alloc	access:public	signature:(size_t __n)
allocator	stl/defalloc.h	/^class allocator {$/;"	c
allocator	stl/defalloc.h	/^class allocator<void> {$/;"	c
allocator	stl/stl_alloc.h	/^class allocator {$/;"	c	namespace:std
allocator	stl/stl_alloc.h	/^class allocator<void> {$/;"	c	namespace:std
allocator::address	stl/defalloc.h	/^    pointer address(reference x) { return (pointer)&x; }$/;"	f	class:allocator	access:public	signature:(reference x)
allocator::allocate	stl/defalloc.h	/^    pointer allocate(size_type n) { $/;"	f	class:allocator	access:public	signature:(size_type n)
allocator::const_address	stl/defalloc.h	/^    const_pointer const_address(const_reference x) { $/;"	f	class:allocator	access:public	signature:(const_reference x)
allocator::const_pointer	stl/defalloc.h	/^    typedef const T* const_pointer;$/;"	t	class:allocator	access:public
allocator::const_reference	stl/defalloc.h	/^    typedef const T& const_reference;$/;"	t	class:allocator	access:public
allocator::deallocate	stl/defalloc.h	/^    void deallocate(pointer p) { ::deallocate(p); }$/;"	f	class:allocator	access:public	signature:(pointer p)
allocator::difference_type	stl/defalloc.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:allocator	access:public
allocator::init_page_size	stl/defalloc.h	/^    size_type init_page_size() { $/;"	f	class:allocator	access:public	signature:()
allocator::max_size	stl/defalloc.h	/^    size_type max_size() const { $/;"	f	class:allocator	access:public	signature:() const
allocator::pointer	stl/defalloc.h	/^    typedef T* pointer;$/;"	t	class:allocator	access:public
allocator::pointer	stl/defalloc.h	/^    typedef void* pointer;$/;"	t	class:allocator	access:public
allocator::reference	stl/defalloc.h	/^    typedef T& reference;$/;"	t	class:allocator	access:public
allocator::size_type	stl/defalloc.h	/^    typedef size_t size_type;$/;"	t	class:allocator	access:public
allocator::value_type	stl/defalloc.h	/^    typedef T value_type;$/;"	t	class:allocator	access:public
allocator_type	stl/stl_alloc.h	/^          allocator_type;$/;"	t	struct:_Alloc_traits	access:public
allocator_type	stl/stl_alloc.h	/^  typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;$/;"	t	struct:_Alloc_traits	access:public
allocator_type	stl/stl_alloc.h	/^  typedef __allocator<_Tp, debug_alloc<_Alloc> > allocator_type;$/;"	t	struct:_Alloc_traits	access:public
allocator_type	stl/stl_alloc.h	/^  typedef allocator<_Tp> allocator_type;$/;"	t	struct:_Alloc_traits	access:public
allocator_type	stl/stl_bvector.h	/^          allocator_type;$/;"	t	class:std::_Bvector_alloc_base	access:public
allocator_type	stl/stl_bvector.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Bvector_base	access:public
allocator_type	stl/stl_bvector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Bvector_base	access:public
allocator_type	stl/stl_bvector.h	/^  typedef typename __BVECTOR_BASE::allocator_type allocator_type;$/;"	t	class:std::__BVECTOR	access:public
allocator_type	stl/stl_deque.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Deque_base	access:public
allocator_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp,_Alloc>::allocator_type allocator_type;$/;"	t	class:std::_Deque_alloc_base	access:public
allocator_type	stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Deque_base	access:public
allocator_type	stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::deque	access:public
allocator_type	stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_map	access:public
allocator_type	stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_multimap	access:public
allocator_type	stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_multiset	access:public
allocator_type	stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_set	access:public
allocator_type	stl/stl_hashtable.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::hashtable	access:public
allocator_type	stl/stl_hashtable.h	/^  typedef typename _Alloc_traits<_Val,_Alloc>::allocator_type allocator_type;$/;"	t	class:std::hashtable	access:public
allocator_type	stl/stl_list.h	/^          allocator_type;$/;"	t	class:std::_List_alloc_base	access:public
allocator_type	stl/stl_list.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_List_base	access:public
allocator_type	stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_List_base	access:public
allocator_type	stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::list	access:public
allocator_type	stl/stl_map.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::map	access:public
allocator_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::multimap	access:public
allocator_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::multiset	access:public
allocator_type	stl/stl_rope.h	/^                                        allocator_type;$/;"	t	struct:std::_Rope_RopeFunction	access:public
allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeConcatenation	access:public
allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeLeaf	access:public
allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeRep	access:public
allocator_type	stl/stl_rope.h	/^          allocator_type;$/;"	t	class:std::_Rope_alloc_base	access:public
allocator_type	stl/stl_rope.h	/^          allocator_type;$/;"	t	class:std::_Rope_rep_alloc_base	access:public
allocator_type	stl/stl_rope.h	/^        allocator_type;$/;"	t	struct:std::_Rope_RopeSubstring	access:public
allocator_type	stl/stl_rope.h	/^        typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::rope	access:protected
allocator_type	stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Rope_base	access:public
allocator_type	stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Rope_rep_base	access:public
allocator_type	stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rope_base	access:public
allocator_type	stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rope_rep_base	access:public
allocator_type	stl/stl_set.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::set	access:public
allocator_type	stl/stl_slist.h	/^          allocator_type;$/;"	t	class:std::_Slist_alloc_base	access:public
allocator_type	stl/stl_slist.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:std::_Slist_base	access:public
allocator_type	stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::slist	access:public
allocator_type	stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Slist_base	access:public
allocator_type	stl/stl_tree.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:std::_Rb_tree_base	access:public
allocator_type	stl/stl_tree.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:std::_Rb_tree_alloc_base	access:public
allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Rb_tree	access:public
allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rb_tree_base	access:public
allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::rb_tree	access:public
allocator_type	stl/stl_vector.h	/^          allocator_type;$/;"	t	class:std::_Vector_alloc_base	access:public
allocator_type	stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::vector	access:public
allocator_type	stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Vector_base	access:public
append	stl/stl_rope.h	/^                _M_prefix->append(__s, __s + __len);$/;"	p	signature:(__s, __s + __len)
append	stl/stl_rope.h	/^            _M_prefix->append(_M_buffer, _M_buffer + _M_buf_count);$/;"	p	signature:(_M_buffer, _M_buffer + _M_buf_count)
append	stl/stl_rope.h	/^        rope& append() { return append(_CharT()); }  \/\/ XXX why?$/;"	f	class:std::rope	access:public	signature:()
append	stl/stl_rope.h	/^        rope& append(_CharT __c) {$/;"	f	class:std::rope	access:public	signature:(_CharT __c)
append	stl/stl_rope.h	/^        rope& append(const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __c_string)
append	stl/stl_rope.h	/^        rope& append(const _CharT* __iter, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __iter, size_t __n)
append	stl/stl_rope.h	/^        rope& append(const _CharT* __s, const _CharT* __e) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, const _CharT* __e)
append	stl/stl_rope.h	/^        rope& append(const rope& __y) {$/;"	f	class:std::rope	access:public	signature:(const rope& __y)
append	stl/stl_rope.h	/^        rope& append(const_iterator __s, const_iterator __e) {$/;"	f	class:std::rope	access:public	signature:(const_iterator __s, const_iterator __e)
append	stl/stl_rope.h	/^        rope& append(size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __n, _CharT __c)
append	stl/stl_rope.h	/^        void append(value_type* __s, size_t __len)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
append	stl/stl_rope.h	/^    __left.append(__right);$/;"	p	signature:(__right)
apply_to_pieces	stl/stl_rope.h	/^        void apply_to_pieces( size_t __begin, size_t __end,$/;"	f	class:std::rope	access:public	signature:( size_t __begin, size_t __end, _Rope_char_consumer<_CharT>& __c) const
argument_type	stl/stl_function.h	/^  typedef _Arg argument_type;$/;"	t	struct:std::unary_function	access:public
argument_type	stl/stl_function.h	/^  typedef _Argument argument_type;$/;"	t	struct:std::_Constant_unary_fun	access:public
assign	stl/char_traits.h	/^  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s, size_t __n, _CharT __c)
assign	stl/char_traits.h	/^  static char* assign(char* __s, size_t __n, char __c)$/;"	f	class:std::char_traits	access:public	signature:(char* __s, size_t __n, char __c)
assign	stl/char_traits.h	/^  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }$/;"	f	class:std::char_traits	access:public	signature:(char& __c1, const char& __c2)
assign	stl/char_traits.h	/^  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }$/;"	f	class:std::__char_traits_base	access:public	signature:(char_type& __c1, const char_type& __c2)
assign	stl/stl_bvector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_bvector.h	/^  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }$/;"	f	class:std::__BVECTOR	access:public	signature:(size_t __n, bool __x)
assign	stl/stl_deque.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_deque.h	/^  void assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::deque	access:public	signature:(size_type __n, const _Tp& __val)
assign	stl/stl_list.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_list.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:std::list	access:public	signature:(size_type __n, const _Tp& __val)
assign	stl/stl_slist.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_slist.h	/^  void assign(size_type __n, const _Tp& __val)$/;"	f	class:std::slist	access:public	signature:(size_type __n, const _Tp& __val)
assign	stl/stl_vector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
assign	stl/stl_vector.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:std::vector	access:public	signature:(size_type __n, const _Tp& __val)
at	stl/stl_bvector.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
at	stl/stl_bvector.h	/^  reference at(size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
at	stl/stl_deque.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
at	stl/stl_deque.h	/^  reference at(size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
at	stl/stl_rope.h	/^            reference at(size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
at	stl/stl_rope.h	/^        _CharT at(size_type __pos) const {$/;"	f	class:std::rope	access:public	signature:(size_type __pos) const
at	stl/stl_vector.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
at	stl/stl_vector.h	/^  reference at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
back	stl/stl_bvector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
back	stl/stl_bvector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
back	stl/stl_deque.h	/^    push_back(back());$/;"	p	signature:()
back	stl/stl_deque.h	/^  const_reference back() const {$/;"	f	class:std::deque	access:public	signature:() const
back	stl/stl_deque.h	/^  reference back() {$/;"	f	class:std::deque	access:public	signature:()
back	stl/stl_list.h	/^  const_reference back() const { return *(--end()); }$/;"	f	class:std::list	access:public	signature:() const
back	stl/stl_list.h	/^  reference back() { return *(--end()); }$/;"	f	class:std::list	access:public	signature:()
back	stl/stl_queue.h	/^  const_reference back() const { return c.back(); }$/;"	f	class:std::queue	access:public	signature:() const
back	stl/stl_queue.h	/^  reference back() { return c.back(); }$/;"	f	class:std::queue	access:public	signature:()
back	stl/stl_rope.h	/^        _CharT back() const$/;"	f	class:std::rope	access:public	signature:() const
back	stl/stl_vector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:std::vector	access:public	signature:() const
back	stl/stl_vector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:std::vector	access:public	signature:()
back_insert_iterator	stl/stl_iterator.h	/^  explicit back_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::back_insert_iterator	access:public	signature:(_Container& __x)
back_insert_iterator	stl/stl_iterator.h	/^class back_insert_iterator {$/;"	c	namespace:std
back_inserter	stl/stl_iterator.h	/^inline back_insert_iterator<_Container> back_inserter(_Container& __x) {$/;"	f	namespace:std	signature:(_Container& __x)
balance	stl/stl_rope.h	/^        void balance()$/;"	f	class:std::rope	access:public	signature:()
base	stl/stl_iterator.h	/^  _BidirectionalIterator base() const { return current; }$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
base	stl/stl_iterator.h	/^  _RandomAccessIterator base() const { return current; }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
base	stl/stl_iterator.h	/^  iterator_type base() const { return current; }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
before_begin	stl/stl_slist.h	/^  const_iterator before_begin() const$/;"	f	class:std::slist	access:public	signature:() const
before_begin	stl/stl_slist.h	/^  iterator before_begin() { return iterator((_Node*) &this->_M_head); }$/;"	f	class:std::slist	access:public	signature:()
begin	stl/container_concepts.h	/^    __c.begin();$/;"	p	signature:()
begin	stl/stl_bvector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
begin	stl/stl_bvector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
begin	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
begin	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	p	signature:()
begin	stl/stl_deque.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
begin	stl/stl_deque.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::deque	access:public	signature:()
begin	stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_map	access:public	signature:() const
begin	stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
begin	stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:std::hash_map	access:public	signature:()
begin	stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
begin	stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
begin	stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_set	access:public	signature:() const
begin	stl/stl_hashtable.h	/^  const_iterator begin() const$/;"	f	class:std::hashtable	access:public	signature:() const
begin	stl/stl_hashtable.h	/^  iterator begin()$/;"	f	class:std::hashtable	access:public	signature:()
begin	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	p	signature:()
begin	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	p	signature:()
begin	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	p	signature:()
begin	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	p	signature:()
begin	stl/stl_list.h	/^    { insert(begin(), __x.begin(), __x.end()); }$/;"	p	signature:()
begin	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	p	signature:()
begin	stl/stl_list.h	/^  const_iterator begin() const { return (_Node*)(_M_node->_M_next); }$/;"	f	class:std::list	access:public	signature:() const
begin	stl/stl_list.h	/^  iterator begin()             { return (_Node*)(_M_node->_M_next); }$/;"	f	class:std::list	access:public	signature:()
begin	stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	p	signature:()
begin	stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	p	signature:()
begin	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	p	signature:()
begin	stl/stl_map.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::map	access:public	signature:() const
begin	stl/stl_map.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:std::map	access:public	signature:()
begin	stl/stl_multimap.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::multimap	access:public	signature:() const
begin	stl/stl_multimap.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:std::multimap	access:public	signature:()
begin	stl/stl_multiset.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::multiset	access:public	signature:() const
begin	stl/stl_rope.h	/^            const_iterator begin() { return const_begin(); }$/;"	f	class:std::rope	access:public	signature:()
begin	stl/stl_rope.h	/^            iterator begin() { return mutable_begin(); }$/;"	f	class:std::rope	access:public	signature:()
begin	stl/stl_rope.h	/^        const_iterator begin() const {$/;"	f	class:std::rope	access:public	signature:() const
begin	stl/stl_set.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::set	access:public	signature:() const
begin	stl/stl_slist.h	/^  const_iterator begin() const $/;"	f	class:std::slist	access:public	signature:() const
begin	stl/stl_slist.h	/^  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }$/;"	f	class:std::slist	access:public	signature:()
begin	stl/stl_tempbuf.h	/^  _Tp* begin() { return _M_buffer; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
begin	stl/stl_tree.h	/^  const_iterator begin() const { return _M_leftmost(); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
begin	stl/stl_tree.h	/^  iterator begin() { return _M_leftmost(); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
begin	stl/stl_vector.h	/^    destroy(begin(), end());$/;"	p	signature:()
begin	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	p	signature:()
begin	stl/stl_vector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::vector	access:public	signature:() const
begin	stl/stl_vector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::vector	access:public	signature:()
begin	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
bidirectional_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct bidirectional_iterator {$/;"	s	namespace:std
bidirectional_iterator_tag	stl/stl_iterator_base.h	/^struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	namespace:std	inherits:forward_iterator_tag
binary_compose	stl/stl_function.h	/^  binary_compose(const _Operation1& __x, const _Operation2& __y, $/;"	f	class:std::binary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y, const _Operation3& __z)
binary_compose	stl/stl_function.h	/^class binary_compose$/;"	c	namespace:std	inherits:unary_function
binary_function	stl/stl_function.h	/^struct binary_function {$/;"	s	namespace:std
binary_negate	stl/stl_function.h	/^  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::binary_negate	access:public	signature:(const _Predicate& __x)
binary_negate	stl/stl_function.h	/^class binary_negate $/;"	c	namespace:std	inherits:binary_function
binary_search	stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
binary_search	stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
bind1st	stl/stl_function.h	/^bind1st(const _Operation& __fn, const _Tp& __x) $/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
bind2nd	stl/stl_function.h	/^bind2nd(const _Operation& __fn, const _Tp& __x) $/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
binder1st	stl/stl_function.h	/^  binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
binder1st	stl/stl_function.h	/^class binder1st$/;"	c	namespace:std	inherits:unary_function
binder2nd	stl/stl_function.h	/^  binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
binder2nd	stl/stl_function.h	/^class binder2nd$/;"	c	namespace:std	inherits:unary_function
bit_vector	stl/stl_bvector.h	/^typedef vector<bool, alloc> bit_vector;$/;"	t	namespace:std
bool	stl/stl_config.h	/^    typedef int bool;$/;"	t
bucket_count	stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_map	access:public	signature:() const
bucket_count	stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
bucket_count	stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
bucket_count	stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_set	access:public	signature:() const
bucket_count	stl/stl_hashtable.h	/^  size_type bucket_count() const { return _M_buckets.size(); }$/;"	f	class:std::hashtable	access:public	signature:() const
buf	stl/stl_algo.h	/^  _Temporary_buffer<_RandomAccessIter, _Tp> buf(__first, __last);$/;"	p	signature:(__first, __last)
c	stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:std::priority_queue	access:protected
c	stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:std::queue	access:protected
c	stl/stl_stack.h	/^  _Sequence c;$/;"	m	class:std::stack	access:protected
c_str	stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::c_str() const {$/;"	f	class:std::rope	signature:() const
c_str	stl/stl_rope.h	/^        const _CharT* c_str() const;$/;"	p	class:std::rope	access:public	signature:() const
capacity	stl/stl_bvector.h	/^  size_type capacity() const {$/;"	f	class:std::__BVECTOR	access:public	signature:() const
capacity	stl/stl_rope.h	/^            size_type capacity() const {$/;"	f	class:std::rope	access:public	signature:() const
capacity	stl/stl_vector.h	/^  size_type capacity() const$/;"	f	class:std::vector	access:public	signature:() const
char_producer	stl/stl_rope.h	/^class char_producer {$/;"	c	namespace:std
char_traits	stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<char> $/;"	c	namespace:std	inherits:__char_traits_base
char_traits	stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<wchar_t>$/;"	c	namespace:std	inherits:__char_traits_base
char_traits	stl/char_traits.h	/^template <class _CharT> class char_traits$/;"	c	namespace:std	inherits:__char_traits_base
char_type	stl/char_traits.h	/^  typedef _CharT char_type;$/;"	t	class:std::__char_traits_base	access:public
char_type	stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:std::istreambuf_iterator	access:public
char_type	stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:std::ostreambuf_iterator	access:public
char_type	stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:std::istream_iterator	access:public
char_type	stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:std::ostream_iterator	access:public
clear	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
clear	stl/stl_deque.h	/^  __STL_UNWIND(clear());$/;"	p	signature:()
clear	stl/stl_deque.h	/^  void clear(); $/;"	p	class:std::deque	access:public	signature:()
clear	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::clear()$/;"	f	class:std::deque	signature:()
clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_map	access:public	signature:()
clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_multiset	access:public	signature:()
clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_set	access:public	signature:()
clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
clear	stl/stl_hashtable.h	/^  _M_buckets.clear();$/;"	p	signature:()
clear	stl/stl_hashtable.h	/^  __STL_UNWIND(clear());$/;"	p	signature:()
clear	stl/stl_hashtable.h	/^  void clear();$/;"	p	class:std::hashtable	access:public	signature:()
clear	stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::clear()$/;"	f	class:std::hashtable	signature:()
clear	stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	f	class:std::list	access:public	signature:()
clear	stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	p	class:std::list::_Base	signature:()
clear	stl/stl_list.h	/^  void clear();$/;"	p	class:std::_List_base	access:public	signature:()
clear	stl/stl_list.h	/^_List_base<_Tp,_Alloc>::clear() $/;"	f	class:std::_List_base	signature:()
clear	stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::map	access:public	signature:()
clear	stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
clear	stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::multimap	access:public	signature:()
clear	stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
clear	stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::multiset	access:public	signature:()
clear	stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
clear	stl/stl_rope.h	/^        void clear()$/;"	f	class:std::rope	access:public	signature:()
clear	stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::set	access:public	signature:()
clear	stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
clear	stl/stl_slist.h	/^  void clear() { this->_M_erase_after(&this->_M_head, 0); }$/;"	f	class:std::slist	access:public	signature:()
clear	stl/stl_tree.h	/^  void clear() {$/;"	f	class:std::_Rb_tree	access:public	signature:()
clear	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:std::vector	access:public	signature:()
comp	stl/stl_map.h	/^    _Compare comp;$/;"	m	class:std::map::value_compare	access:protected
comp	stl/stl_multimap.h	/^    _Compare comp;$/;"	m	class:std::multimap::value_compare	access:protected
comp	stl/stl_queue.h	/^  _Compare comp;$/;"	m	class:std::priority_queue	access:protected
compare	stl/char_traits.h	/^  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s1, const _CharT* __s2, size_t __n)
compare	stl/char_traits.h	/^  static int compare(const char* __s1, const char* __s2, size_t __n) $/;"	f	class:std::char_traits	access:public	signature:(const char* __s1, const char* __s2, size_t __n)
compare	stl/stl_rope.h	/^        int compare(const rope& __y) const {$/;"	f	class:std::rope	access:public	signature:(const rope& __y) const
compose1	stl/stl_function.h	/^compose1(const _Operation1& __fn1, const _Operation2& __fn2)$/;"	f	namespace:std	signature:(const _Operation1& __fn1, const _Operation2& __fn2)
compose2	stl/stl_function.h	/^compose2(const _Operation1& __fn1, const _Operation2& __fn2, $/;"	f	namespace:std	signature:(const _Operation1& __fn1, const _Operation2& __fn2, const _Operation3& __fn3)
const_address	stl/defalloc.h	/^    const_pointer const_address(const_reference x) { $/;"	f	class:allocator	access:public	signature:(const_reference x)
const_begin	stl/stl_rope.h	/^        const_iterator const_begin() const {$/;"	f	class:std::rope	access:public	signature:() const
const_cast	stl/stl_hashtable.h	/^                 const_cast<hashtable*>(__last._M_ht)));$/;"	p	signature:(__last._M_ht)
const_cast	stl/stl_hashtable.h	/^        iterator(const_cast<_Node*>(__last._M_cur),$/;"	p	signature:(__last._M_cur)
const_end	stl/stl_rope.h	/^        const_iterator const_end() const {$/;"	f	class:std::rope	access:public	signature:() const
const_iter	stl/container_concepts.h	/^  _BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());$/;"	p	class:_ReversibleContainer_concept_specification::_BidirectionalIterator_concept_specification	signature:()
const_iter	stl/container_concepts.h	/^  _ForwardIterator_concept_specification<const_iter>::_ForwardIterator_requirement_violation(const_iter());$/;"	p	class:_ForwardContainer_concept_specification::_ForwardIterator_concept_specification	signature:()
const_iter	stl/container_concepts.h	/^  _InputIterator_concept_specification<const_iter>::_InputIterator_requirement_violation(const_iter());$/;"	p	class:_Container_concept_specification::_InputIterator_concept_specification	signature:()
const_iter	stl/container_concepts.h	/^  _RandomAccessIterator_concept_specification<const_iter>::_RandomAccessIterator_requirement_violation(const_iter());$/;"	p	class:_RandomAccessContainer_concept_specification::_RandomAccessIterator_concept_specification	signature:()
const_iter	stl/container_concepts.h	/^  __BidirectionalIterator_concept_specification<const_iter>::_BidirectionalIterator_requirement_violation(const_iter());$/;"	p	class:_const_ReversibleContainer_concept_specification::__BidirectionalIterator_concept_specification	signature:()
const_iter	stl/container_concepts.h	/^  typedef typename _Container::const_iterator const_iter;$/;"	t
const_iter	stl/container_concepts.h	/^  typedef typename _ForwardContainer::const_iterator const_iter;$/;"	t
const_iter	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::const_iterator const_iter;$/;"	t
const_iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::const_iterator const_iter;$/;"	t
const_iterator	stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_iterator);$/;"	v
const_iterator	stl/stl_bvector.h	/^  typedef _Bit_const_iterator          const_iterator;$/;"	t	class:std::__BVECTOR	access:public
const_iterator	stl/stl_bvector.h	/^  typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Deque_iterator	access:public
const_iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:std::_Deque_base	access:public
const_iterator	stl/stl_deque.h	/^  typedef typename _Base::const_iterator const_iterator;$/;"	t	class:std::deque	access:public
const_iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_map	access:public
const_iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_multimap	access:public
const_iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_multiset	access:public
const_iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_set	access:public
const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	class:std::hashtable	access:public
const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:std::_Hashtable_iterator	access:public
const_iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:std::list	access:public
const_iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	struct:std::_List_iterator	access:public
const_iterator	stl/stl_list.h	/^  typedef typename list<_Tp,_Alloc>::const_iterator const_iterator;$/;"	t
const_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::map	access:public
const_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_iterator const_iterator; $/;"	t	class:std::multimap	access:public
const_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::multiset	access:public
const_iterator	stl/stl_rope.h	/^        typedef _Rope_const_iterator<_CharT,_Alloc> const_iterator;$/;"	t	class:std::rope	access:public
const_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::set	access:public
const_iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:std::slist	access:public
const_iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Slist_iterator	access:public
const_iterator	stl/stl_slist.h	/^  typedef typename slist<_Tp,_Alloc>::const_iterator const_iterator;$/;"	t
const_iterator	stl/stl_tree.h	/^          const_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_iterator	stl/stl_tree.h	/^    const_iterator;$/;"	t	struct:std::_Rb_tree_iterator	access:public
const_iterator	stl/stl_vector.h	/^  typedef const value_type* const_iterator;$/;"	t	class:std::vector	access:public
const_mem_fun1_ref_t	stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_ref_t	stl/stl_function.h	/^class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
const_mem_fun1_ref_t	stl/stl_function.h	/^class const_mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	namespace:std	inherits:binary_function
const_mem_fun1_t	stl/stl_function.h	/^  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
const_mem_fun1_t	stl/stl_function.h	/^class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
const_mem_fun1_t	stl/stl_function.h	/^class const_mem_fun1_t<void, _Tp, _Arg> $/;"	c	namespace:std	inherits:binary_function
const_mem_fun_ref_t	stl/stl_function.h	/^  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_ref_t	stl/stl_function.h	/^class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	namespace:std	inherits:unary_function
const_mem_fun_ref_t	stl/stl_function.h	/^class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	namespace:std	inherits:unary_function
const_mem_fun_t	stl/stl_function.h	/^  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_t	access:public	signature:(void (_Tp::*__pf)() const)
const_mem_fun_t	stl/stl_function.h	/^class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {$/;"	c	namespace:std	inherits:unary_function
const_mem_fun_t	stl/stl_function.h	/^class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {$/;"	c	namespace:std	inherits:unary_function
const_pointer	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_pointer);$/;"	v
const_pointer	stl/defalloc.h	/^    typedef const T* const_pointer;$/;"	t	class:allocator	access:public
const_pointer	stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	access:public
const_pointer	stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	struct:std::__allocator	access:public
const_pointer	stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:__allocator	access:private
const_pointer	stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:std::allocator	access:public
const_pointer	stl/stl_bvector.h	/^  typedef const bool* const_pointer;$/;"	t	class:std::__BVECTOR	access:public
const_pointer	stl/stl_deque.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::deque	access:public
const_pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_map	access:public
const_pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_multimap	access:public
const_pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_multiset	access:public
const_pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_set	access:public
const_pointer	stl/stl_hashtable.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::hashtable	access:public
const_pointer	stl/stl_list.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::list	access:public
const_pointer	stl/stl_map.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::map	access:public
const_pointer	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::multimap	access:public
const_pointer	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::multiset	access:public
const_pointer	stl/stl_rope.h	/^        typedef const _CharT* const_pointer;$/;"	t	class:std::rope	access:public
const_pointer	stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::set	access:public
const_pointer	stl/stl_slist.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::slist	access:public
const_pointer	stl/stl_tree.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::_Rb_tree	access:public
const_pointer	stl/stl_vector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::vector	access:public
const_rbegin	stl/stl_rope.h	/^        const_reverse_iterator const_rbegin() const {$/;"	f	class:std::rope	access:public	signature:() const
const_reference	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(const_reference);$/;"	v
const_reference	stl/defalloc.h	/^    typedef const T& const_reference;$/;"	t	class:allocator	access:public
const_reference	stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	class:std::allocator	access:public
const_reference	stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	struct:std::__allocator	access:public
const_reference	stl/stl_bvector.h	/^  typedef bool                 const_reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
const_reference	stl/stl_bvector.h	/^  typedef bool const_reference;$/;"	t	class:std::__BVECTOR	access:public
const_reference	stl/stl_deque.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::deque	access:public
const_reference	stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_map	access:public
const_reference	stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_multimap	access:public
const_reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_multiset	access:public
const_reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_set	access:public
const_reference	stl/stl_hashtable.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::hashtable	access:public
const_reference	stl/stl_list.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::list	access:public
const_reference	stl/stl_map.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::map	access:public
const_reference	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::multimap	access:public
const_reference	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::multiset	access:public
const_reference	stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::priority_queue	access:public
const_reference	stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::queue	access:public
const_reference	stl/stl_rope.h	/^        typedef _CharT const_reference;$/;"	t	class:std::rope	access:public
const_reference	stl/stl_set.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::set	access:public
const_reference	stl/stl_slist.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::slist	access:public
const_reference	stl/stl_stack.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::stack	access:public
const_reference	stl/stl_tree.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::_Rb_tree	access:public
const_reference	stl/stl_vector.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::vector	access:public
const_rend	stl/stl_rope.h	/^        const_reverse_iterator const_rend() const {$/;"	f	class:std::rope	access:public	signature:() const
const_reverse_iterator	stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(const_reverse_iterator);$/;"	v
const_reverse_iterator	stl/stl_bvector.h	/^                           difference_type> const_reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
const_reverse_iterator	stl/stl_bvector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
const_reverse_iterator	stl/stl_deque.h	/^          const_reverse_iterator;$/;"	t	class:std::deque	access:public
const_reverse_iterator	stl/stl_deque.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::deque	access:public
const_reverse_iterator	stl/stl_list.h	/^          const_reverse_iterator;$/;"	t	class:std::list	access:public
const_reverse_iterator	stl/stl_list.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::list	access:public
const_reverse_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::map	access:public
const_reverse_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multimap	access:public
const_reverse_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multiset	access:public
const_reverse_iterator	stl/stl_rope.h	/^                                 difference_type>  const_reverse_iterator;$/;"	t	class:std::rope	access:public
const_reverse_iterator	stl/stl_rope.h	/^        typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::rope	access:public
const_reverse_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::set	access:public
const_reverse_iterator	stl/stl_tree.h	/^          const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_reverse_iterator	stl/stl_tree.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
const_reverse_iterator	stl/stl_vector.h	/^                           difference_type>  const_reverse_iterator;$/;"	t	class:std::vector	access:public
const_reverse_iterator	stl/stl_vector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::vector	access:public
constant0	stl/stl_function.h	/^inline constant_void_fun<_Result> constant0(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
constant1	stl/stl_function.h	/^inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
constant2	stl/stl_function.h	/^constant2(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
constant_binary_fun	stl/stl_function.h	/^  constant_binary_fun(const _Result& __v)$/;"	f	struct:std::constant_binary_fun	access:public	signature:(const _Result& __v)
constant_binary_fun	stl/stl_function.h	/^struct constant_binary_fun$/;"	s	namespace:std	inherits:_Constant_binary_fun
constant_unary_fun	stl/stl_function.h	/^  constant_unary_fun(const _Result& __v)$/;"	f	struct:std::constant_unary_fun	access:public	signature:(const _Result& __v)
constant_unary_fun	stl/stl_function.h	/^struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>$/;"	s	namespace:std	inherits:_Constant_unary_fun
constant_void_fun	stl/stl_function.h	/^  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}$/;"	f	struct:std::constant_void_fun	access:public	signature:(const _Result& __v)
constant_void_fun	stl/stl_function.h	/^struct constant_void_fun : public _Constant_void_fun<_Result> {$/;"	s	namespace:std	inherits:_Constant_void_fun
construct	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:std::allocator	access:public	signature:(pointer __p, const _Tp& __val)
construct	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	namespace:std	signature:(pointer __p, const _Tp& __val)
construct	stl/stl_construct.h	/^inline void construct(_T1* __p) {$/;"	f	namespace:std	signature:(_T1* __p)
construct	stl/stl_construct.h	/^inline void construct(_T1* __p, const _T2& __value) {$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
container	stl/stl_hash_map.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
container	stl/stl_hash_set.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::back_insert_iterator	access:protected
container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::front_insert_iterator	access:protected
container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
container	stl/stl_rope.h	/^    rope<_CharT,_Alloc>& container() { return *_M_root_rope; }$/;"	f	class:std::_Rope_iterator	access:public	signature:()
container	stl/stl_slist.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
container_type	stl/stl_hash_map.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	stl/stl_hash_set.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	access:public
container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	access:public
container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::priority_queue	access:public
container_type	stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::queue	access:public
container_type	stl/stl_slist.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	stl/stl_stack.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::stack	access:public
copy	stl/char_traits.h	/^  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
copy	stl/stl_algobase.h	/^  static _BidirectionalIter2 copy(_BidirectionalIter1 __first, $/;"	f	struct:std::__copy_backward_dispatch	access:public	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result)
copy	stl/stl_algobase.h	/^  static _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	struct:std::__copy_dispatch	access:public	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
copy	stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:std::__copy_backward_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
copy	stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:std::__copy_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
copy	stl/stl_algobase.h	/^inline _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
copy	stl/stl_bvector.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:(__first, __last, begin())
copy	stl/stl_deque.h	/^        erase(copy(__x.begin(), __x.end(), _M_start), _M_finish);$/;"	p	signature:(__x.begin(), __x.end(), _M_start)
copy	stl/stl_deque.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:(__first, __last, begin())
copy	stl/stl_rope.h	/^              size_type copy(_CharT* __buffer, size_type __n, $/;"	f	class:std::rope	access:public	signature:(_CharT* __buffer, size_type __n, size_type __pos = 0) const
copy	stl/stl_rope.h	/^        size_type copy(size_type __pos, size_type __n, _CharT* __buffer) const $/;"	f	class:std::rope	access:public	signature:(size_type __pos, size_type __n, _CharT* __buffer) const
copy	stl/stl_rope.h	/^        void copy(_CharT* __buffer) const {$/;"	f	class:std::rope	access:public	signature:(_CharT* __buffer) const
copy_backward	stl/stl_algobase.h	/^inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
copy_n	stl/stl_algobase.h	/^copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result)
count	stl/stl_algo.h	/^count(_InputIter __first, _InputIter __last, const _Tp& __value) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __value)
count	stl/stl_algo.h	/^void count(_InputIter __first, _InputIter __last, const _Tp& __value,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __value, _Size& __n)
count	stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
count	stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
count	stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
count	stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
count	stl/stl_hashtable.h	/^  size_type count(const key_type& __key) const$/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key) const
count	stl/stl_map.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
count	stl/stl_multimap.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
count	stl/stl_multiset.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
count	stl/stl_set.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
count	stl/stl_tree.h	/^  ::count(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
count	stl/stl_tree.h	/^  size_type count(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
count_if	stl/stl_algo.h	/^count_if(_InputIter __first, _InputIter __last, _Predicate __pred) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
count_if	stl/stl_algo.h	/^void count_if(_InputIter __first, _InputIter __last, _Predicate __pred,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, _Size& __n)
crope	stl/stl_rope.h	/^typedef rope<char> crope;$/;"	t	namespace:std
current	stl/stl_iterator.h	/^  _BidirectionalIterator current;$/;"	m	class:std::reverse_bidirectional_iterator	access:protected
current	stl/stl_iterator.h	/^  _Iterator current;$/;"	m	class:std::reverse_iterator	access:protected
current	stl/stl_iterator.h	/^  _RandomAccessIterator current;$/;"	m	class:std::reverse_iterator	access:protected
data_type	stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:std::hash_map	access:public
data_type	stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:std::hash_multimap	access:public
data_type	stl/stl_map.h	/^  typedef _Tp                   data_type;$/;"	t	class:std::map	access:public
data_type	stl/stl_multimap.h	/^  typedef _Tp                   data_type;$/;"	t	class:std::multimap	access:public
deallocate	stl/defalloc.h	/^    void deallocate(pointer p) { ::deallocate(p); }$/;"	f	class:allocator	access:public	signature:(pointer p)
deallocate	stl/defalloc.h	/^inline void deallocate(T* buffer) {$/;"	f	signature:(T* buffer)
deallocate	stl/ropeimpl.h	/^                  alloc::deallocate(__buffer, __len * sizeof(_CharT));$/;"	p	class:std::alloc	signature:(__buffer, __len * sizeof(_CharT))
deallocate	stl/ropeimpl.h	/^        __a.deallocate($/;"	p	signature:( __s, _Rope_RopeLeaf<_CharT,_Alloc>::_S_rounded_up_size(__n))
deallocate	stl/stl_alloc.h	/^      malloc_alloc::deallocate(__p, __n);$/;"	p	class:std::__default_alloc_template::malloc_alloc	signature:(__p, __n)
deallocate	stl/stl_alloc.h	/^      { _Alloc::deallocate(__p, sizeof (_Tp)); }$/;"	p	class:std::simple_alloc::_Alloc	signature:(__p, sizeof (_Tp))
deallocate	stl/stl_alloc.h	/^      { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }$/;"	p	class:std::simple_alloc::_Alloc	signature:(__p, __n * sizeof (_Tp))
deallocate	stl/stl_alloc.h	/^    _Alloc::deallocate(__real_p, __n + (int) _S_extra);$/;"	p	class:std::debug_alloc::_Alloc	signature:(__real_p, __n + (int) _S_extra)
deallocate	stl/stl_alloc.h	/^    static void deallocate(_Tp* __p)$/;"	f	class:std::simple_alloc	access:public	signature:(_Tp* __p)
deallocate	stl/stl_alloc.h	/^    static void deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::simple_alloc	access:public	signature:(_Tp* __p, size_t __n)
deallocate	stl/stl_alloc.h	/^    { _Alloc::deallocate(__p, __n * sizeof(_Tp)); }$/;"	p	class:std::allocator::_Alloc	signature:(__p, __n * sizeof(_Tp))
deallocate	stl/stl_alloc.h	/^    { __underlying_alloc.deallocate(__p, __n * sizeof(_Tp)); }$/;"	p	signature:(__p, __n * sizeof(_Tp))
deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t \/* __n *\/)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void* __p, size_t )
deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:std::__default_alloc_template	access:public	signature:(void* __p, size_t __n)
deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:std::debug_alloc	access:public	signature:(void* __p, size_t __n)
deallocate	stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:std::allocator	access:public	signature:(pointer __p, size_type __n)
deallocate	stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	namespace:std	signature:(pointer __p, size_type __n)
deallocate	stl/stl_bvector.h	/^      _Alloc_type::deallocate(_M_start._M_p,$/;"	p	class:std::_Bvector_alloc_base::_Alloc_type	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
deallocate	stl/stl_bvector.h	/^      _Alloc_type::deallocate(_M_start._M_p,$/;"	p	class:std::_Bvector_base::_Alloc_type	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
deallocate	stl/stl_bvector.h	/^      _M_data_allocator.deallocate(_M_start._M_p, $/;"	p	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
deallocate	stl/stl_deque.h	/^    _M_node_allocator.deallocate(__p, __deque_buf_size(sizeof(_Tp)));$/;"	p	signature:(__p, __deque_buf_size(sizeof(_Tp)))
deallocate	stl/stl_deque.h	/^    _Node_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));$/;"	p	class:std::_Deque_alloc_base::_Node_alloc_type	signature:(__p, __deque_buf_size(sizeof(_Tp)))
deallocate	stl/stl_deque.h	/^    { _M_map_allocator.deallocate(__p, __n); }$/;"	p	signature:(__p, __n)
deallocate	stl/stl_deque.h	/^    { _Map_alloc_type::deallocate(__p, __n); }$/;"	p	class:std::_Deque_alloc_base::_Map_alloc_type	signature:(__p, __n)
deallocate	stl/stl_deque.h	/^    { _Map_alloc_type::deallocate(__p, __n); }$/;"	p	class:std::_Deque_base::_Map_alloc_type	signature:(__p, __n)
deallocate	stl/stl_deque.h	/^    { _Node_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp))); }$/;"	p	class:std::_Deque_base::_Node_alloc_type	signature:(__p, __deque_buf_size(sizeof(_Tp)))
deallocate	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
deallocate	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	p	class:std::hashtable::_M_node_allocator_type	signature:(__p, 1)
deallocate	stl/stl_list.h	/^    { _Node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
deallocate	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	p	class:std::_List_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_List_alloc_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_slist.h	/^    { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
deallocate	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Slist_alloc_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Slist_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_tree.h	/^    { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Rb_tree_alloc_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_tree.h	/^    { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Rb_tree_base::_Alloc_type	signature:(__p, 1)
deallocate	stl/stl_tree.h	/^    { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
deallocate	stl/stl_vector.h	/^    { _Alloc_type::deallocate(__p, __n);}$/;"	p	class:std::_Vector_alloc_base::_Alloc_type	signature:(__p, __n)
deallocate	stl/stl_vector.h	/^    { if (__p) _M_data_allocator.deallocate(__p, __n); }$/;"	p	signature:(__p, __n)
debug_alloc	stl/stl_alloc.h	/^class debug_alloc {$/;"	c	namespace:std
delete_c_str	stl/stl_rope.h	/^        void delete_c_str () {$/;"	f	class:std::rope	access:public	signature:()
deque	stl/stl_deque.h	/^  deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^  deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) $/;"	f	class:std::deque	access:public	signature:(const deque& __x)
deque	stl/stl_deque.h	/^  deque(const value_type* __first, const value_type* __last,$/;"	f	class:std::deque	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^  deque(const_iterator __first, const_iterator __last,$/;"	f	class:std::deque	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^  deque(size_type __n, const value_type& __value,$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __value, const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^  explicit deque(const allocator_type& __a = allocator_type()) $/;"	f	class:std::deque	access:public	signature:(const allocator_type& __a = allocator_type())
deque	stl/stl_deque.h	/^  explicit deque(size_type __n) : _Base(allocator_type(), __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
deque	stl/stl_deque.h	/^class deque : protected _Deque_base<_Tp, _Alloc> {$/;"	c	namespace:std	inherits:_Deque_base
destroy	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:std::allocator	access:public	signature:(pointer __p)
destroy	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	namespace:std	signature:(pointer __p)
destroy	stl/stl_construct.h	/^inline void destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
destroy	stl/stl_construct.h	/^inline void destroy(_Tp* __pointer) {$/;"	f	namespace:std	signature:(_Tp* __pointer)
destroy	stl/stl_deque.h	/^  __STL_UNWIND(destroy(_M_start, iterator(*__cur, __cur)));$/;"	p	signature:(_M_start, iterator(*__cur, __cur))
destroy	stl/stl_deque.h	/^  __STL_UNWIND(destroy(_M_start, iterator(*__cur_node, __cur_node)));$/;"	p	signature:(_M_start, iterator(*__cur_node, __cur_node))
destroy_node	stl/stl_tree.h	/^  void destroy_node(_Link_type __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __p)
difference_type	stl/concept_checks.h	/^          difference_type;$/;"	t	struct:__difference_type_type_definition_requirement_violation	access:public
difference_type	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(difference_type);$/;"	v
difference_type	stl/defalloc.h	/^    typedef ptrdiff_t difference_type;$/;"	t	class:allocator	access:public
difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:__allocator	access:private
difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	access:public
difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	access:public
difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::__allocator	access:public
difference_type	stl/stl_bvector.h	/^  typedef ptrdiff_t difference_type; $/;"	t	class:std::__BVECTOR	access:public
difference_type	stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::deque	access:public
difference_type	stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Deque_iterator	access:public
difference_type	stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_map	access:public
difference_type	stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_multimap	access:public
difference_type	stl/stl_hash_map.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
difference_type	stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_multiset	access:public
difference_type	stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_set	access:public
difference_type	stl/stl_hash_set.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:std::hashtable	access:public
difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
difference_type	stl/stl_iterator.h	/^          difference_type;$/;"	t	class:std::reverse_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef _Dist                          difference_type;$/;"	t	class:std::istream_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef _Dist               difference_type;$/;"	t	class:std::istream_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:std::reverse_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef void                           difference_type;$/;"	t	class:std::ostream_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::back_insert_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::front_insert_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::ostream_iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:std::bidirectional_iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:std::random_access_iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef _Distance            difference_type;$/;"	t	struct:std::forward_iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef _Distance          difference_type;$/;"	t	struct:std::input_iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef _Distance  difference_type;$/;"	t	struct:std::iterator	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	access:public
difference_type	stl/stl_iterator_base.h	/^  typedef void                difference_type;$/;"	t	struct:std::output_iterator	access:public
difference_type	stl/stl_list.h	/^  typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_List_iterator_base	access:public
difference_type	stl/stl_list.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::list	access:public
difference_type	stl/stl_map.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::map	access:public
difference_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::multimap	access:public
difference_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::multiset	access:public
difference_type	stl/stl_raw_storage_iter.h	/^  typedef void                difference_type;$/;"	t	class:std::raw_storage_iterator	access:public
difference_type	stl/stl_rope.h	/^        typedef ptrdiff_t difference_type;$/;"	t	class:std::rope	access:public
difference_type	stl/stl_set.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::set	access:public
difference_type	stl/stl_slist.h	/^  typedef ptrdiff_t            difference_type;$/;"	t	struct:std::_Slist_iterator_base	access:public
difference_type	stl/stl_slist.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:std::slist	access:public
difference_type	stl/stl_slist.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
difference_type	stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::_Rb_tree	access:public
difference_type	stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
difference_type	stl/stl_vector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::vector	access:public
distance	stl/stl_iterator_base.h	/^distance(_InputIterator __first, _InputIterator __last) {$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last)
distance	stl/stl_iterator_base.h	/^inline void distance(_InputIterator __first, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n)
distance_type	stl/stl_deque.h	/^inline ptrdiff_t* distance_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) {$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
distance_type	stl/stl_hashtable.h	/^distance_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
distance_type	stl/stl_hashtable.h	/^distance_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
distance_type	stl/stl_iterator.h	/^distance_type(const istream_iterator<_Tp, _Dist>&) { return (_Dist*)0; }$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
distance_type	stl/stl_iterator.h	/^distance_type(const reverse_bidirectional_iterator<_BidirectionalIterator, $/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
distance_type	stl/stl_iterator.h	/^distance_type(const reverse_iterator<_RandomAccessIterator, $/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
distance_type	stl/stl_iterator_base.h	/^distance_type(const _Iter& __i) { return __distance_type(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
distance_type	stl/stl_iterator_base.h	/^distance_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
distance_type	stl/stl_iterator_base.h	/^distance_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
distance_type	stl/stl_iterator_base.h	/^inline _Distance* distance_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
distance_type	stl/stl_iterator_base.h	/^inline _Distance* distance_type(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
distance_type	stl/stl_iterator_base.h	/^inline ptrdiff_t* distance_type(const _Tp*) { return (ptrdiff_t*)(0); }$/;"	f	namespace:std	signature:(const _Tp*)
distance_type	stl/stl_list.h	/^distance_type(const _List_iterator_base&)$/;"	f	namespace:std	signature:(const _List_iterator_base&)
distance_type	stl/stl_slist.h	/^inline ptrdiff_t* distance_type(const _Slist_iterator_base&) {$/;"	f	namespace:std	signature:(const _Slist_iterator_base&)
distance_type	stl/stl_tree.h	/^distance_type(const _Rb_tree_base_iterator&) {$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator&)
divides	stl/stl_function.h	/^struct divides : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
dump	stl/stl_rope.h	/^        void dump() {$/;"	f	class:std::rope	access:public	signature:()
elems_in_bucket	stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_map	access:public	signature:(size_type __n) const
elems_in_bucket	stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n) const
elems_in_bucket	stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n) const
elems_in_bucket	stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_set	access:public	signature:(size_type __n) const
elems_in_bucket	stl/stl_hashtable.h	/^  size_type elems_in_bucket(size_type __bucket) const$/;"	f	class:std::hashtable	access:public	signature:(size_type __bucket) const
empty	stl/container_concepts.h	/^    __c.empty();$/;"	p	signature:()
empty	stl/stl_bvector.h	/^  bool empty() const { return begin() == end(); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
empty	stl/stl_deque.h	/^  bool empty() const { return _M_finish == _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
empty	stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_map	access:public	signature:() const
empty	stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
empty	stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
empty	stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_set	access:public	signature:() const
empty	stl/stl_hashtable.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:std::hashtable	access:public	signature:() const
empty	stl/stl_list.h	/^  bool empty() const { return _M_node->_M_next == _M_node; }$/;"	f	class:std::list	access:public	signature:() const
empty	stl/stl_map.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::map	access:public	signature:() const
empty	stl/stl_multimap.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::multimap	access:public	signature:() const
empty	stl/stl_multiset.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::multiset	access:public	signature:() const
empty	stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
empty	stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::queue	access:public	signature:() const
empty	stl/stl_rope.h	/^        bool empty() const { return 0 == _M_tree_ptr; }$/;"	f	class:std::rope	access:public	signature:() const
empty	stl/stl_set.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::set	access:public	signature:() const
empty	stl/stl_slist.h	/^  bool empty() const { return this->_M_head._M_next == 0; }$/;"	f	class:std::slist	access:public	signature:() const
empty	stl/stl_stack.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::stack	access:public	signature:() const
empty	stl/stl_tree.h	/^  bool empty() const { return _M_node_count == 0; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
empty	stl/stl_vector.h	/^  bool empty() const$/;"	f	class:std::vector	access:public	signature:() const
end	stl/container_concepts.h	/^    __c.end();$/;"	p	signature:()
end	stl/stl_bvector.h	/^      _M_insert_aux(end(), __x);$/;"	p	signature:()
end	stl/stl_bvector.h	/^      erase(begin() + difference_type(__new_size), end());$/;"	p	signature:()
end	stl/stl_bvector.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:()
end	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	p	signature:()
end	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	p	signature:()
end	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	p	signature:()
end	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
end	stl/stl_bvector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
end	stl/stl_bvector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
end	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
end	stl/stl_deque.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:()
end	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	p	signature:()
end	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	p	signature:()
end	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	p	signature:()
end	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	p	signature:()
end	stl/stl_deque.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::deque	access:public	signature:() const
end	stl/stl_deque.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::deque	access:public	signature:()
end	stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_map	access:public	signature:() const
end	stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
end	stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:std::hash_map	access:public	signature:()
end	stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
end	stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
end	stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_set	access:public	signature:() const
end	stl/stl_hashtable.h	/^  const_iterator end() const { return const_iterator(0, this); }$/;"	f	class:std::hashtable	access:public	signature:() const
end	stl/stl_hashtable.h	/^  iterator end() { return iterator(0, this); }$/;"	f	class:std::hashtable	access:public	signature:()
end	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	p	signature:()
end	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	p	signature:()
end	stl/stl_list.h	/^    insert(end(), __new_size - __len, __x);$/;"	p	signature:()
end	stl/stl_list.h	/^    { insert(begin(), __x.begin(), __x.end()); }$/;"	p	signature:()
end	stl/stl_list.h	/^  const_iterator end() const { return _M_node; }$/;"	f	class:std::list	access:public	signature:() const
end	stl/stl_list.h	/^  iterator end()             { return _M_node; }$/;"	f	class:std::list	access:public	signature:()
end	stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	p	signature:()
end	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	p	signature:()
end	stl/stl_map.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:std::map	access:public	signature:() const
end	stl/stl_map.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:std::map	access:public	signature:()
end	stl/stl_multimap.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:std::multimap	access:public	signature:() const
end	stl/stl_multimap.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:std::multimap	access:public	signature:()
end	stl/stl_multiset.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:std::multiset	access:public	signature:() const
end	stl/stl_rope.h	/^            const_iterator end() { return const_end(); }$/;"	f	class:std::rope	access:public	signature:()
end	stl/stl_rope.h	/^            iterator end() { return mutable_end(); }$/;"	f	class:std::rope	access:public	signature:()
end	stl/stl_rope.h	/^        const_iterator end() const {$/;"	f	class:std::rope	access:public	signature:() const
end	stl/stl_set.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:std::set	access:public	signature:() const
end	stl/stl_slist.h	/^  const_iterator end() const { return const_iterator(0); }$/;"	f	class:std::slist	access:public	signature:() const
end	stl/stl_slist.h	/^  iterator end() { return iterator(0); }$/;"	f	class:std::slist	access:public	signature:()
end	stl/stl_tempbuf.h	/^  _Tp* end() { return _M_buffer + _M_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
end	stl/stl_tree.h	/^  const_iterator end() const { return _M_header; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
end	stl/stl_tree.h	/^  iterator end() { return _M_header; }$/;"	f	class:std::_Rb_tree	access:public	signature:()
end	stl/stl_vector.h	/^      _M_insert_aux(end());$/;"	p	signature:()
end	stl/stl_vector.h	/^      _M_insert_aux(end(), __x);$/;"	p	signature:()
end	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
end	stl/stl_vector.h	/^    destroy(begin(), end());$/;"	p	signature:()
end	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	p	signature:()
end	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	p	signature:()
end	stl/stl_vector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::vector	access:public	signature:() const
end	stl/stl_vector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::vector	access:public	signature:()
end	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
endl	stl/defalloc.h	/^	cerr << "out of memory" << endl; $/;"	l
eof	stl/char_traits.h	/^  static int_type eof() {$/;"	f	class:std::__char_traits_base	access:public	signature:()
eq	stl/char_traits.h	/^  static bool eq(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
eq_int_type	stl/char_traits.h	/^  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c1, const int_type& __c2)
equal	stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
equal	stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
equal	stl/stl_iterator.h	/^  bool equal(const istreambuf_iterator& __i) const {$/;"	f	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator& __i) const
equal_range	stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
equal_range	stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
equal_range	stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
equal_range	stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
equal_range	stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
equal_range	stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
equal_range	stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
equal_range	stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
equal_range	stl/stl_hashtable.h	/^  ::equal_range(const key_type& __key) const$/;"	f	class:std::hashtable	signature:(const key_type& __key) const
equal_range	stl/stl_hashtable.h	/^  equal_range(const key_type& __key) const;$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key) const
equal_range	stl/stl_hashtable.h	/^  equal_range(const key_type& __key);$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key)
equal_range	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::equal_range(const key_type& __key)$/;"	f	class:std::hashtable	signature:(const key_type& __key)
equal_range	stl/stl_map.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_map.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
equal_range	stl/stl_multimap.h	/^   pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
equal_range	stl/stl_multimap.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_multiset.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_set.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_tree.h	/^  ::equal_range(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
equal_range	stl/stl_tree.h	/^  ::equal_range(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
equal_range	stl/stl_tree.h	/^  pair<const_iterator, const_iterator> equal_range(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
equal_range	stl/stl_tree.h	/^  pair<iterator,iterator> equal_range(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
equal_to	stl/stl_function.h	/^struct equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
erase	stl/stl_bvector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_bvector.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position)
erase	stl/stl_deque.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:std::deque	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_deque.h	/^  iterator erase(iterator __pos) {$/;"	f	class:std::deque	access:public	signature:(iterator __pos)
erase	stl/stl_deque.h	/^deque<_Tp,_Alloc>::erase(iterator __first, iterator __last)$/;"	f	class:std::deque	signature:(iterator __first, iterator __last)
erase	stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
erase	stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_map	access:public	signature:(iterator __f, iterator __l)
erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_multimap	access:public	signature:(iterator __f, iterator __l)
erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_map	access:public	signature:(iterator __it)
erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_multimap	access:public	signature:(iterator __it)
erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
erase	stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key)
erase	stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key)
erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_multiset	access:public	signature:(iterator __f, iterator __l)
erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_set	access:public	signature:(iterator __f, iterator __l)
erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_multiset	access:public	signature:(iterator __it)
erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_set	access:public	signature:(iterator __it)
erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
erase	stl/stl_hashtable.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:std::hashtable	signature:(iterator __first, iterator __last)
erase	stl/stl_hashtable.h	/^  size_type erase(const key_type& __key);$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key)
erase	stl/stl_hashtable.h	/^  void erase(const const_iterator& __it);$/;"	p	class:std::hashtable	access:public	signature:(const const_iterator& __it)
erase	stl/stl_hashtable.h	/^  void erase(const iterator& __it);$/;"	p	class:std::hashtable	access:public	signature:(const iterator& __it)
erase	stl/stl_hashtable.h	/^  void erase(const_iterator __first, const_iterator __last);$/;"	p	class:std::hashtable	access:public	signature:(const_iterator __first, const_iterator __last)
erase	stl/stl_hashtable.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:std::hashtable	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const const_iterator& __it)$/;"	f	class:std::hashtable	signature:(const const_iterator& __it)
erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const key_type& __key)$/;"	f	class:std::hashtable	signature:(const key_type& __key)
erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const_iterator __first,$/;"	f	class:std::hashtable	signature:(const_iterator __first, const_iterator __last)
erase	stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const iterator& __it)$/;"	f	class:std::hashtable	signature:(const iterator& __it)
erase	stl/stl_list.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:std::list	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_list.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::list	access:public	signature:(iterator __position)
erase	stl/stl_list.h	/^typename list<_Tp,_Alloc>::iterator list<_Tp, _Alloc>::erase(iterator __first, $/;"	f	class:std::list	signature:(iterator __first, iterator __last)
erase	stl/stl_map.h	/^    { _M_t.erase(__first, __last); }$/;"	p	signature:(__first, __last)
erase	stl/stl_map.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
erase	stl/stl_map.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:std::map	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:std::map	access:public	signature:(iterator __position)
erase	stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	p	signature:(__position)
erase	stl/stl_multimap.h	/^    { _M_t.erase(__first, __last); }$/;"	p	signature:(__first, __last)
erase	stl/stl_multimap.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
erase	stl/stl_multimap.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:std::multimap	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:std::multimap	access:public	signature:(iterator __position)
erase	stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	p	signature:(__position)
erase	stl/stl_multiset.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
erase	stl/stl_multiset.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:std::multiset	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_multiset.h	/^  void erase(iterator __position) { $/;"	f	class:std::multiset	access:public	signature:(iterator __position)
erase	stl/stl_rope.h	/^        iterator erase(const iterator& __p) {$/;"	f	class:std::rope	access:public	signature:(const iterator& __p)
erase	stl/stl_rope.h	/^        iterator erase(const iterator& __p, const iterator& __q) {$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q)
erase	stl/stl_rope.h	/^        void erase(size_t __p) {$/;"	f	class:std::rope	access:public	signature:(size_t __p)
erase	stl/stl_rope.h	/^        void erase(size_t __p, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n)
erase	stl/stl_set.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:std::set	access:public	signature:(const key_type& __x)
erase	stl/stl_set.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:std::set	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_set.h	/^  void erase(iterator __position) { $/;"	f	class:std::set	access:public	signature:(iterator __position)
erase	stl/stl_slist.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_slist.h	/^  iterator erase(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
erase	stl/stl_tree.h	/^  ::erase(const _Key* __first, const _Key* __last) $/;"	f	class:std::_Rb_tree	signature:(const _Key* __first, const _Key* __last)
erase	stl/stl_tree.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:std::_Rb_tree	signature:(iterator __first, iterator __last)
erase	stl/stl_tree.h	/^  ::erase(iterator __position)$/;"	f	class:std::_Rb_tree	signature:(iterator __position)
erase	stl/stl_tree.h	/^  size_type erase(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
erase	stl/stl_tree.h	/^  void erase(const key_type* __first, const key_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
erase	stl/stl_tree.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_tree.h	/^  void erase(iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position)
erase	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __x)
erase	stl/stl_vector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::vector	access:public	signature:(iterator __first, iterator __last)
erase	stl/stl_vector.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::vector	access:public	signature:(iterator __position)
erase_after	stl/stl_slist.h	/^  iterator erase_after(iterator __before_first, iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __before_first, iterator __last)
erase_after	stl/stl_slist.h	/^  iterator erase_after(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
explicit	stl/stl_config.h	449;"	d
failed	stl/stl_iterator.h	/^  bool failed() const { return !_M_ok; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:() const
false	stl/stl_config.h	429;"	d
fill	stl/stl_algobase.h	/^inline void fill(char* __first, char* __last, const char& __c) {$/;"	f	namespace:std	signature:(char* __first, char* __last, const char& __c)
fill	stl/stl_algobase.h	/^inline void fill(signed char* __first, signed char* __last,$/;"	f	namespace:std	signature:(signed char* __first, signed char* __last, const signed char& __c)
fill	stl/stl_algobase.h	/^inline void fill(unsigned char* __first, unsigned char* __last,$/;"	f	namespace:std	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
fill	stl/stl_algobase.h	/^void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
fill_n	stl/stl_algobase.h	/^_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {$/;"	f	namespace:std	signature:(_OutputIter __first, _Size __n, const _Tp& __value)
fill_n	stl/stl_algobase.h	/^inline char* fill_n(char* __first, _Size __n, const char& __c) {$/;"	f	namespace:std	signature:(char* __first, _Size __n, const char& __c)
fill_n	stl/stl_algobase.h	/^inline signed char* fill_n(char* __first, _Size __n,$/;"	f	namespace:std	signature:(char* __first, _Size __n, const signed char& __c)
fill_n	stl/stl_algobase.h	/^inline unsigned char* fill_n(unsigned char* __first, _Size __n,$/;"	f	namespace:std	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
find	stl/char_traits.h	/^  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c)$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s, size_t __n, const _CharT& __c)
find	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::find(_CharT __pattern, size_t __start) const$/;"	f	class:std::rope	signature:(_CharT __pattern, size_t __start) const
find	stl/stl_algo.h	/^_RandomAccessIter find(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, const _Tp& __val, random_access_iterator_tag)
find	stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __val)
find	stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __val, input_iterator_tag)
find	stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
find	stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
find	stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
find	stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
find	stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
find	stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
find	stl/stl_hashtable.h	/^  const_iterator find(const key_type& __key) const$/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key) const
find	stl/stl_hashtable.h	/^  iterator find(const key_type& __key) $/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key)
find	stl/stl_map.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
find	stl/stl_map.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
find	stl/stl_multimap.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
find	stl/stl_multimap.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
find	stl/stl_multiset.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
find	stl/stl_rope.h	/^        size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:std::rope	access:public	signature:(_CharT __c, size_type __pos = 0) const
find	stl/stl_rope.h	/^        size_type find(const _CharT* __s, size_type __pos = 0) const {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
find	stl/stl_set.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
find	stl/stl_tree.h	/^  const_iterator find(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
find	stl/stl_tree.h	/^  iterator find(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
find	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
find	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
find_end	stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
find_end	stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPredicate __comp)
find_first_of	stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2)
find_first_of	stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, _BinaryPredicate __comp)
find_if	stl/stl_algo.h	/^_RandomAccessIter find_if(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Predicate __pred, random_access_iterator_tag)
find_if	stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
find_if	stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, input_iterator_tag)
find_or_insert	stl/stl_hashtable.h	/^  reference find_or_insert(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
find_or_insert	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::find_or_insert(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
first	stl/stl_pair.h	/^  _T1 first;$/;"	m	struct:std::pair	access:public
first_argument_type	stl/stl_function.h	/^  typedef  _Arg1   first_argument_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
first_argument_type	stl/stl_function.h	/^  typedef _Arg1 first_argument_type;$/;"	t	struct:std::binary_function	access:public
first_type	stl/stl_pair.h	/^  typedef _T1 first_type;$/;"	t	struct:std::pair	access:public
flip	stl/stl_bvector.h	/^  void flip() { *_M_p ^= _M_mask; }$/;"	f	struct:std::_Bit_reference	access:public	signature:()
flip	stl/stl_bvector.h	/^  void flip() {$/;"	f	class:std::__BVECTOR	access:public	signature:()
flush	stl/stl_rope.h	/^            __x.flush();$/;"	p	signature:()
flush	stl/stl_rope.h	/^        void flush() {$/;"	f	class:std::sequence_buffer	access:public	signature:()
for_each	stl/stl_algo.h	/^_Function for_each(_InputIter __first, _InputIter __last, _Function __f) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Function __f)
forward_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct forward_iterator {$/;"	s	namespace:std
forward_iterator_tag	stl/stl_iterator_base.h	/^struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	namespace:std	inherits:input_iterator_tag
free	stl/stl_tempbuf.h	/^    __STL_UNWIND(free(_M_buffer); _M_buffer = 0; _M_len = 0);$/;"	p	signature:(_M_buffer)
front	stl/stl_bvector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
front	stl/stl_bvector.h	/^  reference front() { return *begin(); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
front	stl/stl_deque.h	/^    push_front(front());$/;"	p	signature:()
front	stl/stl_deque.h	/^  const_reference front() const { return *_M_start; }$/;"	f	class:std::deque	access:public	signature:() const
front	stl/stl_deque.h	/^  reference front() { return *_M_start; }$/;"	f	class:std::deque	access:public	signature:()
front	stl/stl_list.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::list	access:public	signature:() const
front	stl/stl_list.h	/^  reference front() { return *begin(); }$/;"	f	class:std::list	access:public	signature:()
front	stl/stl_queue.h	/^  const_reference front() const { return c.front(); }$/;"	f	class:std::queue	access:public	signature:() const
front	stl/stl_queue.h	/^  reference front() { return c.front(); }$/;"	f	class:std::queue	access:public	signature:()
front	stl/stl_rope.h	/^        _CharT front() const$/;"	f	class:std::rope	access:public	signature:() const
front	stl/stl_slist.h	/^  const_reference front() const $/;"	f	class:std::slist	access:public	signature:() const
front	stl/stl_slist.h	/^  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }$/;"	f	class:std::slist	access:public	signature:()
front	stl/stl_vector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::vector	access:public	signature:() const
front	stl/stl_vector.h	/^  reference front() { return *begin(); }$/;"	f	class:std::vector	access:public	signature:()
front_insert_iterator	stl/stl_iterator.h	/^  explicit front_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::front_insert_iterator	access:public	signature:(_Container& __x)
front_insert_iterator	stl/stl_iterator.h	/^class front_insert_iterator {$/;"	c	namespace:std
front_inserter	stl/stl_iterator.h	/^inline front_insert_iterator<_Container> front_inserter(_Container& __x) {$/;"	f	namespace:std	signature:(_Container& __x)
generate	stl/stl_algo.h	/^void generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Generator __gen)
generate_n	stl/stl_algo.h	/^_OutputIter generate_n(_OutputIter __first, _Size __n, _Generator __gen) {$/;"	f	namespace:std	signature:(_OutputIter __first, _Size __n, _Generator __gen)
get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:() const
get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:() const
get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Bvector_base	access:public	signature:() const
get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const {$/;"	f	class:std::__BVECTOR	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::deque	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Deque_alloc_base	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Deque_alloc_base	access:public	signature:() const
get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Deque_base	access:public	signature:() const
get_allocator	stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_map	access:public	signature:() const
get_allocator	stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
get_allocator	stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
get_allocator	stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_set	access:public	signature:() const
get_allocator	stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::hashtable	access:public	signature:() const
get_allocator	stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::hashtable	access:public	signature:() const
get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::list	access:public	signature:() const
get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return _Node_allocator; }$/;"	f	class:std::_List_alloc_base	access:public	signature:() const
get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_List_alloc_base	access:public	signature:() const
get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_List_base	access:public	signature:() const
get_allocator	stl/stl_map.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::map	access:public	signature:() const
get_allocator	stl/stl_multimap.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::multimap	access:public	signature:() const
get_allocator	stl/stl_multiset.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::multiset	access:public	signature:() const
get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Rope_alloc_base	access:public	signature:() const
get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:() const
get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rope_alloc_base	access:public	signature:() const
get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:() const
get_allocator	stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:std::_Rope_base	access:public	signature:()
get_allocator	stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:std::_Rope_rep_base	access:public	signature:()
get_allocator	stl/stl_set.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::set	access:public	signature:() const
get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::slist	access:public	signature:() const
get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Slist_alloc_base	access:public	signature:() const
get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Slist_alloc_base	access:public	signature:() const
get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:std::_Slist_base	access:public	signature:() const
get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:() const
get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:() const
get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:std::_Rb_tree_base	access:public	signature:() const
get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::vector	access:public	signature:() const
get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Vector_alloc_base	access:public	signature:() const
get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Vector_alloc_base	access:public	signature:() const
get_temporary_buffer	stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {$/;"	f	namespace:std	signature:(ptrdiff_t __len)
get_temporary_buffer	stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len, _Tp*) {$/;"	f	namespace:std	signature:(ptrdiff_t __len, _Tp*)
greater	stl/stl_function.h	/^struct greater : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
greater_equal	stl/stl_function.h	/^struct greater_equal : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
has_trivial_assignment_operator	stl/type_traits.h	/^   typedef __false_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
has_trivial_assignment_operator	stl/type_traits.h	/^   typedef __true_type    has_trivial_assignment_operator;$/;"	t	struct:__type_traits	access:public
has_trivial_copy_constructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_copy_constructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_copy_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_default_constructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_default_constructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_default_constructor;$/;"	t	struct:__type_traits	access:public
has_trivial_destructor	stl/type_traits.h	/^   typedef __false_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
has_trivial_destructor	stl/type_traits.h	/^   typedef __true_type    has_trivial_destructor;$/;"	t	struct:__type_traits	access:public
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char*>$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<const char*>$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<int> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<long> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<short> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<signed char> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned char> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned int> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned long> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned short> {$/;"	s	namespace:std
hash	stl/stl_hash_fun.h	/^template <class _Key> struct hash { };$/;"	s	namespace:std
hash	stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<crope>$/;"	s	namespace:std
hash	stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<wrope>$/;"	s	namespace:std
hash_funct	stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_map	access:public	signature:() const
hash_funct	stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
hash_funct	stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
hash_funct	stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_set	access:public	signature:() const
hash_funct	stl/stl_hashtable.h	/^  hasher hash_funct() const { return _M_hash; }$/;"	f	class:std::hashtable	access:public	signature:() const
hash_map	stl/stl_hash_map.h	/^  explicit hash_map(size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(size_type __n)
hash_map	stl/stl_hash_map.h	/^  hash_map() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:std::hash_map	access:public	signature:()
hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_map	access:public	signature:(size_type __n, const hasher& __hf)
hash_map	stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_map	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_map	stl/stl_hash_map.h	/^class hash_map$/;"	c	namespace:std
hash_multimap	stl/stl_hash_map.h	/^  explicit hash_multimap(size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:std::hash_multimap	access:public	signature:()
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n, const hasher& __hf)
hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multimap	stl/stl_hash_map.h	/^class hash_multimap$/;"	c	namespace:std
hash_multiset	stl/stl_hash_set.h	/^  explicit hash_multiset(size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset()$/;"	f	class:std::hash_multiset	access:public	signature:()
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n, const hasher& __hf)
hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_multiset	stl/stl_hash_set.h	/^class hash_multiset$/;"	c	namespace:std
hash_set	stl/stl_hash_set.h	/^  explicit hash_set(size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(size_type __n)
hash_set	stl/stl_hash_set.h	/^  hash_set()$/;"	f	class:std::hash_set	access:public	signature:()
hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_set	access:public	signature:(size_type __n, const hasher& __hf)
hash_set	stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_set	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
hash_set	stl/stl_hash_set.h	/^class hash_set$/;"	c	namespace:std
hasher	stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_map	access:public
hasher	stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_multimap	access:public
hasher	stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_multiset	access:public
hasher	stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_set	access:public
hasher	stl/stl_hashtable.h	/^  typedef _HashFcn hasher;$/;"	t	class:std::hashtable	access:public
hashtable	stl/stl_hashtable.h	/^class hashtable {$/;"	c	namespace:std
identity	stl/stl_function.h	/^template <class _Tp> struct identity : public _Identity<_Tp> {};$/;"	s	namespace:std	inherits:_Identity
identity_element	stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {$/;"	f	namespace:std	signature:(multiplies<_Tp>)
identity_element	stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(plus<_Tp>) {$/;"	f	namespace:std	signature:(plus<_Tp>)
identity_element	stl/stl_rope.h	/^identity_element(_Rope_Concat_fn<_CharT, _Alloc>)$/;"	f	namespace:std	signature:(_Rope_Concat_fn<_CharT, _Alloc>)
includes	stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
includes	stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
index	stl/stl_rope.h	/^    size_t index() const { return _M_current_pos; }$/;"	f	class:std::_Rope_iterator_base	access:public	signature:() const
init_page_size	stl/defalloc.h	/^    size_type init_page_size() { $/;"	f	class:allocator	access:public	signature:()
inner_product	stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
inner_product	stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
inplace_merge	stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last)
inplace_merge	stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Compare __comp)
input_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct input_iterator {$/;"	s	namespace:std
input_iterator_tag	stl/stl_iterator_base.h	/^struct input_iterator_tag {};$/;"	s	namespace:std
insert	stl/sequence_concepts.h	/^    __s.insert(__p, __i, __j);$/;"	p	signature:(__p, __i, __j)
insert	stl/sequence_concepts.h	/^    __s.insert(__p, __n, __t);$/;"	p	signature:(__p, __n, __t)
insert	stl/stl_bvector.h	/^  iterator insert(iterator __position, bool __x = bool()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, bool __x = bool())
insert	stl/stl_bvector.h	/^  void insert(iterator __position, const bool* __first, const bool* __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, const bool* __first, const bool* __last)
insert	stl/stl_bvector.h	/^  void insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
insert	stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
insert	stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	stl/stl_deque.h	/^  iterator insert(iterator __position)$/;"	f	class:std::deque	access:public	signature:(iterator __position)
insert	stl/stl_deque.h	/^  iterator insert(iterator position, const value_type& __x) {$/;"	f	class:std::deque	access:public	signature:(iterator position, const value_type& __x)
insert	stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
insert	stl/stl_deque.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	stl/stl_deque.h	/^deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
insert	stl/stl_deque.h	/^void deque<_Tp, _Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
insert	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	stl/stl_hash_map.h	/^    container->insert(__value);$/;"	p	signature:(__value)
insert	stl/stl_hash_map.h	/^  iterator insert(const value_type& __obj) $/;"	f	class:std::hash_multimap	access:public	signature:(const value_type& __obj)
insert	stl/stl_hash_map.h	/^  pair<iterator,bool> insert(const value_type& __obj)$/;"	f	class:std::hash_map	access:public	signature:(const value_type& __obj)
insert	stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
insert	stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
insert	stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
insert	stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
insert	stl/stl_hash_set.h	/^    container->insert(__value);$/;"	p	signature:(__value)
insert	stl/stl_hash_set.h	/^  iterator insert(const value_type& __obj)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type& __obj)
insert	stl/stl_hash_set.h	/^  pair<iterator, bool> insert(const value_type& __obj)$/;"	f	class:std::hash_set	access:public	signature:(const value_type& __obj)
insert	stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert	stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
insert	stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
insert	stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
insert	stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
insert	stl/stl_hashtable.h	/^    _M_buckets.insert(_M_buckets.end(), __n_buckets, (_Node*) 0);$/;"	p	signature:(_M_buckets.end(), __n_buckets, (_Node*) 0)
insert	stl/stl_hashtable.h	/^  _M_buckets.insert(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0);$/;"	p	signature:(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0)
insert	stl/stl_list.h	/^  iterator insert(iterator __position) { return insert(__position, _Tp()); }$/;"	f	class:std::list	access:public	signature:(iterator __position)
insert	stl/stl_list.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:std::list	access:public	signature:(iterator __position, const _Tp& __x)
insert	stl/stl_list.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	stl/stl_list.h	/^  void insert(iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:std::list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
insert	stl/stl_list.h	/^  void insert(iterator __position, const _Tp* __first, const _Tp* __last);$/;"	p	class:std::list	access:public	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
insert	stl/stl_list.h	/^  void insert(iterator __position,$/;"	p	class:std::list	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:std::list	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
insert	stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	stl/stl_map.h	/^  iterator insert(iterator position, const value_type& __x)$/;"	f	class:std::map	access:public	signature:(iterator position, const value_type& __x)
insert	stl/stl_map.h	/^  pair<iterator,bool> insert(const value_type& __x) $/;"	f	class:std::map	access:public	signature:(const value_type& __x)
insert	stl/stl_map.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_map.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last)
insert	stl/stl_map.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last)
insert	stl/stl_multimap.h	/^  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }$/;"	f	class:std::multimap	access:public	signature:(const value_type& __x)
insert	stl/stl_multimap.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::multimap	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_multimap.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_multimap.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last)
insert	stl/stl_multimap.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last)
insert	stl/stl_multiset.h	/^  iterator insert(const value_type& __x) { $/;"	f	class:std::multiset	access:public	signature:(const value_type& __x)
insert	stl/stl_multiset.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::multiset	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_multiset.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_multiset.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last)
insert	stl/stl_multiset.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last)
insert	stl/stl_queue.h	/^    c.insert(c.end(), __first, __last);$/;"	p	signature:(c.end(), __first, __last)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p ) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p )
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, _CharT __c) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, _CharT __c)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* c_string) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* c_string)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const rope& __r)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const rope& __r)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, size_t __n, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, size_t __n, _CharT __c)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const const_iterator& __i, const const_iterator& __j)
insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __i, const iterator& __j)
insert	stl/stl_rope.h	/^        void insert(size_t __p) {$/;"	f	class:std::rope	access:public	signature:(size_t __p)
insert	stl/stl_rope.h	/^        void insert(size_t __p, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, _CharT __c)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __c_string)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __n)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const const_iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
insert	stl/stl_rope.h	/^        void insert(size_t __p, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const rope& __r)
insert	stl/stl_rope.h	/^        void insert(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
insert	stl/stl_set.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::set	access:public	signature:(iterator __position, const value_type& __x)
insert	stl/stl_set.h	/^  pair<iterator,bool> insert(const value_type& __x) { $/;"	f	class:std::set	access:public	signature:(const value_type& __x)
insert	stl/stl_set.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert	stl/stl_set.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last)
insert	stl/stl_set.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last)
insert	stl/stl_slist.h	/^  iterator insert(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
insert	stl/stl_slist.h	/^  iterator insert(iterator __pos, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type& __x)
insert	stl/stl_slist.h	/^  void insert(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
insert	stl/stl_slist.h	/^  void insert(iterator __pos, const value_type* __first, $/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert	stl/stl_slist.h	/^  void insert(iterator __pos, const_iterator __first, const_iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert	stl/stl_slist.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert	stl/stl_vector.h	/^  iterator insert(iterator __position) {$/;"	f	class:std::vector	access:public	signature:(iterator __position)
insert	stl/stl_vector.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(iterator __position, const _Tp& __x)
insert	stl/stl_vector.h	/^  void insert (iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
insert	stl/stl_vector.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
insert	stl/stl_vector.h	/^  void insert(iterator __position,$/;"	p	class:std::vector	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:std::vector	signature:(iterator __position, const_iterator __first, const_iterator __last)
insert_after	stl/stl_slist.h	/^  iterator insert_after(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
insert_after	stl/stl_slist.h	/^  iterator insert_after(iterator __pos, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type& __x)
insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
insert_equal	stl/stl_hash_map.h	/^    _M_ht.insert_equal(__f,__l);$/;"	p	signature:(__f,__l)
insert_equal	stl/stl_hash_map.h	/^    { _M_ht.insert_equal(__f, __l); }$/;"	p	signature:(__f, __l)
insert_equal	stl/stl_hash_map.h	/^    { _M_ht.insert_equal(__f,__l); }$/;"	p	signature:(__f,__l)
insert_equal	stl/stl_hash_set.h	/^    _M_ht.insert_equal(__f,__l);$/;"	p	signature:(__f,__l)
insert_equal	stl/stl_hash_set.h	/^    { _M_ht.insert_equal(__f, __l); }$/;"	p	signature:(__f, __l)
insert_equal	stl/stl_hash_set.h	/^    { _M_ht.insert_equal(__f,__l); }$/;"	p	signature:(__f,__l)
insert_equal	stl/stl_hashtable.h	/^  iterator insert_equal(const value_type& __obj)$/;"	f	class:std::hashtable	access:public	signature:(const value_type& __obj)
insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
insert_equal	stl/stl_hashtable.h	/^  void insert_equal(const value_type* __f, const value_type* __l)$/;"	f	class:std::hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
insert_equal	stl/stl_hashtable.h	/^  void insert_equal(const_iterator __f, const_iterator __l)$/;"	f	class:std::hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
insert_equal	stl/stl_multimap.h	/^    : _M_t(__comp, __a) { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_multimap.h	/^    _M_t.insert_equal(__first, __last);$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_multimap.h	/^    { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_multiset.h	/^    : _M_t(__comp, __a) { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_multiset.h	/^    _M_t.insert_equal(__first, __last);$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_multiset.h	/^    { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
insert_equal	stl/stl_tree.h	/^  ::insert_equal(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
insert_equal	stl/stl_tree.h	/^  ::insert_equal(const _Val* __first, const _Val* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Val* __first, const _Val* __last)
insert_equal	stl/stl_tree.h	/^  ::insert_equal(const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Value& __v)
insert_equal	stl/stl_tree.h	/^  ::insert_equal(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
insert_equal	stl/stl_tree.h	/^  ::insert_equal(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
insert_equal	stl/stl_tree.h	/^  iterator insert_equal(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
insert_equal	stl/stl_tree.h	/^  iterator insert_equal(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
insert_equal	stl/stl_tree.h	/^  void insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert_equal	stl/stl_tree.h	/^  void insert_equal(const value_type* __first, const value_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
insert_equal	stl/stl_tree.h	/^  void insert_equal(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
insert_equal_noresize	stl/stl_hashtable.h	/^  ::insert_equal_noresize(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
insert_equal_noresize	stl/stl_hashtable.h	/^  iterator insert_equal_noresize(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
insert_iterator	stl/stl_hash_map.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x)
insert_iterator	stl/stl_hash_map.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator	stl/stl_hash_map.h	/^class insert_iterator<hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c	namespace:std
insert_iterator	stl/stl_hash_map.h	/^class insert_iterator<hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c	namespace:std
insert_iterator	stl/stl_hash_set.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x)
insert_iterator	stl/stl_hash_set.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
insert_iterator	stl/stl_hash_set.h	/^class insert_iterator<hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c	namespace:std
insert_iterator	stl/stl_hash_set.h	/^class insert_iterator<hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c	namespace:std
insert_iterator	stl/stl_iterator.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator	stl/stl_iterator.h	/^class insert_iterator {$/;"	c	namespace:std
insert_iterator	stl/stl_slist.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
insert_iterator	stl/stl_slist.h	/^class insert_iterator<slist<_Tp, _Alloc> > {$/;"	c	namespace:std
insert_noresize	stl/stl_hash_map.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type& __obj)
insert_noresize	stl/stl_hash_map.h	/^  pair<iterator,bool> insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_map	access:public	signature:(const value_type& __obj)
insert_noresize	stl/stl_hash_set.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type& __obj)
insert_noresize	stl/stl_hash_set.h	/^  pair<iterator, bool> insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_set	access:public	signature:(const value_type& __obj)
insert_unique	stl/stl_hash_map.h	/^    _M_ht.insert_unique(__f,__l);$/;"	p	signature:(__f,__l)
insert_unique	stl/stl_hash_map.h	/^    { _M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
insert_unique	stl/stl_hash_map.h	/^    { _M_ht.insert_unique(__f,__l); }$/;"	p	signature:(__f,__l)
insert_unique	stl/stl_hash_set.h	/^    _M_ht.insert_unique(__f,__l);$/;"	p	signature:(__f,__l)
insert_unique	stl/stl_hash_set.h	/^    { _M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
insert_unique	stl/stl_hash_set.h	/^    { _M_ht.insert_unique(__f,__l); }$/;"	p	signature:(__f,__l)
insert_unique	stl/stl_hash_set.h	/^    {_M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
insert_unique	stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique(const value_type& __obj)$/;"	f	class:std::hashtable	access:public	signature:(const value_type& __obj)
insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
insert_unique	stl/stl_hashtable.h	/^  void insert_unique(const value_type* __f, const value_type* __l)$/;"	f	class:std::hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
insert_unique	stl/stl_hashtable.h	/^  void insert_unique(const_iterator __f, const_iterator __l)$/;"	f	class:std::hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
insert_unique	stl/stl_map.h	/^    : _M_t(__comp, __a) { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_map.h	/^    _M_t.insert_unique(__first, __last);$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_map.h	/^    { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_set.h	/^    : _M_t(__comp, __a) { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_set.h	/^    _M_t.insert_unique(__first, __last);$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_set.h	/^    { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
insert_unique	stl/stl_tree.h	/^  ::insert_unique(_II __first, _II __last) {$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
insert_unique	stl/stl_tree.h	/^  ::insert_unique(const _Val* __first, const _Val* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Val* __first, const _Val* __last)
insert_unique	stl/stl_tree.h	/^  ::insert_unique(const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Value& __v)
insert_unique	stl/stl_tree.h	/^  ::insert_unique(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
insert_unique	stl/stl_tree.h	/^  ::insert_unique(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
insert_unique	stl/stl_tree.h	/^  iterator insert_unique(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
insert_unique	stl/stl_tree.h	/^  pair<iterator,bool> insert_unique(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
insert_unique	stl/stl_tree.h	/^  void insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
insert_unique	stl/stl_tree.h	/^  void insert_unique(const value_type* __first, const value_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
insert_unique	stl/stl_tree.h	/^  void insert_unique(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
insert_unique_noresize	stl/stl_hashtable.h	/^  ::insert_unique_noresize(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
insert_unique_noresize	stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique_noresize(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
inserter	stl/stl_iterator.h	/^insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	signature:(_Container& __x, _Iterator __i)
int_type	stl/char_traits.h	/^  typedef _IntT int_type;$/;"	t	class:std::__char_traits_base	access:public
int_type	stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:std::istreambuf_iterator	access:public
int_type	stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:std::ostreambuf_iterator	access:public
iota	stl/stl_numeric.h	/^iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Tp __value)
is_POD_type	stl/type_traits.h	/^   typedef __false_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
is_POD_type	stl/type_traits.h	/^   typedef __true_type    is_POD_type;$/;"	t	struct:__type_traits	access:public
is_heap	stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last)$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
is_heap	stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _StrictWeakOrdering __comp)
is_sorted	stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last)$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
is_sorted	stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)
istream_iterator	stl/stl_iterator.h	/^  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}$/;"	f	class:std::istream_iterator	access:public	signature:()
istream_iterator	stl/stl_iterator.h	/^  istream_iterator() : _M_stream(0), _M_ok(false) {}$/;"	f	class:std::istream_iterator	access:public	signature:()
istream_iterator	stl/stl_iterator.h	/^  istream_iterator(istream& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:std::istream_iterator	access:public	signature:(istream& __s)
istream_iterator	stl/stl_iterator.h	/^  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:std::istream_iterator	access:public	signature:(istream_type& __s)
istream_iterator	stl/stl_iterator.h	/^class istream_iterator {$/;"	c	namespace:std
istream_type	stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits>   istream_type;$/;"	t	class:std::istreambuf_iterator	access:public
istream_type	stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:std::istream_iterator	access:public
istreambuf_iterator	stl/stl_iterator.h	/^  istreambuf_iterator(istream_type& __is) { this->_M_init(__is.rdbuf()); }$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type& __is)
istreambuf_iterator	stl/stl_iterator.h	/^  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type* __p = 0)
istreambuf_iterator	stl/stl_iterator.h	/^class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator
iter	stl/container_concepts.h	/^  _InputIterator_concept_specification<iter>::_InputIterator_requirement_violation(iter());$/;"	p	class:_Container_concept_specification::_InputIterator_concept_specification	signature:()
iter	stl/container_concepts.h	/^  _Mutable_BidirectionalIterator_concept_specification<iter>::_Mutable_BidirectionalIterator_requirement_violation(iter());$/;"	p	class:_ReversibleContainer_concept_specification::_Mutable_BidirectionalIterator_concept_specification	signature:()
iter	stl/container_concepts.h	/^  _Mutable_ForwardIterator_concept_specification<iter>::_Mutable_ForwardIterator_requirement_violation(iter());$/;"	p	class:_ForwardContainer_concept_specification::_Mutable_ForwardIterator_concept_specification	signature:()
iter	stl/container_concepts.h	/^  _Mutable_RandomAccessIterator_concept_specification<iter>::_Mutable_RandomAccessIterator_requirement_violation(iter());$/;"	p	class:_RandomAccessContainer_concept_specification::_Mutable_RandomAccessIterator_concept_specification	signature:()
iter	stl/container_concepts.h	/^  typedef typename _Container::iterator iter;$/;"	t
iter	stl/container_concepts.h	/^  typedef typename _ForwardContainer::iterator iter;$/;"	t
iter	stl/container_concepts.h	/^  typedef typename _RandomAccessContainer::iterator iter;$/;"	t
iter	stl/container_concepts.h	/^  typedef typename _ReversibleContainer::iterator iter;$/;"	t
iter	stl/stl_hash_map.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iter	stl/stl_hash_set.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iter	stl/stl_iterator.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iter	stl/stl_slist.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iter_swap	stl/stl_algobase.h	/^inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b) {$/;"	f	namespace:std	signature:(_ForwardIter1 __a, _ForwardIter2 __b)
iterator	stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(iterator);$/;"	v
iterator	stl/stl_bvector.h	/^  typedef _Bit_iterator                iterator;$/;"	t	class:std::__BVECTOR	access:public
iterator	stl/stl_bvector.h	/^  typedef _Bit_iterator   iterator;$/;"	t	struct:std::_Bit_iterator	access:public
iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Deque_iterator	access:public
iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:std::_Deque_base	access:public
iterator	stl/stl_deque.h	/^  typedef typename _Base::iterator       iterator;$/;"	t	class:std::deque	access:public
iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:std::hash_map	access:public
iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:std::hash_multimap	access:public
iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:std::hash_multiset	access:public
iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:std::hash_set	access:public
iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	class:std::hashtable	access:public
iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:std::_Hashtable_iterator	access:public
iterator	stl/stl_iterator_base.h	/^struct iterator {$/;"	s	namespace:std
iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:std::list	access:public
iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	struct:std::_List_iterator	access:public
iterator	stl/stl_map.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:std::map	access:public
iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:std::multimap	access:public
iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:std::multiset	access:public
iterator	stl/stl_rope.h	/^        typedef _Rope_iterator<_CharT,_Alloc> iterator;$/;"	t	class:std::rope	access:public
iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:std::set	access:public
iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:std::slist	access:public
iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Slist_iterator	access:public
iterator	stl/stl_tree.h	/^    iterator;$/;"	t	struct:std::_Rb_tree_iterator	access:public
iterator	stl/stl_tree.h	/^  typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;$/;"	t	class:std::_Rb_tree	access:public
iterator	stl/stl_vector.h	/^  typedef value_type* iterator;$/;"	t	class:std::vector	access:public
iterator_category	stl/concept_checks.h	/^          iterator_category;$/;"	t	struct:__iterator_category_type_definition_requirement_violation	access:public
iterator_category	stl/stl_deque.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::_Deque_iterator	access:public
iterator_category	stl/stl_deque.h	/^iterator_category(const _Deque_iterator<_Tp,_Ref,_Ptr>&)$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
iterator_category	stl/stl_hash_map.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
iterator_category	stl/stl_hash_set.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
iterator_category	stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
iterator_category	stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Hashtable_iterator	access:public
iterator_category	stl/stl_hashtable.h	/^iterator_category(const _Hashtable_const_iterator<_Val,_Key,_HF,$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF, _ExK,_EqK,_All>&)
iterator_category	stl/stl_hashtable.h	/^iterator_category(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
iterator_category	stl/stl_iterator.h	/^          iterator_category;$/;"	t	class:std::reverse_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef input_iterator_tag             iterator_category;$/;"	t	class:std::istream_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef input_iterator_tag  iterator_category;$/;"	t	class:std::istream_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag            iterator_category;$/;"	t	class:std::ostream_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::back_insert_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::front_insert_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::ostream_iterator	access:public
iterator_category	stl/stl_iterator.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	class:std::reverse_iterator	access:public
iterator_category	stl/stl_iterator.h	/^iterator_category(const back_insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const back_insert_iterator<_Container>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const front_insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const front_insert_iterator<_Container>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const insert_iterator<_Container>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const istream_iterator<_Tp, _Dist>&)$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const ostream_iterator<_Tp>&) {$/;"	f	namespace:std	signature:(const ostream_iterator<_Tp>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const reverse_bidirectional_iterator<_BidirectionalIterator,$/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
iterator_category	stl/stl_iterator.h	/^iterator_category(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
iterator_category	stl/stl_iterator_base.h	/^  typedef _Category  iterator_category;$/;"	t	struct:std::iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::bidirectional_iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::forward_iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef input_iterator_tag iterator_category;$/;"	t	struct:std::input_iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	struct:std::output_iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::random_access_iterator	access:public
iterator_category	stl/stl_iterator_base.h	/^  typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	access:public
iterator_category	stl/stl_iterator_base.h	/^inline output_iterator_tag iterator_category(const output_iterator&)$/;"	f	namespace:std	signature:(const output_iterator&)
iterator_category	stl/stl_iterator_base.h	/^inline random_access_iterator_tag iterator_category(const _Tp*)$/;"	f	namespace:std	signature:(const _Tp*)
iterator_category	stl/stl_iterator_base.h	/^iterator_category(const _Iter& __i) { return __iterator_category(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
iterator_category	stl/stl_iterator_base.h	/^iterator_category(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
iterator_category	stl/stl_iterator_base.h	/^iterator_category(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
iterator_category	stl/stl_iterator_base.h	/^iterator_category(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
iterator_category	stl/stl_iterator_base.h	/^iterator_category(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
iterator_category	stl/stl_list.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_List_iterator_base	access:public
iterator_category	stl/stl_list.h	/^iterator_category(const _List_iterator_base&)$/;"	f	namespace:std	signature:(const _List_iterator_base&)
iterator_category	stl/stl_raw_storage_iter.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::raw_storage_iterator	access:public
iterator_category	stl/stl_raw_storage_iter.h	/^iterator_category(const raw_storage_iterator<_ForwardIterator, _Tp>&)$/;"	f	namespace:std	signature:(const raw_storage_iterator<_ForwardIterator, _Tp>&)
iterator_category	stl/stl_slist.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Slist_iterator_base	access:public
iterator_category	stl/stl_slist.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
iterator_category	stl/stl_slist.h	/^inline forward_iterator_tag iterator_category(const _Slist_iterator_base&) {$/;"	f	namespace:std	signature:(const _Slist_iterator_base&)
iterator_category	stl/stl_tree.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
iterator_category	stl/stl_tree.h	/^iterator_category(const _Rb_tree_base_iterator&) {$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator&)
iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits {$/;"	s	namespace:std
iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits<_Tp*> {$/;"	s	namespace:std
iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits<const _Tp*> {$/;"	s	namespace:std
iterator_type	stl/stl_iterator.h	/^  typedef _Iterator iterator_type;$/;"	t	class:std::reverse_iterator	access:public
key_comp	stl/stl_map.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::map	access:public	signature:() const
key_comp	stl/stl_multimap.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multimap	access:public	signature:() const
key_comp	stl/stl_multiset.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multiset	access:public	signature:() const
key_comp	stl/stl_set.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::set	access:public	signature:() const
key_comp	stl/stl_tree.h	/^  _Compare key_comp() const { return _M_key_compare; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
key_compare	stl/stl_map.h	/^  typedef _Compare              key_compare;$/;"	t	class:std::map	access:public
key_compare	stl/stl_multimap.h	/^  typedef _Compare              key_compare;$/;"	t	class:std::multimap	access:public
key_compare	stl/stl_multiset.h	/^  typedef _Compare key_compare;$/;"	t	class:std::multiset	access:public
key_compare	stl/stl_set.h	/^  typedef _Compare key_compare;$/;"	t	class:std::set	access:public
key_eq	stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_map	access:public	signature:() const
key_eq	stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
key_eq	stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
key_eq	stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_set	access:public	signature:() const
key_eq	stl/stl_hashtable.h	/^  key_equal key_eq() const { return _M_equals; }$/;"	f	class:std::hashtable	access:public	signature:() const
key_equal	stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_map	access:public
key_equal	stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_multimap	access:public
key_equal	stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_multiset	access:public
key_equal	stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_set	access:public
key_equal	stl/stl_hashtable.h	/^  typedef _EqualKey key_equal;$/;"	t	class:std::hashtable	access:public
key_type	stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_map	access:public
key_type	stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_multimap	access:public
key_type	stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_multiset	access:public
key_type	stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_set	access:public
key_type	stl/stl_hashtable.h	/^  typedef _Key key_type;$/;"	t	class:std::hashtable	access:public
key_type	stl/stl_map.h	/^  typedef _Key                  key_type;$/;"	t	class:std::map	access:public
key_type	stl/stl_multimap.h	/^  typedef _Key                  key_type;$/;"	t	class:std::multimap	access:public
key_type	stl/stl_multiset.h	/^  typedef _Key     key_type;$/;"	t	class:std::multiset	access:public
key_type	stl/stl_set.h	/^  typedef _Key     key_type;$/;"	t	class:std::set	access:public
key_type	stl/stl_tree.h	/^  typedef _Key key_type;$/;"	t	class:std::_Rb_tree	access:public
length	stl/char_traits.h	/^  static size_t length(const _CharT* __s) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s)
length	stl/char_traits.h	/^  static size_t length(const char* __s) { return strlen(__s); }$/;"	f	class:std::char_traits	access:public	signature:(const char* __s)
length	stl/stl_rope.h	/^        size_type length() const {$/;"	f	class:std::rope	access:public	signature:() const
less	stl/stl_function.h	/^struct less : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
less_equal	stl/stl_function.h	/^struct less_equal : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
lexicographical_compare	stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
lexicographical_compare	stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
lexicographical_compare	stl/stl_algobase.h	/^inline bool lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
lexicographical_compare	stl/stl_algobase.h	/^lexicographical_compare(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
lexicographical_compare_3way	stl/stl_algobase.h	/^int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
list	stl/stl_list.h	/^  explicit list(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:std::list	access:public	signature:(const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^  explicit list(size_type __n)$/;"	f	class:std::list	access:public	signature:(size_type __n)
list	stl/stl_list.h	/^  list(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^  list(const _Tp* __first, const _Tp* __last,$/;"	f	class:std::list	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^  list(const list<_Tp, _Alloc>& __x) : _Base(__x.get_allocator())$/;"	f	class:std::list	access:public	signature:(const list<_Tp, _Alloc>& __x)
list	stl/stl_list.h	/^  list(const_iterator __first, const_iterator __last,$/;"	f	class:std::list	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^  list(size_type __n, const _Tp& __value,$/;"	f	class:std::list	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
list	stl/stl_list.h	/^class list : protected _List_base<_Tp, _Alloc> {$/;"	c	namespace:std	inherits:_List_base
logical_and	stl/stl_function.h	/^struct logical_and : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
logical_not	stl/stl_function.h	/^struct logical_not : public unary_function<_Tp,bool>$/;"	s	namespace:std	inherits:unary_function
logical_or	stl/stl_function.h	/^struct logical_or : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
lower_bound	stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
lower_bound	stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
lower_bound	stl/stl_map.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_map.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_multimap.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_multimap.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
lower_bound	stl/stl_multiset.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_set.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_tree.h	/^  ::lower_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
lower_bound	stl/stl_tree.h	/^  ::lower_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
lower_bound	stl/stl_tree.h	/^  const_iterator lower_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
lower_bound	stl/stl_tree.h	/^  iterator lower_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
lt	stl/char_traits.h	/^  static bool lt(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
make_heap	stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
make_heap	stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
make_pair	stl/stl_pair.h	/^inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)$/;"	f	namespace:std	signature:(const _T1& __x, const _T2& __y)
malloc_alloc	stl/stl_alloc.h	/^typedef __malloc_alloc_template<0> malloc_alloc;$/;"	t	namespace:std
map	stl/stl_map.h	/^  explicit map(const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^  map() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::map	access:public	signature:()
map	stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
map	stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::map	access:public	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x)
map	stl/stl_map.h	/^  map(const value_type* __first, const value_type* __last)$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last)
map	stl/stl_map.h	/^  map(const value_type* __first,$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last)$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last)
map	stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
map	stl/stl_map.h	/^class map {$/;"	c	namespace:std
mapped_type	stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:std::hash_map	access:public
mapped_type	stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:std::hash_multimap	access:public
mapped_type	stl/stl_map.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:std::map	access:public
mapped_type	stl/stl_multimap.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:std::multimap	access:public
max	stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
max	stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
max	stl/stl_algobase.h	103;"	d
max	stl/stl_config.h	385;"	d
max_bucket_count	stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_map	access:public	signature:() const
max_bucket_count	stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
max_bucket_count	stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
max_bucket_count	stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_set	access:public	signature:() const
max_bucket_count	stl/stl_hashtable.h	/^  size_type max_bucket_count() const$/;"	f	class:std::hashtable	access:public	signature:() const
max_element	stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
max_element	stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
max_size	stl/container_concepts.h	/^    __c.max_size();$/;"	p	signature:()
max_size	stl/defalloc.h	/^    size_type max_size() const { $/;"	f	class:allocator	access:public	signature:() const
max_size	stl/stl_bvector.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
max_size	stl/stl_deque.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::deque	access:public	signature:() const
max_size	stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_map	access:public	signature:() const
max_size	stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
max_size	stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
max_size	stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_set	access:public	signature:() const
max_size	stl/stl_hashtable.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::hashtable	access:public	signature:() const
max_size	stl/stl_list.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::list	access:public	signature:() const
max_size	stl/stl_map.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::map	access:public	signature:() const
max_size	stl/stl_multimap.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::multimap	access:public	signature:() const
max_size	stl/stl_multiset.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::multiset	access:public	signature:() const
max_size	stl/stl_rope.h	/^        size_type max_size() const {$/;"	f	class:std::rope	access:public	signature:() const
max_size	stl/stl_set.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::set	access:public	signature:() const
max_size	stl/stl_slist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::slist	access:public	signature:() const
max_size	stl/stl_tree.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
max_size	stl/stl_vector.h	/^  size_type max_size() const$/;"	f	class:std::vector	access:public	signature:() const
mem_fun1_ref_t	stl/stl_function.h	/^  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_ref_t	stl/stl_function.h	/^class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
mem_fun1_ref_t	stl/stl_function.h	/^class mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	namespace:std	inherits:binary_function
mem_fun1_t	stl/stl_function.h	/^  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
mem_fun1_t	stl/stl_function.h	/^class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
mem_fun1_t	stl/stl_function.h	/^class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {$/;"	c	namespace:std	inherits:binary_function
mem_fun_ref_t	stl/stl_function.h	/^  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_ref_t	stl/stl_function.h	/^class mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	namespace:std	inherits:unary_function
mem_fun_ref_t	stl/stl_function.h	/^class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	namespace:std	inherits:unary_function
mem_fun_t	stl/stl_function.h	/^  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_t	access:public	signature:(void (_Tp::*__pf)())
mem_fun_t	stl/stl_function.h	/^class mem_fun_t : public unary_function<_Tp*,_Ret> {$/;"	c	namespace:std	inherits:unary_function
mem_fun_t	stl/stl_function.h	/^class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {$/;"	c	namespace:std	inherits:unary_function
merge	stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
merge	stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
merge	stl/stl_list.h	/^        __counter[__i].merge(__carry);$/;"	p	signature:(__carry)
merge	stl/stl_list.h	/^        __counter[__i].merge(__carry, __comp);$/;"	p	signature:(__carry, __comp)
merge	stl/stl_list.h	/^      __counter[__i].merge(__counter[__i-1]);$/;"	p	signature:(__counter[__i-1])
merge	stl/stl_list.h	/^      __counter[__i].merge(__counter[__i-1], __comp);$/;"	p	signature:(__counter[__i-1], __comp)
merge	stl/stl_list.h	/^  template <class _StrictWeakOrdering> void merge(list&, _StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(list&, _StrictWeakOrdering)
merge	stl/stl_list.h	/^  void merge(list& __x);$/;"	p	class:std::list	access:public	signature:(list& __x)
merge	stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x)$/;"	f	class:std::list	signature:(list<_Tp, _Alloc>& __x)
merge	stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x,$/;"	f	class:std::list	signature:(list<_Tp, _Alloc>& __x, _StrictWeakOrdering __comp)
merge	stl/stl_slist.h	/^        __counter[__i].merge(__carry);$/;"	p	signature:(__carry)
merge	stl/stl_slist.h	/^        __counter[__i].merge(__carry, __comp);$/;"	p	signature:(__carry, __comp)
merge	stl/stl_slist.h	/^      __counter[__i].merge(__counter[__i-1]);$/;"	p	signature:(__counter[__i-1])
merge	stl/stl_slist.h	/^      __counter[__i].merge(__counter[__i-1], __comp);$/;"	p	signature:(__counter[__i-1], __comp)
merge	stl/stl_slist.h	/^  void merge(slist& __x);$/;"	p	class:std::slist	access:public	signature:(slist& __x)
merge	stl/stl_slist.h	/^  void merge(slist&, _StrictWeakOrdering);$/;"	p	class:std::slist	access:public	signature:(slist&, _StrictWeakOrdering)
merge	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x)$/;"	f	class:std::slist	signature:(slist<_Tp,_Alloc>& __x)
merge	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x,$/;"	f	class:std::slist	signature:(slist<_Tp,_Alloc>& __x, _StrictWeakOrdering __comp)
min	stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
min	stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
min	stl/stl_algobase.h	102;"	d
min	stl/stl_config.h	384;"	d
min_element	stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
min_element	stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
minus	stl/stl_function.h	/^struct minus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
mismatch	stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
mismatch	stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
modulus	stl/stl_function.h	/^struct modulus : public binary_function<_Tp,_Tp,_Tp> $/;"	s	namespace:std	inherits:binary_function
move	stl/char_traits.h	/^  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
multimap	stl/stl_multimap.h	/^  explicit multimap(const _Compare& __comp,$/;"	f	class:std::multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^  multimap() : _M_t(_Compare(), allocator_type()) { }$/;"	f	class:std::multimap	access:public	signature:()
multimap	stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
multimap	stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }$/;"	f	class:std::multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
multimap	stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last)$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last)
multimap	stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last,$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last)$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last)
multimap	stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last,$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multimap	stl/stl_multimap.h	/^class multimap {$/;"	c	namespace:std
multiplies	stl/stl_function.h	/^struct multiplies : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
multiset	stl/stl_multiset.h	/^  explicit multiset(const _Compare& __comp,$/;"	f	class:std::multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^  multiset() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::multiset	access:public	signature:()
multiset	stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
multiset	stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^  multiset(const multiset<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
multiset	stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last)$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last)
multiset	stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last,$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last)$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last)
multiset	stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last,$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
multiset	stl/stl_multiset.h	/^class multiset {$/;"	c	namespace:std
mutable_begin	stl/stl_rope.h	/^        iterator mutable_begin() {$/;"	f	class:std::rope	access:public	signature:()
mutable_end	stl/stl_rope.h	/^        iterator mutable_end() {$/;"	f	class:std::rope	access:public	signature:()
mutable_rbegin	stl/stl_rope.h	/^        reverse_iterator mutable_rbegin() {$/;"	f	class:std::rope	access:public	signature:()
mutable_reference_at	stl/stl_rope.h	/^        reference mutable_reference_at(size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
mutable_rend	stl/stl_rope.h	/^        reverse_iterator mutable_rend() {$/;"	f	class:std::rope	access:public	signature:()
namespace	stl/stl_config.h	495;"	d
namespace	stl/stl_config.h	511;"	d
negate	stl/stl_function.h	/^struct negate : public unary_function<_Tp,_Tp> $/;"	s	namespace:std	inherits:unary_function
next_permutation	stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
next_permutation	stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
not1	stl/stl_function.h	/^not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
not2	stl/stl_function.h	/^not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
not_eof	stl/char_traits.h	/^  static int_type not_eof(const int_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c)
not_equal_to	stl/stl_function.h	/^struct not_equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
npos	stl/stl_rope.h	/^        static const size_type npos;$/;"	m	class:std::rope	access:public
npos	stl/stl_rope.h	/^const rope<_CharT, _Alloc>::size_type rope<_CharT, _Alloc>::npos =$/;"	m	class:std::rope
nth_element	stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last)
nth_element	stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Compare __comp)
off_type	stl/char_traits.h	/^  typedef streamoff off_type;$/;"	t	class:std::__char_traits_base	access:public
op	stl/stl_function.h	/^  _Operation op;$/;"	m	class:std::binder1st	access:protected
op	stl/stl_function.h	/^  _Operation op;$/;"	m	class:std::binder2nd	access:protected
operator !=	stl/stl_alloc.h	/^inline bool operator!=(const __allocator<_Tp, _Alloc>& __a1,$/;"	f	signature:(const __allocator<_Tp, _Alloc>& __a1, const __allocator<_Tp, _Alloc>& __a2)
operator !=	stl/stl_alloc.h	/^inline bool operator!=(const __default_alloc_template<__threads, __inst>&,$/;"	f	namespace:std	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
operator !=	stl/stl_alloc.h	/^inline bool operator!=(const __malloc_alloc_template<__inst>&,$/;"	f	signature:(const __malloc_alloc_template<__inst>&, const __malloc_alloc_template<__inst>&)
operator !=	stl/stl_alloc.h	/^inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator !=	stl/stl_alloc.h	/^inline bool operator!=(const debug_alloc<_Alloc>&,$/;"	f	signature:(const debug_alloc<_Alloc>&, const debug_alloc<_Alloc>&)
operator !=	stl/stl_bvector.h	/^  bool operator!=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator !=	stl/stl_bvector.h	/^operator!=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator !=	stl/stl_deque.h	/^  bool operator!=(const _Self& __x) const { return !(*this == __x); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator !=	stl/stl_deque.h	/^inline bool operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator !=	stl/stl_hash_map.h	/^operator!=(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
operator !=	stl/stl_hash_map.h	/^operator!=(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator !=	stl/stl_hash_set.h	/^operator!=(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator !=	stl/stl_hash_set.h	/^operator!=(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator !=	stl/stl_hashtable.h	/^  bool operator!=(const const_iterator& __it) const $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
operator !=	stl/stl_hashtable.h	/^  bool operator!=(const iterator& __it) const$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(const iterator& __it) const
operator !=	stl/stl_hashtable.h	/^inline bool operator!=(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator !=	stl/stl_iterator.h	/^inline bool operator!=($/;"	f	namespace:std	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
operator !=	stl/stl_iterator.h	/^inline bool operator!=(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
operator !=	stl/stl_iterator.h	/^inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
operator !=	stl/stl_iterator.h	/^inline bool operator!=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator !=	stl/stl_iterator.h	/^operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
operator !=	stl/stl_iterator.h	/^operator!=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator !=	stl/stl_list.h	/^  bool operator!=(const _List_iterator_base& __x) const {$/;"	f	struct:std::_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
operator !=	stl/stl_list.h	/^inline bool operator!=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator !=	stl/stl_map.h	/^inline bool operator!=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator !=	stl/stl_multimap.h	/^inline bool operator!=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator !=	stl/stl_multiset.h	/^inline bool operator!=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator !=	stl/stl_pair.h	/^inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator !=	stl/stl_queue.h	/^operator!=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator !=	stl/stl_relops.h	/^inline bool operator!=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator !=	stl/stl_rope.h	/^operator!= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator !=	stl/stl_set.h	/^inline bool operator!=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator !=	stl/stl_slist.h	/^  bool operator!=(const _Slist_iterator_base& __x) const {$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
operator !=	stl/stl_slist.h	/^operator!=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator !=	stl/stl_stack.h	/^bool operator!=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator !=	stl/stl_tree.h	/^inline bool operator!=(const _Rb_tree_base_iterator& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
operator !=	stl/stl_tree.h	/^operator!=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator !=	stl/stl_vector.h	/^operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator &	stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator& () const {$/;"	f	class:std::_Rope_char_ref_proxy	signature:() const
operator &	stl/stl_rope.h	/^    _Rope_char_ptr_proxy<_CharT,_Alloc> operator& () const;$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:() const
operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n);$/;"	p	class:std::_Rope_insert_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
operator ()	stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT, _Traits>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
operator ()	stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
operator ()	stl/ropeimpl.h	/^  inline bool _Rope_insert_char_consumer<char>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const char* __leaf, size_t __n)
operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Eq_int_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::int_type& __y) const
operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Eq_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Lt_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
operator ()	stl/stl_function.h	/^    _Result operator()(_Arg1 __x, _Arg2 __y) const {$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
operator ()	stl/stl_function.h	/^  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }$/;"	f	struct:std::_Project1st	access:public	signature:(const _Arg1& __x, const _Arg2&) const
operator ()	stl/stl_function.h	/^  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }$/;"	f	struct:std::_Project2nd	access:public	signature:(const _Arg1&, const _Arg2& __y) const
operator ()	stl/stl_function.h	/^  _Result operator()(_Arg __x) const { return _M_ptr(__x); }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Arg __x) const
operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x) const { return -__x; }$/;"	f	struct:std::negate	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }$/;"	f	struct:std::modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }$/;"	f	struct:std::multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }$/;"	f	struct:std::plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }$/;"	f	struct:std::minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x \/ __y; }$/;"	f	struct:std::divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:std::logical_not	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }$/;"	f	struct:std::not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }$/;"	f	struct:std::logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }$/;"	f	struct:std::less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }$/;"	f	struct:std::less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }$/;"	f	struct:std::equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }$/;"	f	struct:std::greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }$/;"	f	struct:std::greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }$/;"	f	struct:std::logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
operator ()	stl/stl_function.h	/^  bool operator()(const typename _Predicate::argument_type& __x) const {$/;"	f	class:std::unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
operator ()	stl/stl_function.h	/^  bool operator()(const typename _Predicate::first_argument_type& __x, $/;"	f	class:std::binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
operator ()	stl/stl_function.h	/^  const _Tp& operator()(const _Tp& __x) const { return __x; }$/;"	f	struct:std::_Identity	access:public	signature:(const _Tp& __x) const
operator ()	stl/stl_function.h	/^  const result_type& operator()() const { return _M_val; }$/;"	f	struct:std::_Constant_void_fun	access:public	signature:() const
operator ()	stl/stl_function.h	/^  const result_type& operator()(const _Arg1&, const _Arg2&) const {$/;"	f	struct:std::_Constant_binary_fun	access:public	signature:(const _Arg1&, const _Arg2&) const
operator ()	stl/stl_function.h	/^  const result_type& operator()(const _Argument&) const { return _M_val; }$/;"	f	struct:std::_Constant_unary_fun	access:public	signature:(const _Argument&) const
operator ()	stl/stl_function.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:std::_Select1st	access:public	signature:(const _Pair& __x) const
operator ()	stl/stl_function.h	/^  const typename _Pair::second_type& operator()(const _Pair& __x) const {$/;"	f	struct:std::_Select2nd	access:public	signature:(const _Pair& __x) const
operator ()	stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:std::binary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
operator ()	stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:std::unary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
operator ()	stl/stl_function.h	/^  operator()(const typename _Operation::first_argument_type& __x) const {$/;"	f	class:std::binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
operator ()	stl/stl_function.h	/^  operator()(const typename _Operation::second_argument_type& __x) const {$/;"	f	class:std::binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
operator ()	stl/stl_function.h	/^  unsigned int operator()(unsigned int __limit) {$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __limit)
operator ()	stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
operator ()	stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
operator ()	stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
operator ()	stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
operator ()	stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
operator ()	stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
operator ()	stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(char __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(char __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }$/;"	f	struct:std::hash	access:public	signature:(const char* __s) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(int __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(int __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(long __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(long __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(short __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(short __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned char __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned char __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned int __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned int __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned long __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned long __x) const
operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned short __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned short __x) const
operator ()	stl/stl_map.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:std::map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator ()	stl/stl_multimap.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:std::multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
operator ()	stl/stl_rope.h	/^        rope<_CharT,_Alloc> operator() (const rope<_CharT,_Alloc>& __x,$/;"	f	struct:std::_Rope_Concat_fn	access:public	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator ()	stl/stl_rope.h	/^        virtual bool operator()(const _CharT* __buffer, size_t __len) = 0;$/;"	p	class:std::_Rope_char_consumer	access:public	signature:(const _CharT* __buffer, size_t __len)
operator ()	stl/stl_rope.h	/^        virtual void operator()(size_t __start_pos, size_t __len, $/;"	p	class:std::char_producer	access:public	signature:(size_t __start_pos, size_t __len, _CharT* __buffer)
operator ()	stl/stl_rope.h	/^    virtual void operator()(size_t __start_pos, size_t __req_len,$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:(size_t __start_pos, size_t __req_len, _CharT* __buffer)
operator ()	stl/stl_rope.h	/^  size_t operator()(const crope& __str) const$/;"	f	struct:std::hash	access:public	signature:(const crope& __str) const
operator ()	stl/stl_rope.h	/^  size_t operator()(const wrope& __str) const$/;"	f	struct:std::hash	access:public	signature:(const wrope& __str) const
operator *	stl/stl_bvector.h	/^  const_reference operator*() const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:() const
operator *	stl/stl_bvector.h	/^  reference operator*() const { return reference(_M_p, 1U << _M_offset); }$/;"	f	struct:std::_Bit_iterator	access:public	signature:() const
operator *	stl/stl_deque.h	/^  reference operator*() const { return *_M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator *	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:() const
operator *	stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^  _Reference operator*() const { return *(current - 1); }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^  _Reference operator*() const {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^  char_type operator*() const $/;"	f	class:std::istreambuf_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator*() { return *this; }$/;"	f	class:std::ostream_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^  ostreambuf_iterator& operator*()     { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
operator *	stl/stl_iterator.h	/^  reference operator*() const { return _M_value; }$/;"	f	class:std::istream_iterator	access:public	signature:() const
operator *	stl/stl_iterator.h	/^  reference operator*() const {$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator *	stl/stl_list.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator *	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator *	stl/stl_rope.h	/^        sequence_buffer& operator*() { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:()
operator *	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>& operator*() { return *_M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
operator *	stl/stl_rope.h	/^    _Rope_char_ref_proxy<_CharT,_Alloc> operator*() const {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:() const
operator *	stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
operator *	stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
operator *	stl/stl_slist.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	stl/stl_slist.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:std::_Slist_iterator	access:public	signature:() const
operator *	stl/stl_tree.h	/^  reference operator*() const { return _Link_type(_M_node)->_M_value_field; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator +	stl/stl_bvector.h	/^  const_iterator operator+(difference_type __i) const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator +	stl/stl_bvector.h	/^  iterator operator+(difference_type __i) const {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator +	stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
operator +	stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
operator +	stl/stl_deque.h	/^  _Self operator+(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator +	stl/stl_deque.h	/^operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
operator +	stl/stl_iterator.h	/^  _Self operator+(_Distance __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
operator +	stl/stl_iterator.h	/^  _Self operator+(difference_type __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator +	stl/stl_iterator.h	/^operator+(_Dist __n,$/;"	f	namespace:std	signature:(_Dist __n, const reverse_iterator<_RandAccIter, _Tp, _Ref, _Dist>& __x)
operator +	stl/stl_iterator.h	/^operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left, _CharT2 __right);$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, _CharT2 __right)
operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const _CharT2* __right)
operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const rope<_CharT2,_Alloc2>& __right)
operator +	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT2,_Alloc2>& __x)
operator +	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT2,_Alloc2>& __x)
operator +	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
operator +	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator +	stl/stl_rope.h	/^operator+(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^operator+(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator +	stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x) {$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
operator +	stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x) {$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator ++	stl/stl_bvector.h	/^  const_iterator operator++(int) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator ++	stl/stl_bvector.h	/^  const_iterator& operator++() {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator ++	stl/stl_bvector.h	/^  iterator operator++(int) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator ++	stl/stl_bvector.h	/^  iterator& operator++() {$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator ++	stl/stl_deque.h	/^  _Self operator++(int)  {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator ++	stl/stl_deque.h	/^  _Self& operator++() {$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator ++	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	stl/stl_hashtable.h	/^  const_iterator operator++(int);$/;"	p	struct:std::_Hashtable_const_iterator	access:public	signature:(int)
operator ++	stl/stl_hashtable.h	/^  const_iterator& operator++();$/;"	p	struct:std::_Hashtable_const_iterator	access:public	signature:()
operator ++	stl/stl_hashtable.h	/^  iterator operator++(int);$/;"	p	struct:std::_Hashtable_iterator	access:public	signature:(int)
operator ++	stl/stl_hashtable.h	/^  iterator& operator++();$/;"	p	struct:std::_Hashtable_iterator	access:public	signature:()
operator ++	stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:std::_Hashtable_const_iterator	signature:()
operator ++	stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:std::_Hashtable_const_iterator	signature:(int)
operator ++	stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:std::_Hashtable_iterator	signature:()
operator ++	stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:std::_Hashtable_iterator	signature:(int)
operator ++	stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  istream_iterator operator++(int)  {$/;"	f	class:std::istream_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  istream_iterator& operator++() { $/;"	f	class:std::istream_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist> operator++(int)  {$/;"	f	class:std::istream_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist>& operator++() { $/;"	f	class:std::istream_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  istreambuf_iterator  operator++(int) {$/;"	f	class:std::istreambuf_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  istreambuf_iterator& operator++() { this->_M_nextc(); return *this; }$/;"	f	class:std::istreambuf_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++() { return *this; } $/;"	f	class:std::ostream_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++(int) { return *this; } $/;"	f	class:std::ostream_iterator	access:public	signature:(int)
operator ++	stl/stl_iterator.h	/^  ostreambuf_iterator& operator++()    { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
operator ++	stl/stl_iterator.h	/^  ostreambuf_iterator& operator++(int) { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(int)
operator ++	stl/stl_list.h	/^  _Self operator++(int) { $/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator ++	stl/stl_list.h	/^  _Self& operator++() { $/;"	f	struct:std::_List_iterator	access:public	signature:()
operator ++	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {$/;"	f	class:std::raw_storage_iterator	access:public	signature:(int)
operator ++	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
operator ++	stl/stl_rope.h	/^        sequence_buffer& operator++() { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:()
operator ++	stl/stl_rope.h	/^        sequence_buffer& operator++(int) { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:(int)
operator ++	stl/stl_rope.h	/^    _Rope_const_iterator operator++(int) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(int)
operator ++	stl/stl_rope.h	/^    _Rope_const_iterator& operator++() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
operator ++	stl/stl_rope.h	/^    _Rope_iterator operator++(int) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(int)
operator ++	stl/stl_rope.h	/^    _Rope_iterator& operator++() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
operator ++	stl/stl_slist.h	/^  _Self operator++(int)$/;"	f	struct:std::_Slist_iterator	access:public	signature:(int)
operator ++	stl/stl_slist.h	/^  _Self& operator++()$/;"	f	struct:std::_Slist_iterator	access:public	signature:()
operator ++	stl/stl_slist.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	stl/stl_slist.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	stl/stl_tree.h	/^  _Self operator++(int) {$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator ++	stl/stl_tree.h	/^  _Self& operator++() { _M_increment(); return *this; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator +=	stl/stl_bvector.h	/^  const_iterator& operator+=(difference_type __i) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator +=	stl/stl_bvector.h	/^  iterator& operator+=(difference_type __i) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator +=	stl/stl_deque.h	/^  _Self& operator+=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator +=	stl/stl_iterator.h	/^  _Self& operator+=(_Distance __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n)
operator +=	stl/stl_iterator.h	/^  _Self& operator+=(difference_type __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator +=	stl/stl_rope.h	/^    _Rope_const_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
operator +=	stl/stl_rope.h	/^    _Rope_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, _CharT __right)
operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, const _CharT* __right)
operator -	stl/stl_bvector.h	/^  const_iterator operator-(difference_type __i) const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
operator -	stl/stl_bvector.h	/^  iterator operator-(difference_type __i) const {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
operator -	stl/stl_bvector.h	/^operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {$/;"	f	namespace:std	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
operator -	stl/stl_deque.h	/^  _Self operator-(difference_type __n) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator -	stl/stl_deque.h	/^  difference_type operator-(const _Self& __x) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator -	stl/stl_iterator.h	/^  _Self operator-(_Distance __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
operator -	stl/stl_iterator.h	/^  _Self operator-(difference_type __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator -	stl/stl_iterator.h	/^operator-(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator -	stl/stl_iterator.h	/^operator-(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator -	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator -	stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator -	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator-$/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator-$/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator -	stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator -	stl/stl_rope.h	/^operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
operator -	stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator -	stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator --	stl/stl_bvector.h	/^  const_iterator operator--(int) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
operator --	stl/stl_bvector.h	/^  const_iterator& operator--() {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
operator --	stl/stl_bvector.h	/^  iterator operator--(int) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
operator --	stl/stl_bvector.h	/^  iterator& operator--() {$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
operator --	stl/stl_deque.h	/^  _Self operator--(int) {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
operator --	stl/stl_deque.h	/^  _Self& operator--() {$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
operator --	stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(int)
operator --	stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
operator --	stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
operator --	stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:std::reverse_iterator	access:public	signature:()
operator --	stl/stl_list.h	/^  _Self operator--(int) { $/;"	f	struct:std::_List_iterator	access:public	signature:(int)
operator --	stl/stl_list.h	/^  _Self& operator--() { $/;"	f	struct:std::_List_iterator	access:public	signature:()
operator --	stl/stl_rope.h	/^    _Rope_const_iterator operator--(int) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(int)
operator --	stl/stl_rope.h	/^    _Rope_const_iterator& operator--() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
operator --	stl/stl_rope.h	/^    _Rope_iterator operator--(int) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(int)
operator --	stl/stl_rope.h	/^    _Rope_iterator& operator--() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
operator --	stl/stl_tree.h	/^  _Self operator--(int) {$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
operator --	stl/stl_tree.h	/^  _Self& operator--() { _M_decrement(); return *this; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
operator -=	stl/stl_bvector.h	/^  const_iterator& operator-=(difference_type __i) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator -=	stl/stl_bvector.h	/^  iterator& operator-=(difference_type __i) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator -=	stl/stl_deque.h	/^  _Self& operator-=(difference_type __n) { return *this += -__n; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
operator -=	stl/stl_iterator.h	/^  _Self& operator-=(_Distance __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n)
operator -=	stl/stl_iterator.h	/^  _Self& operator-=(difference_type __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
operator -=	stl/stl_rope.h	/^    _Rope_const_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
operator -=	stl/stl_rope.h	/^    _Rope_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator ->	stl/stl_deque.h	/^  pointer operator->() const { return _M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
operator ->	stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:() const
operator ->	stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:() const
operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::istream_iterator	access:public	signature:() const
operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
operator ->	stl/stl_list.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_List_iterator	access:public	signature:() const
operator ->	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* operator->() { return _M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
operator ->	stl/stl_slist.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Slist_iterator	access:public	signature:() const
operator ->	stl/stl_tree.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
operator <	stl/stl_bvector.h	/^  bool operator<(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <	stl/stl_bvector.h	/^  bool operator<(const _Bit_reference& __x) const {$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator <	stl/stl_bvector.h	/^operator<(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator <	stl/stl_deque.h	/^  bool operator<(const _Self& __x) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator <	stl/stl_deque.h	/^inline bool operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <	stl/stl_iterator.h	/^inline bool operator<(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <	stl/stl_iterator.h	/^operator<(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator <	stl/stl_list.h	/^inline bool operator<(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator <	stl/stl_map.h	/^  friend bool operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator <	stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	stl/stl_multimap.h	/^  friend bool operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator <	stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <	stl/stl_multiset.h	/^  friend bool operator< (const multiset<_K1,_C1,_A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
operator <	stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <	stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <	stl/stl_pair.h	/^inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <	stl/stl_queue.h	/^  friend bool operator< (const queue<_Tp1, _Seq1>&,$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator <	stl/stl_queue.h	/^inline bool operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	namespace:std	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
operator <	stl/stl_queue.h	/^operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator <	stl/stl_rope.h	/^    friend bool operator< $/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator <	stl/stl_rope.h	/^    friend bool operator<$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator <	stl/stl_rope.h	/^bool operator< $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <	stl/stl_rope.h	/^bool operator< $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <	stl/stl_rope.h	/^inline bool operator< (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <	stl/stl_rope.h	/^inline bool operator< (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <	stl/stl_rope.h	/^operator< (const rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator <	stl/stl_set.h	/^  friend bool operator< (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
operator <	stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <	stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <	stl/stl_slist.h	/^operator<(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator <	stl/stl_stack.h	/^  friend bool operator< (const stack<_Tp1, _Seq1>&,$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator <	stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <	stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <	stl/stl_tree.h	/^operator<(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator <	stl/stl_vector.h	/^operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator <<	stl/ropeimpl.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
operator <<	stl/stl_rope.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	p	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
operator <<	stl/stl_rope.h	/^  ostream& operator<< (ostream& __o, const rope<_CharT, _Alloc>& __r);$/;"	p	namespace:std	signature:(ostream& __o, const rope<_CharT, _Alloc>& __r)
operator <=	stl/stl_bvector.h	/^  bool operator<=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator <=	stl/stl_bvector.h	/^inline bool operator<=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator <=	stl/stl_deque.h	/^  bool operator<=(const _Self& __x) const { return !(__x < *this); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator <=	stl/stl_deque.h	/^inline bool operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator <=	stl/stl_iterator.h	/^inline bool operator<=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator <=	stl/stl_iterator.h	/^operator<=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator <=	stl/stl_list.h	/^inline bool operator<=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator <=	stl/stl_map.h	/^inline bool operator<=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator <=	stl/stl_multimap.h	/^inline bool operator<=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator <=	stl/stl_multiset.h	/^inline bool operator<=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator <=	stl/stl_pair.h	/^inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator <=	stl/stl_queue.h	/^operator<=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator <=	stl/stl_relops.h	/^inline bool operator<=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator <=	stl/stl_rope.h	/^inline bool operator<= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator <=	stl/stl_rope.h	/^inline bool operator<= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator <=	stl/stl_rope.h	/^operator<= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator <=	stl/stl_set.h	/^inline bool operator<=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator <=	stl/stl_slist.h	/^operator<=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator <=	stl/stl_stack.h	/^bool operator<=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator <=	stl/stl_tree.h	/^operator<=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator <=	stl/stl_vector.h	/^operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator =	stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator= (_CharT __c) {$/;"	f	class:std::_Rope_char_ref_proxy	signature:(_CharT __c)
operator =	stl/stl_bvector.h	/^  _Bit_reference& operator=(bool __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(bool __x)
operator =	stl/stl_bvector.h	/^  _Bit_reference& operator=(const _Bit_reference& __x) $/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x)
operator =	stl/stl_bvector.h	/^  __VECTOR& operator=(const __VECTOR& __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(const __VECTOR& __x)
operator =	stl/stl_deque.h	/^  deque& operator= (const deque& __x) {$/;"	f	class:std::deque	access:public	signature:(const deque& __x)
operator =	stl/stl_hash_map.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_hash_set.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_hashtable.h	/^  hashtable& operator= (const hashtable& __ht)$/;"	f	class:std::hashtable	access:public	signature:(const hashtable& __ht)
operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::back_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::front_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator=(const _Tp& __value) { $/;"	f	class:std::ostream_iterator	access:public	signature:(const _Tp& __value)
operator =	stl/stl_iterator.h	/^  ostreambuf_iterator& operator=(char_type __c) {$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(char_type __c)
operator =	stl/stl_list.h	/^  list<_Tp, _Alloc>& operator=(const list<_Tp, _Alloc>& __x);$/;"	p	class:std::list	access:public	signature:(const list<_Tp, _Alloc>& __x)
operator =	stl/stl_list.h	/^list<_Tp, _Alloc>& list<_Tp, _Alloc>::operator=(const list<_Tp, _Alloc>& __x)$/;"	f	class:std::list	signature:(const list<_Tp, _Alloc>& __x)
operator =	stl/stl_map.h	/^  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)$/;"	f	class:std::map	access:public	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x)
operator =	stl/stl_multimap.h	/^  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {$/;"	f	class:std::multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
operator =	stl/stl_multiset.h	/^  operator=(const multiset<_Key,_Compare,_Alloc>& __x) {$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
operator =	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator=(const _Tp& __element) {$/;"	f	class:std::raw_storage_iterator	access:public	signature:(const _Tp& __element)
operator =	stl/stl_rope.h	/^        rope& operator=(const rope& __x)$/;"	f	class:std::rope	access:public	signature:(const rope& __x)
operator =	stl/stl_rope.h	/^        sequence_buffer& operator= (const sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(const sequence_buffer& __x)
operator =	stl/stl_rope.h	/^        sequence_buffer& operator= (sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(sequence_buffer& __x)
operator =	stl/stl_rope.h	/^        sequence_buffer& operator=(const value_type& __rhs)$/;"	f	class:std::sequence_buffer	access:public	signature:(const value_type& __rhs)
operator =	stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (_CharT __c);$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:(_CharT __c)
operator =	stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (const _Rope_char_ref_proxy& __c) {$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __c)
operator =	stl/stl_rope.h	/^    _Rope_const_iterator& operator= (const _Rope_const_iterator& __x) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
operator =	stl/stl_rope.h	/^    _Rope_iterator& operator= (const _Rope_iterator& __x) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
operator =	stl/stl_rope.h	/^    _Rope_self_destruct_ptr& operator= (_Rope_RopeRep<_CharT,_Alloc>* __x)$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __x)
operator =	stl/stl_rope.h	/^    operator= (const _Rope_char_ptr_proxy& __x) {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
operator =	stl/stl_set.h	/^  set<_Key,_Compare,_Alloc>& operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
operator =	stl/stl_slist.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
operator =	stl/stl_slist.h	/^  slist& operator= (const slist& __x);$/;"	p	class:std::slist	access:public	signature:(const slist& __x)
operator =	stl/stl_slist.h	/^slist<_Tp,_Alloc>& slist<_Tp,_Alloc>::operator=(const slist<_Tp,_Alloc>& __x)$/;"	f	class:std::slist	signature:(const slist<_Tp,_Alloc>& __x)
operator =	stl/stl_tempbuf.h	/^  void operator=(const _Temporary_buffer&) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
operator =	stl/stl_threads.h	/^  void operator=(const _STL_auto_lock&);$/;"	p	struct:std::_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
operator =	stl/stl_tree.h	/^  ::operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
operator =	stl/stl_tree.h	/^  operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
operator =	stl/stl_vector.h	/^  vector<_Tp, _Alloc>& operator=(const vector<_Tp, _Alloc>& __x);$/;"	p	class:std::vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
operator =	stl/stl_vector.h	/^vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)$/;"	f	class:std::vector	signature:(const vector<_Tp, _Alloc>& __x)
operator ==	stl/stl_alloc.h	/^inline bool operator==(const __allocator<_Tp, _Alloc>& __a1,$/;"	f	signature:(const __allocator<_Tp, _Alloc>& __a1, const __allocator<_Tp, _Alloc>& __a2)
operator ==	stl/stl_alloc.h	/^inline bool operator==(const __default_alloc_template<__threads, __inst>&,$/;"	f	namespace:std	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
operator ==	stl/stl_alloc.h	/^inline bool operator==(const __malloc_alloc_template<inst>&,$/;"	f	signature:(const __malloc_alloc_template<inst>&, const __malloc_alloc_template<inst>&)
operator ==	stl/stl_alloc.h	/^inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) $/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
operator ==	stl/stl_alloc.h	/^inline bool operator==(const debug_alloc<_Alloc>&,$/;"	f	signature:(const debug_alloc<_Alloc>&, const debug_alloc<_Alloc>&)
operator ==	stl/stl_bvector.h	/^  bool operator==(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator ==	stl/stl_bvector.h	/^  bool operator==(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
operator ==	stl/stl_bvector.h	/^operator==(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator ==	stl/stl_deque.h	/^  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator ==	stl/stl_deque.h	/^inline bool operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator ==	stl/stl_hash_map.h	/^  friend bool operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_map	access:friend	signature:(const hash_map<_K1, _T1, _HF, _EqK, _Al>&, const hash_map<_K1, _T1, _HF, _EqK, _Al>&)
operator ==	stl/stl_hash_map.h	/^  friend bool operator== (const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_multimap	access:friend	signature:(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&, const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&)
operator ==	stl/stl_hash_map.h	/^inline bool operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,$/;"	p	namespace:std	signature:(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&, const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&)
operator ==	stl/stl_hash_map.h	/^operator==(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
operator ==	stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator ==	stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	p	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
operator ==	stl/stl_hash_set.h	/^  friend bool operator== (const hash_multiset<_Val, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_multiset	access:friend	signature:(const hash_multiset<_Val, _HF, _EqK, _Al>&, const hash_multiset<_Val, _HF, _EqK, _Al>&)
operator ==	stl/stl_hash_set.h	/^  friend bool operator== (const hash_set<_Val, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_set	access:friend	signature:(const hash_set<_Val, _HF, _EqK, _Al>&, const hash_set<_Val, _HF, _EqK, _Al>&)
operator ==	stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
operator ==	stl/stl_hashtable.h	/^  bool operator==(const const_iterator& __it) const $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
operator ==	stl/stl_hashtable.h	/^  bool operator==(const iterator& __it) const$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(const iterator& __it) const
operator ==	stl/stl_hashtable.h	/^  friend bool operator== (const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,$/;"	p	class:std::hashtable	access:friend	signature:(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&, const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&)
operator ==	stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator ==	stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	p	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
operator ==	stl/stl_iterator.h	/^  friend bool operator==(const istream_iterator<_T1, _D1>&,$/;"	p	class:std::istream_iterator	access:friend	signature:(const istream_iterator<_T1, _D1>&, const istream_iterator<_T1, _D1>&)
operator ==	stl/stl_iterator.h	/^inline bool operator==($/;"	f	namespace:std	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
operator ==	stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Dist>&,$/;"	p	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&, const istream_iterator<_Tp, _Dist>&)
operator ==	stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
operator ==	stl/stl_iterator.h	/^inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
operator ==	stl/stl_iterator.h	/^inline bool operator==(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator ==	stl/stl_iterator.h	/^operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
operator ==	stl/stl_iterator.h	/^operator==(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator ==	stl/stl_list.h	/^  bool operator==(const _List_iterator_base& __x) const {$/;"	f	struct:std::_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
operator ==	stl/stl_list.h	/^operator==(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator ==	stl/stl_map.h	/^  friend bool operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
operator ==	stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	stl/stl_multimap.h	/^  friend bool operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
operator ==	stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator ==	stl/stl_multiset.h	/^  friend bool operator== (const multiset<_K1,_C1,_A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
operator ==	stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator ==	stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator ==	stl/stl_pair.h	/^inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator ==	stl/stl_queue.h	/^  friend bool operator== (const queue<_Tp1, _Seq1>&,$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
operator ==	stl/stl_queue.h	/^inline bool operator==(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	namespace:std	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
operator ==	stl/stl_queue.h	/^operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator ==	stl/stl_rope.h	/^    friend bool operator== (const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x,$/;"	p	class:std::_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x, const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __y)
operator ==	stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
operator ==	stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
operator ==	stl/stl_rope.h	/^bool operator== $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^bool operator== $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	p	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator ==	stl/stl_rope.h	/^operator== (const rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
operator ==	stl/stl_set.h	/^  friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
operator ==	stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator ==	stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator ==	stl/stl_slist.h	/^  bool operator==(const _Slist_iterator_base& __x) const {$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
operator ==	stl/stl_slist.h	/^operator==(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator ==	stl/stl_stack.h	/^  friend bool operator== (const stack<_Tp1, _Seq1>&,$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
operator ==	stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator ==	stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator ==	stl/stl_tree.h	/^inline bool operator==(const _Rb_tree_base_iterator& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
operator ==	stl/stl_tree.h	/^operator==(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator ==	stl/stl_vector.h	/^operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >	stl/stl_bvector.h	/^  bool operator>(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >	stl/stl_bvector.h	/^inline bool operator>(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator >	stl/stl_deque.h	/^  bool operator>(const _Self& __x) const  { return __x < *this; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator >	stl/stl_deque.h	/^inline bool operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >	stl/stl_iterator.h	/^inline bool operator>(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >	stl/stl_iterator.h	/^operator>(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator >	stl/stl_list.h	/^inline bool operator>(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator >	stl/stl_map.h	/^inline bool operator>(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator >	stl/stl_multimap.h	/^inline bool operator>(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator >	stl/stl_multiset.h	/^inline bool operator>(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator >	stl/stl_pair.h	/^inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >	stl/stl_queue.h	/^operator>(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator >	stl/stl_relops.h	/^inline bool operator>(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator >	stl/stl_rope.h	/^inline bool operator> (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator >	stl/stl_rope.h	/^inline bool operator> (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator >	stl/stl_rope.h	/^operator> (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator >	stl/stl_set.h	/^inline bool operator>(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator >	stl/stl_slist.h	/^operator>(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator >	stl/stl_stack.h	/^bool operator>(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator >	stl/stl_tree.h	/^operator>(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator >	stl/stl_vector.h	/^operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator >=	stl/stl_bvector.h	/^  bool operator>=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
operator >=	stl/stl_bvector.h	/^inline bool operator>=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
operator >=	stl/stl_deque.h	/^  bool operator>=(const _Self& __x) const { return !(*this < __x); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
operator >=	stl/stl_deque.h	/^inline bool operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
operator >=	stl/stl_iterator.h	/^inline bool operator>=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
operator >=	stl/stl_iterator.h	/^operator>=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
operator >=	stl/stl_list.h	/^inline bool operator>=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
operator >=	stl/stl_map.h	/^inline bool operator>=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
operator >=	stl/stl_multimap.h	/^inline bool operator>=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
operator >=	stl/stl_multiset.h	/^inline bool operator>=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
operator >=	stl/stl_pair.h	/^inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
operator >=	stl/stl_queue.h	/^operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
operator >=	stl/stl_relops.h	/^inline bool operator>=(const _Tp& __x, const _Tp& __y) {$/;"	f	signature:(const _Tp& __x, const _Tp& __y)
operator >=	stl/stl_rope.h	/^inline bool operator>= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
operator >=	stl/stl_rope.h	/^inline bool operator>= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
operator >=	stl/stl_rope.h	/^operator>= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
operator >=	stl/stl_set.h	/^inline bool operator>=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
operator >=	stl/stl_slist.h	/^operator>=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
operator >=	stl/stl_stack.h	/^bool operator>=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
operator >=	stl/stl_tree.h	/^operator>=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
operator >=	stl/stl_vector.h	/^operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
operator []	stl/stl_bvector.h	/^  const_reference operator[](difference_type __i) { $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
operator []	stl/stl_bvector.h	/^  const_reference operator[](size_type __n) const$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
operator []	stl/stl_bvector.h	/^  reference operator[](difference_type __i) { return *(*this + __i); }$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
operator []	stl/stl_bvector.h	/^  reference operator[](size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
operator []	stl/stl_deque.h	/^  const_reference operator[](size_type __n) const $/;"	f	class:std::deque	access:public	signature:(size_type __n) const
operator []	stl/stl_deque.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
operator []	stl/stl_deque.h	/^  reference operator[](size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
operator []	stl/stl_hash_map.h	/^  _Tp& operator[](const key_type& __key) {$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
operator []	stl/stl_iterator.h	/^  _Reference operator[](_Distance __n) const { return *(*this + __n); }$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
operator []	stl/stl_iterator.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }  $/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
operator []	stl/stl_map.h	/^  _Tp& operator[](const key_type& __k) {$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
operator []	stl/stl_rope.h	/^            reference operator[] (size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
operator []	stl/stl_rope.h	/^        _CharT operator[] (size_type __pos) const {$/;"	f	class:std::rope	access:public	signature:(size_type __pos) const
operator []	stl/stl_rope.h	/^    reference operator[](ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
operator []	stl/stl_rope.h	/^    reference operator[](size_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(size_t __n)
operator []	stl/stl_vector.h	/^  const_reference operator[](size_type __n) const { return *(begin() + __n); }$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
operator []	stl/stl_vector.h	/^  reference operator[](size_type __n) { return *(begin() + __n); }$/;"	f	class:std::vector	access:public	signature:(size_type __n)
operator _CharT	stl/ropeimpl.h	/^inline _Rope_char_ref_proxy<_CharT, _Alloc>::operator _CharT () const$/;"	f	class:std::_Rope_char_ref_proxy	signature:() const
operator _CharT	stl/stl_rope.h	/^    inline operator _CharT () const;$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:() const
operator _Rope_RopeRep<_CharT,_Alloc>*	stl/stl_rope.h	/^    operator _Rope_RopeRep<_CharT,_Alloc>*() { return _M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
operator bool	stl/stl_bvector.h	/^  operator bool() const { return !(!(*_M_p & _M_mask)); }$/;"	f	struct:std::_Bit_reference	access:public	signature:() const
ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream& __s)
ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream& __s, const char* __c) $/;"	f	class:std::ostream_iterator	access:public	signature:(ostream& __s, const char* __c)
ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s)
ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s, const _CharT* __c) $/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s, const _CharT* __c)
ostream_iterator	stl/stl_iterator.h	/^class ostream_iterator {$/;"	c	namespace:std
ostream_type	stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	access:public
ostream_type	stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:std::ostream_iterator	access:public
ostreambuf_iterator	stl/stl_iterator.h	/^  ostreambuf_iterator(ostream_type& __o)$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type& __o)
ostreambuf_iterator	stl/stl_iterator.h	/^  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf) {}$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type* __buf)
ostreambuf_iterator	stl/stl_iterator.h	/^class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator
other	stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:__allocator::rebind	access:public
other	stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:std::__allocator::rebind	access:public
other	stl/stl_alloc.h	/^    typedef allocator<_Tp1> other;$/;"	t	struct:std::allocator::rebind	access:public
output_iterator	stl/stl_iterator_base.h	/^struct output_iterator {$/;"	s	namespace:std
output_iterator_tag	stl/stl_iterator_base.h	/^struct output_iterator_tag {};$/;"	s	namespace:std
pair	stl/stl_pair.h	/^  pair() : first(_T1()), second(_T2()) {}$/;"	f	struct:std::pair	access:public	signature:()
pair	stl/stl_pair.h	/^  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}$/;"	f	struct:std::pair	access:public	signature:(const _T1& __a, const _T2& __b)
pair	stl/stl_pair.h	/^  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1, _U2>& __p)
pair	stl/stl_pair.h	/^struct pair {$/;"	s	namespace:std
partial_sort	stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last)
partial_sort	stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Compare __comp)
partial_sort_copy	stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last)
partial_sort_copy	stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp)
partial_sum	stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
partial_sum	stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
partition	stl/stl_algo.h	/^inline _ForwardIter partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
plus	stl/stl_function.h	/^struct plus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
pointer	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::pointer pointer;$/;"	t	struct:__pointer_type_definition_requirement_violation	access:public
pointer	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(pointer);$/;"	v
pointer	stl/defalloc.h	/^    typedef T* pointer;$/;"	t	class:allocator	access:public
pointer	stl/defalloc.h	/^    typedef void* pointer;$/;"	t	class:allocator	access:public
pointer	stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	class:std::allocator	access:public
pointer	stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	struct:std::__allocator	access:public
pointer	stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:__allocator	access:private
pointer	stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:std::allocator	access:public
pointer	stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	class:std::__BVECTOR	access:public
pointer	stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	struct:std::_Bit_iterator	access:public
pointer	stl/stl_bvector.h	/^  typedef const bool*          pointer;$/;"	t	struct:std::_Bit_const_iterator	access:public
pointer	stl/stl_deque.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_Deque_iterator	access:public
pointer	stl/stl_deque.h	/^  typedef value_type* pointer;$/;"	t	class:std::deque	access:public
pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:std::hash_map	access:public
pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:std::hash_multimap	access:public
pointer	stl/stl_hash_map.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:std::hash_multiset	access:public
pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:std::hash_set	access:public
pointer	stl/stl_hash_set.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
pointer	stl/stl_hashtable.h	/^  typedef _Val* pointer;$/;"	t	struct:std::_Hashtable_iterator	access:public
pointer	stl/stl_hashtable.h	/^  typedef const _Val* pointer;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
pointer	stl/stl_hashtable.h	/^  typedef value_type*       pointer;$/;"	t	class:std::hashtable	access:public
pointer	stl/stl_iterator.h	/^          pointer;$/;"	t	class:std::reverse_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:std::reverse_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef const _Tp*                     pointer;$/;"	t	class:std::istream_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef const _Tp*          pointer;$/;"	t	class:std::istream_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef void                           pointer;$/;"	t	class:std::ostream_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::back_insert_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::front_insert_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::ostream_iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Pointer   pointer;$/;"	t	struct:std::iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:std::bidirectional_iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:std::random_access_iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                 pointer;$/;"	t	struct:std::forward_iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef _Tp*               pointer;$/;"	t	struct:std::input_iterator	access:public
pointer	stl/stl_iterator_base.h	/^  typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_iterator_base.h	/^  typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	access:public
pointer	stl/stl_iterator_base.h	/^  typedef void                pointer;$/;"	t	struct:std::output_iterator	access:public
pointer	stl/stl_list.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_List_iterator	access:public
pointer	stl/stl_list.h	/^  typedef value_type* pointer;$/;"	t	class:std::list	access:public
pointer	stl/stl_map.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:std::map	access:public
pointer	stl/stl_multimap.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:std::multimap	access:public
pointer	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:std::multiset	access:public
pointer	stl/stl_raw_storage_iter.h	/^  typedef void                pointer;$/;"	t	class:std::raw_storage_iterator	access:public
pointer	stl/stl_rope.h	/^        typedef _Rope_char_ptr_proxy<_CharT,_Alloc> pointer;$/;"	t	class:std::rope	access:public
pointer	stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>* pointer;$/;"	t	class:std::_Rope_iterator	access:public
pointer	stl/stl_rope.h	/^    typedef const _CharT* pointer;$/;"	t	class:std::_Rope_const_iterator	access:public
pointer	stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:std::set	access:public
pointer	stl/stl_slist.h	/^  typedef _Ptr             pointer;$/;"	t	struct:std::_Slist_iterator	access:public
pointer	stl/stl_slist.h	/^  typedef value_type*       pointer;$/;"	t	class:std::slist	access:public
pointer	stl/stl_slist.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
pointer	stl/stl_tree.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_Rb_tree_iterator	access:public
pointer	stl/stl_tree.h	/^  typedef value_type* pointer;$/;"	t	class:std::_Rb_tree	access:public
pointer	stl/stl_vector.h	/^  typedef value_type* pointer;$/;"	t	class:std::vector	access:public
pointer_to_binary_function	stl/stl_function.h	/^    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) $/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
pointer_to_binary_function	stl/stl_function.h	/^    pointer_to_binary_function() {}$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	stl/stl_function.h	/^class pointer_to_binary_function : $/;"	c	namespace:std	inherits:binary_function
pointer_to_unary_function	stl/stl_function.h	/^  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
pointer_to_unary_function	stl/stl_function.h	/^  pointer_to_unary_function() {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	stl/stl_function.h	/^class pointer_to_unary_function : public unary_function<_Arg, _Result> {$/;"	c	namespace:std	inherits:unary_function
pop	stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	f	class:std::queue	access:public	signature:()
pop	stl/stl_queue.h	/^  void pop() {$/;"	f	class:std::priority_queue	access:public	signature:()
pop	stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	f	class:std::stack	access:public	signature:()
pop_back	stl/sequence_concepts.h	/^    __s.pop_back();$/;"	p	signature:()
pop_back	stl/stl_bvector.h	/^  void pop_back() { --_M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
pop_back	stl/stl_deque.h	/^  void pop_back() {$/;"	f	class:std::deque	access:public	signature:()
pop_back	stl/stl_list.h	/^  void pop_back() { $/;"	f	class:std::list	access:public	signature:()
pop_back	stl/stl_queue.h	/^      c.pop_back();$/;"	p	signature:()
pop_back	stl/stl_rope.h	/^        void pop_back()$/;"	f	class:std::rope	access:public	signature:()
pop_back	stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	p	signature:()
pop_back	stl/stl_vector.h	/^  void pop_back() {$/;"	f	class:std::vector	access:public	signature:()
pop_front	stl/sequence_concepts.h	/^    __s.pop_front();$/;"	p	signature:()
pop_front	stl/stl_deque.h	/^  void pop_front() {$/;"	f	class:std::deque	access:public	signature:()
pop_front	stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	f	class:std::list	access:public	signature:()
pop_front	stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	p	signature:()
pop_front	stl/stl_rope.h	/^        void pop_front()$/;"	f	class:std::rope	access:public	signature:()
pop_front	stl/stl_slist.h	/^  void pop_front() {$/;"	f	class:std::slist	access:public	signature:()
pop_heap	stl/stl_heap.h	/^inline void pop_heap(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
pop_heap	stl/stl_heap.h	/^pop_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
pos	stl/stl_hashtable.h	/^  const unsigned long* pos = lower_bound(__first, __last, __n);$/;"	l
pos_type	stl/char_traits.h	/^  typedef streampos pos_type;$/;"	t	class:std::__char_traits_base	access:public
power	stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n)
power	stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
prev_permutation	stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
prev_permutation	stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
previous	stl/stl_slist.h	/^  const_iterator previous(const_iterator __pos) const {$/;"	f	class:std::slist	access:public	signature:(const_iterator __pos) const
previous	stl/stl_slist.h	/^  iterator previous(const_iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(const_iterator __pos)
priority_queue	stl/stl_queue.h	/^  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}$/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x)
priority_queue	stl/stl_queue.h	/^  priority_queue() : c() {}$/;"	f	class:std::priority_queue	access:public	signature:()
priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, $/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x)
priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last) $/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last)
priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x, const _Sequence& __s)
priority_queue	stl/stl_queue.h	/^  priority_queue(const _Compare& __x, const _Sequence& __s) $/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x, const _Sequence& __s)
priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last) $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last)
priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x)
priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x, const _Sequence& __c)
priority_queue	stl/stl_queue.h	/^class priority_queue {$/;"	c	namespace:std
project1st	stl/stl_function.h	/^struct project1st : public _Project1st<_Arg1, _Arg2> {};$/;"	s	namespace:std	inherits:_Project1st
project2nd	stl/stl_function.h	/^struct project2nd : public _Project2nd<_Arg1, _Arg2> {};$/;"	s	namespace:std	inherits:_Project2nd
ptr_fun	stl/stl_function.h	/^inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (__x)_Arg))
ptr_fun	stl/stl_function.h	/^ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {$/;"	f	namespace:std	signature:(_Result (__x)_Arg1, _Arg2))
push	stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:std::queue	access:public	signature:(const value_type& __x)
push	stl/stl_queue.h	/^  void push(const value_type& __x) {$/;"	f	class:std::priority_queue	access:public	signature:(const value_type& __x)
push	stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:std::stack	access:public	signature:(const value_type& __x)
push_back	stl/sequence_concepts.h	/^    __s.push_back(__t);$/;"	p	signature:(__t)
push_back	stl/stl_bvector.h	/^  void push_back(bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(bool __x)
push_back	stl/stl_deque.h	/^  void push_back() {$/;"	f	class:std::deque	access:public	signature:()
push_back	stl/stl_deque.h	/^  void push_back(const value_type& __t) {$/;"	f	class:std::deque	access:public	signature:(const value_type& __t)
push_back	stl/stl_iterator.h	/^    container->push_back(__value);$/;"	p	signature:(__value)
push_back	stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	f	class:std::list	access:public	signature:()
push_back	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	f	class:std::list	access:public	signature:(const _Tp& __x)
push_back	stl/stl_queue.h	/^      c.push_back(__x); $/;"	p	signature:(__x)
push_back	stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	p	signature:(__x)
push_back	stl/stl_rope.h	/^        void push_back(_CharT __x)$/;"	f	class:std::rope	access:public	signature:(_CharT __x)
push_back	stl/stl_rope.h	/^        void push_back(value_type __x)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type __x)
push_back	stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	p	signature:(__x)
push_back	stl/stl_vector.h	/^  void push_back() {$/;"	f	class:std::vector	access:public	signature:()
push_back	stl/stl_vector.h	/^  void push_back(const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(const _Tp& __x)
push_front	stl/sequence_concepts.h	/^    __s.push_front(__t);$/;"	p	signature:(__t)
push_front	stl/stl_deque.h	/^  void push_front() {$/;"	f	class:std::deque	access:public	signature:()
push_front	stl/stl_deque.h	/^  void push_front(const value_type& __t) {$/;"	f	class:std::deque	access:public	signature:(const value_type& __t)
push_front	stl/stl_iterator.h	/^    container->push_front(__value);$/;"	p	signature:(__value)
push_front	stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	f	class:std::list	access:public	signature:()
push_front	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	f	class:std::list	access:public	signature:(const _Tp& __x)
push_front	stl/stl_rope.h	/^        void push_front(_CharT __x)$/;"	f	class:std::rope	access:public	signature:(_CharT __x)
push_front	stl/stl_slist.h	/^  void push_front() { __slist_make_link(&this->_M_head, _M_create_node()); }$/;"	f	class:std::slist	access:public	signature:()
push_front	stl/stl_slist.h	/^  void push_front(const value_type& __x)   {$/;"	f	class:std::slist	access:public	signature:(const value_type& __x)
push_heap	stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
push_heap	stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
put	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) _M_o.put(__leaf[__i]);$/;"	p	signature:(__leaf[__i])
put	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) __o.put(__f);$/;"	p	signature:(__f)
put	stl/stl_rope.h	/^        sequence_buffer& put(value_type __x)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type __x)
queue	stl/stl_queue.h	/^  explicit queue(const _Sequence& __c) : c(__c) {}$/;"	f	class:std::queue	access:public	signature:(const _Sequence& __c)
queue	stl/stl_queue.h	/^  queue() : c() {}$/;"	f	class:std::queue	access:public	signature:()
queue	stl/stl_queue.h	/^class queue {$/;"	c	namespace:std
random_access_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct random_access_iterator {$/;"	s	namespace:std
random_access_iterator_tag	stl/stl_iterator_base.h	/^struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
random_sample	stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last)
random_sample	stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last, _RandomNumberGenerator& __rand)
random_sample_n	stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n)
random_sample_n	stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n, _RandomNumberGenerator& __rand)
random_shuffle	stl/stl_algo.h	/^inline void random_shuffle(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
random_shuffle	stl/stl_algo.h	/^void random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _RandomNumberGenerator& __rand)
raw_storage_iterator	stl/stl_raw_storage_iter.h	/^  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
raw_storage_iterator	stl/stl_raw_storage_iter.h	/^class raw_storage_iterator {$/;"	c	namespace:std
rb_tree	stl/stl_tree.h	/^  rb_tree(const _Compare& __comp = _Compare(),$/;"	f	struct:std::rb_tree	access:public	signature:(const _Compare& __comp = _Compare(), const allocator_type& __a = allocator_type())
rb_tree	stl/stl_tree.h	/^struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>$/;"	s	namespace:std	inherits:_Rb_tree
rbegin	stl/container_concepts.h	/^    __c.rbegin();$/;"	p	signature:()
rbegin	stl/stl_bvector.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:std::__BVECTOR	access:public	signature:() const
rbegin	stl/stl_bvector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
rbegin	stl/stl_deque.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:std::deque	access:public	signature:() const
rbegin	stl/stl_deque.h	/^  reverse_iterator rbegin() { return reverse_iterator(_M_finish); }$/;"	f	class:std::deque	access:public	signature:()
rbegin	stl/stl_list.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:std::list	access:public	signature:() const
rbegin	stl/stl_list.h	/^  reverse_iterator rbegin() $/;"	f	class:std::list	access:public	signature:()
rbegin	stl/stl_map.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:std::map	access:public	signature:() const
rbegin	stl/stl_map.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:std::map	access:public	signature:()
rbegin	stl/stl_multimap.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:std::multimap	access:public	signature:() const
rbegin	stl/stl_multimap.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:std::multimap	access:public	signature:()
rbegin	stl/stl_multiset.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:std::multiset	access:public	signature:() const
rbegin	stl/stl_rope.h	/^            const_reverse_iterator rbegin() { return const_rbegin(); }$/;"	f	class:std::rope	access:public	signature:()
rbegin	stl/stl_rope.h	/^            reverse_iterator rbegin() { return mutable_rbegin(); }$/;"	f	class:std::rope	access:public	signature:()
rbegin	stl/stl_rope.h	/^        const_reverse_iterator rbegin() const {$/;"	f	class:std::rope	access:public	signature:() const
rbegin	stl/stl_set.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:std::set	access:public	signature:() const
rbegin	stl/stl_tree.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:std::_Rb_tree	access:public	signature:() const
rbegin	stl/stl_tree.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
rbegin	stl/stl_vector.h	/^  const_reverse_iterator rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
rbegin	stl/stl_vector.h	/^  reverse_iterator rbegin()$/;"	f	class:std::vector	access:public	signature:()
reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t \/* old_sz *\/, size_t __new_sz)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void* __p, size_t , size_t __new_sz)
reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)$/;"	f	class:std::debug_alloc	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz);$/;"	p	class:std::__default_alloc_template	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
reallocate	stl/stl_alloc.h	/^__default_alloc_template<threads, inst>::reallocate(void* __p,$/;"	f	class:std::__default_alloc_template	signature:(void* __p, size_t __old_sz, size_t __new_sz)
rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:__allocator	access:private
rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:std::allocator	access:public
rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	struct:std::__allocator	access:public
reference	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::reference reference;$/;"	t	struct:__reference_type_definition_requirement_violation	access:public
reference	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(reference);$/;"	v
reference	stl/defalloc.h	/^    typedef T& reference;$/;"	t	class:allocator	access:public
reference	stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	class:std::allocator	access:public
reference	stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	struct:std::__allocator	access:public
reference	stl/stl_bvector.h	/^  typedef _Bit_reference  reference;$/;"	t	struct:std::_Bit_iterator	access:public
reference	stl/stl_bvector.h	/^  typedef _Bit_reference reference;$/;"	t	class:std::__BVECTOR	access:public
reference	stl/stl_bvector.h	/^  typedef bool                 reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
reference	stl/stl_deque.h	/^  typedef _Ref reference;$/;"	t	struct:std::_Deque_iterator	access:public
reference	stl/stl_deque.h	/^  typedef value_type& reference;$/;"	t	class:std::deque	access:public
reference	stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:std::hash_map	access:public
reference	stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:std::hash_multimap	access:public
reference	stl/stl_hash_map.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:std::hash_multiset	access:public
reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:std::hash_set	access:public
reference	stl/stl_hash_set.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
reference	stl/stl_hashtable.h	/^  typedef _Val& reference;$/;"	t	struct:std::_Hashtable_iterator	access:public
reference	stl/stl_hashtable.h	/^  typedef const _Val& reference;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
reference	stl/stl_hashtable.h	/^  typedef value_type&       reference;$/;"	t	class:std::hashtable	access:public
reference	stl/stl_iterator.h	/^          reference;$/;"	t	class:std::reverse_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:std::reverse_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef const _Tp&                     reference;$/;"	t	class:std::istream_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef const _Tp&          reference;$/;"	t	class:std::istream_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef void                           reference;$/;"	t	class:std::ostream_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::back_insert_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::front_insert_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::ostream_iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Reference reference;$/;"	t	struct:std::iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:std::bidirectional_iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:std::random_access_iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Tp&                 reference;$/;"	t	struct:std::forward_iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef _Tp&               reference;$/;"	t	struct:std::input_iterator	access:public
reference	stl/stl_iterator_base.h	/^  typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_iterator_base.h	/^  typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	access:public
reference	stl/stl_iterator_base.h	/^  typedef void                reference;$/;"	t	struct:std::output_iterator	access:public
reference	stl/stl_list.h	/^  typedef _Ref reference;$/;"	t	struct:std::_List_iterator	access:public
reference	stl/stl_list.h	/^  typedef value_type& reference;$/;"	t	class:std::list	access:public
reference	stl/stl_map.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:std::map	access:public
reference	stl/stl_multimap.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:std::multimap	access:public
reference	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:std::multiset	access:public
reference	stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::priority_queue	access:public
reference	stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::queue	access:public
reference	stl/stl_raw_storage_iter.h	/^  typedef void                reference;$/;"	t	class:std::raw_storage_iterator	access:public
reference	stl/stl_rope.h	/^        typedef _Rope_char_ref_proxy<_CharT,_Alloc> reference;$/;"	t	class:std::rope	access:public
reference	stl/stl_rope.h	/^    typedef _CharT reference;   \/\/ Really a value.  Returning a reference$/;"	t	class:std::_Rope_const_iterator	access:public
reference	stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>  reference;$/;"	t	class:std::_Rope_iterator	access:public
reference	stl/stl_set.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:std::set	access:public
reference	stl/stl_slist.h	/^  typedef _Ref             reference;$/;"	t	struct:std::_Slist_iterator	access:public
reference	stl/stl_slist.h	/^  typedef value_type&       reference;$/;"	t	class:std::slist	access:public
reference	stl/stl_slist.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
reference	stl/stl_stack.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::stack	access:public
reference	stl/stl_tree.h	/^  typedef _Ref reference;$/;"	t	struct:std::_Rb_tree_iterator	access:public
reference	stl/stl_tree.h	/^  typedef value_type& reference;$/;"	t	class:std::_Rb_tree	access:public
reference	stl/stl_vector.h	/^  typedef value_type& reference;$/;"	t	class:std::vector	access:public
remove	stl/stl_algo.h	/^_ForwardIter remove(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
remove	stl/stl_list.h	/^  void remove(const _Tp& __value);$/;"	p	class:std::list	access:public	signature:(const _Tp& __value)
remove	stl/stl_list.h	/^void list<_Tp, _Alloc>::remove(const _Tp& __value)$/;"	f	class:std::list	signature:(const _Tp& __value)
remove	stl/stl_slist.h	/^  void remove(const _Tp& __val); $/;"	p	class:std::slist	access:public	signature:(const _Tp& __val)
remove	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove(const _Tp& __val)$/;"	f	class:std::slist	signature:(const _Tp& __val)
remove_copy	stl/stl_algo.h	/^_OutputIter remove_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __value)
remove_copy_if	stl/stl_algo.h	/^_OutputIter remove_copy_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred)
remove_if	stl/stl_algo.h	/^_ForwardIter remove_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
remove_if	stl/stl_list.h	/^  template <class _Predicate> void remove_if(_Predicate);$/;"	p	class:std::list	access:public	signature:(_Predicate)
remove_if	stl/stl_list.h	/^void list<_Tp, _Alloc>::remove_if(_Predicate __pred)$/;"	f	class:std::list	signature:(_Predicate __pred)
remove_if	stl/stl_slist.h	/^  void remove_if(_Predicate __pred);$/;"	p	class:std::slist	access:public	signature:(_Predicate __pred)
remove_if	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove_if(_Predicate __pred)$/;"	f	class:std::slist	signature:(_Predicate __pred)
rend	stl/container_concepts.h	/^    __c.rend();$/;"	p	signature:()
rend	stl/stl_bvector.h	/^  const_reverse_iterator rend() const { $/;"	f	class:std::__BVECTOR	access:public	signature:() const
rend	stl/stl_bvector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
rend	stl/stl_deque.h	/^  const_reverse_iterator rend() const $/;"	f	class:std::deque	access:public	signature:() const
rend	stl/stl_deque.h	/^  reverse_iterator rend() { return reverse_iterator(_M_start); }$/;"	f	class:std::deque	access:public	signature:()
rend	stl/stl_list.h	/^  const_reverse_iterator rend() const$/;"	f	class:std::list	access:public	signature:() const
rend	stl/stl_list.h	/^  reverse_iterator rend()$/;"	f	class:std::list	access:public	signature:()
rend	stl/stl_map.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::map	access:public	signature:() const
rend	stl/stl_map.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:std::map	access:public	signature:()
rend	stl/stl_multimap.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::multimap	access:public	signature:() const
rend	stl/stl_multimap.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:std::multimap	access:public	signature:()
rend	stl/stl_multiset.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::multiset	access:public	signature:() const
rend	stl/stl_rope.h	/^            const_reverse_iterator rend() { return const_rend(); }$/;"	f	class:std::rope	access:public	signature:()
rend	stl/stl_rope.h	/^            reverse_iterator rend() { return mutable_rend(); }$/;"	f	class:std::rope	access:public	signature:()
rend	stl/stl_rope.h	/^        const_reverse_iterator rend() const {$/;"	f	class:std::rope	access:public	signature:() const
rend	stl/stl_set.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::set	access:public	signature:() const
rend	stl/stl_tree.h	/^  const_reverse_iterator rend() const { $/;"	f	class:std::_Rb_tree	access:public	signature:() const
rend	stl/stl_tree.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
rend	stl/stl_vector.h	/^  const_reverse_iterator rend() const$/;"	f	class:std::vector	access:public	signature:() const
rend	stl/stl_vector.h	/^  reverse_iterator rend()$/;"	f	class:std::vector	access:public	signature:()
replace	stl/stl_algo.h	/^void replace(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __old_value, const _Tp& __new_value)
replace	stl/stl_rope.h	/^        static _RopeRep* replace(_RopeRep* __old, size_t __pos1,$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __old, size_t __pos1, size_t __pos2, _RopeRep* __r)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, _CharT __c)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __c_string)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __c_string)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, const _CharT* __j)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, _CharT __c)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __c_string)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, const _CharT* __j)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, size_t __n)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const const_iterator& __i, const const_iterator& __j)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const iterator& __i, const iterator& __j)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const rope& __r)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const rope& __r)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const rope& __r)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const_iterator __i, $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const_iterator __i, const_iterator __j)
replace	stl/stl_rope.h	/^        void replace(const iterator& __p, iterator __i, iterator __j)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, iterator __i, iterator __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, _CharT __c)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __c_string)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, size_t __i_len) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __i_len)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const const_iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const rope& __r)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, const _CharT* __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, size_t __i_len)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __c_string)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const rope& __r)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const const_iterator& __i, const const_iterator& __j)
replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const iterator& __i, const iterator& __j)
replace_copy	stl/stl_algo.h	/^_OutputIter replace_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __old_value, const _Tp& __new_value)
replace_copy_if	stl/stl_algo.h	/^_OutputIter replace_copy_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred, const _Tp& __new_value)
replace_if	stl/stl_algo.h	/^void replace_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, const _Tp& __new_value)
replace_with_c_str	stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {$/;"	f	class:std::rope	signature:()
replace_with_c_str	stl/stl_rope.h	/^        const _CharT* replace_with_c_str();$/;"	p	class:std::rope	access:public	signature:()
requested_size	stl/stl_tempbuf.h	/^  ptrdiff_t requested_size() const { return _M_original_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
reserve	stl/stl_bvector.h	/^  void reserve(size_type __n) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
reserve	stl/stl_hashtable.h	/^    _M_buckets.reserve(__n_buckets);$/;"	p	signature:(__n_buckets)
reserve	stl/stl_hashtable.h	/^  _M_buckets.reserve(__ht._M_buckets.size());$/;"	p	signature:(__ht._M_buckets.size())
reserve	stl/stl_rope.h	/^            void reserve(size_type __res_arg = 0) {}$/;"	f	class:std::rope	access:public	signature:(size_type __res_arg = 0)
reserve	stl/stl_vector.h	/^  void reserve(size_type __n) {$/;"	f	class:std::vector	access:public	signature:(size_type __n)
resize	stl/stl_bvector.h	/^  void resize(size_type __new_size, bool __x = bool()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __new_size, bool __x = bool())
resize	stl/stl_deque.h	/^  void resize(size_type __new_size, const value_type& __x) {$/;"	f	class:std::deque	access:public	signature:(size_type __new_size, const value_type& __x)
resize	stl/stl_deque.h	/^  void resize(size_type new_size) { resize(new_size, value_type()); }$/;"	f	class:std::deque	access:public	signature:(size_type new_size)
resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_map	access:public	signature:(size_type __hint)
resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __hint)
resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __hint)
resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_set	access:public	signature:(size_type __hint)
resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
resize	stl/stl_hashtable.h	/^  ::resize(size_type __num_elements_hint)$/;"	f	class:std::hashtable	signature:(size_type __num_elements_hint)
resize	stl/stl_hashtable.h	/^  void resize(size_type __num_elements_hint);$/;"	p	class:std::hashtable	access:public	signature:(size_type __num_elements_hint)
resize	stl/stl_list.h	/^  void resize(size_type __new_size) { this->resize(__new_size, _Tp()); }$/;"	f	class:std::list	access:public	signature:(size_type __new_size)
resize	stl/stl_list.h	/^  void resize(size_type __new_size, const _Tp& __x);$/;"	p	class:std::list	access:public	signature:(size_type __new_size, const _Tp& __x)
resize	stl/stl_list.h	/^void list<_Tp, _Alloc>::resize(size_type __new_size, const _Tp& __x)$/;"	f	class:std::list	signature:(size_type __new_size, const _Tp& __x)
resize	stl/stl_rope.h	/^            void resize(size_type __n) {}$/;"	f	class:std::rope	access:public	signature:(size_type __n)
resize	stl/stl_rope.h	/^            void resize(size_type __n, _CharT __c) {}$/;"	f	class:std::rope	access:public	signature:(size_type __n, _CharT __c)
resize	stl/stl_slist.h	/^  void resize(size_type new_size) { resize(new_size, _Tp()); }$/;"	f	class:std::slist	access:public	signature:(size_type new_size)
resize	stl/stl_slist.h	/^  void resize(size_type new_size, const _Tp& __x);$/;"	p	class:std::slist	access:public	signature:(size_type new_size, const _Tp& __x)
resize	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::resize(size_type __len, const _Tp& __x)$/;"	f	class:std::slist	signature:(size_type __len, const _Tp& __x)
resize	stl/stl_vector.h	/^  void resize(size_type __new_size) { resize(__new_size, _Tp()); }$/;"	f	class:std::vector	access:public	signature:(size_type __new_size)
resize	stl/stl_vector.h	/^  void resize(size_type __new_size, const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, const _Tp& __x)
result_type	stl/stl_function.h	/^  typedef  _Result  result_type;$/;"	t	struct:std::_Constant_unary_fun	access:public
result_type	stl/stl_function.h	/^  typedef  _Result result_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::_Constant_void_fun	access:public
result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::binary_function	access:public
result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::unary_function	access:public
return_temporary_buffer	stl/stl_tempbuf.h	/^void return_temporary_buffer(_Tp* __p) {$/;"	f	namespace:std	signature:(_Tp* __p)
reverse	stl/stl_algo.h	/^inline void reverse(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
reverse	stl/stl_list.h	/^  void reverse();$/;"	p	class:std::list	access:public	signature:()
reverse	stl/stl_list.h	/^inline void list<_Tp, _Alloc>::reverse() $/;"	f	class:std::list	signature:()
reverse	stl/stl_slist.h	/^  void reverse() { $/;"	f	class:std::slist	access:public	signature:()
reverse_bidirectional_iterator	stl/stl_iterator.h	/^  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(_BidirectionalIterator __x)
reverse_bidirectional_iterator	stl/stl_iterator.h	/^  reverse_bidirectional_iterator() {}$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
reverse_bidirectional_iterator	stl/stl_iterator.h	/^class reverse_bidirectional_iterator {$/;"	c	namespace:std
reverse_copy	stl/stl_algo.h	/^_OutputIter reverse_copy(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _OutputIter __result)
reverse_iterator	stl/container_concepts.h	/^__STL_TYPEDEF_REQUIREMENT(reverse_iterator);$/;"	v
reverse_iterator	stl/stl_bvector.h	/^          reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
reverse_iterator	stl/stl_bvector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
reverse_iterator	stl/stl_deque.h	/^          reverse_iterator; $/;"	t	class:std::deque	access:public
reverse_iterator	stl/stl_deque.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::deque	access:public
reverse_iterator	stl/stl_iterator.h	/^  explicit reverse_iterator(_RandomAccessIterator __x) : current(__x) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(_RandomAccessIterator __x)
reverse_iterator	stl/stl_iterator.h	/^  explicit reverse_iterator(iterator_type __x) : current(__x) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator() {}$/;"	f	class:std::reverse_iterator	access:public	signature:()
reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator(const _Self& __x) : current(__x.current) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(const _Self& __x)
reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
reverse_iterator	stl/stl_iterator.h	/^class reverse_iterator $/;"	c	namespace:std
reverse_iterator	stl/stl_iterator.h	/^class reverse_iterator {$/;"	c	namespace:std
reverse_iterator	stl/stl_list.h	/^          reverse_iterator; $/;"	t	class:std::list	access:public
reverse_iterator	stl/stl_list.h	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:std::list	access:public
reverse_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:std::map	access:public
reverse_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:std::multimap	access:public
reverse_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:std::multiset	access:public
reverse_iterator	stl/stl_rope.h	/^                                 difference_type>  reverse_iterator;$/;"	t	class:std::rope	access:public
reverse_iterator	stl/stl_rope.h	/^        typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::rope	access:public
reverse_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:std::set	access:public
reverse_iterator	stl/stl_tree.h	/^          reverse_iterator; $/;"	t	class:std::_Rb_tree	access:public
reverse_iterator	stl/stl_tree.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
reverse_iterator	stl/stl_vector.h	/^          reverse_iterator;$/;"	t	class:std::vector	access:public
reverse_iterator	stl/stl_vector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::vector	access:public
rope	stl/ropeimpl.h	/^rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,$/;"	f	class:std::rope	signature:(size_t __n, _CharT __c, const allocator_type& __a)
rope	stl/stl_rope.h	/^        rope(_CharT __c, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(_CharT __c, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(_RopeRep* __t, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __t, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,$/;"	f	class:std::rope	access:public	signature:(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const _CharT *__s, const _CharT *__e,$/;"	f	class:std::rope	access:public	signature:(const _CharT *__s, const _CharT *__e, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const _CharT* __s, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const _CharT* __s, size_t __len,$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, size_t __len, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const const_iterator& __s, const const_iterator& __e,$/;"	f	class:std::rope	access:public	signature:(const const_iterator& __s, const const_iterator& __e, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const iterator& __s, const iterator& __e,$/;"	f	class:std::rope	access:public	signature:(const iterator& __s, const iterator& __e, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(const rope& __x, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const rope& __x, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^        rope(size_t __n, _CharT __c,$/;"	p	class:std::rope	access:public	signature:(size_t __n, _CharT __c, const allocator_type& __a = allocator_type())
rope	stl/stl_rope.h	/^class rope : public _Rope_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_base
rotate	stl/ropeimpl.h	/^inline void rotate(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first,$/;"	f	namespace:std	signature:(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __middle, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __last)
rotate	stl/stl_algo.h	/^inline _ForwardIter rotate(_ForwardIter __first, _ForwardIter __middle,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last)
rotate_copy	stl/stl_algo.h	/^_OutputIter rotate_copy(_ForwardIter __first, _ForwardIter __middle,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _OutputIter __result)
search	stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
search	stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPred __predicate)
search_n	stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val)
search_n	stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val, _BinaryPred __binary_pred)
second	stl/stl_pair.h	/^  _T2 second;$/;"	m	struct:std::pair	access:public
second_argument_type	stl/stl_function.h	/^  typedef  _Arg2   second_argument_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
second_argument_type	stl/stl_function.h	/^  typedef _Arg2 second_argument_type;$/;"	t	struct:std::binary_function	access:public
second_type	stl/stl_pair.h	/^  typedef _T2 second_type;$/;"	t	struct:std::pair	access:public
select1st	stl/stl_function.h	/^template <class _Pair> struct select1st : public _Select1st<_Pair> {};$/;"	s	namespace:std	inherits:_Select1st
select2nd	stl/stl_function.h	/^template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};$/;"	s	namespace:std	inherits:_Select2nd
sequence_buffer	stl/stl_rope.h	/^        sequence_buffer() : _M_prefix(0), _M_buf_count(0) {}$/;"	f	class:std::sequence_buffer	access:public	signature:()
sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(_Sequence& __s) : _M_prefix(&__s), _M_buf_count(0) {}$/;"	f	class:std::sequence_buffer	access:public	signature:(_Sequence& __s)
sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(const sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(const sequence_buffer& __x)
sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(sequence_buffer& __x)
sequence_buffer	stl/stl_rope.h	/^class sequence_buffer : public output_iterator {$/;"	c	namespace:std	inherits:output_iterator
set	stl/stl_set.h	/^  explicit set(const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^  set() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::set	access:public	signature:()
set	stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
set	stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^  set(const set<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
set	stl/stl_set.h	/^  set(const value_type* __first, $/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^  set(const value_type* __first, const value_type* __last) $/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last)
set	stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last)$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last)
set	stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
set	stl/stl_set.h	/^class set {$/;"	c	namespace:std
set_difference	stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_difference	stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_intersection	stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_intersection	stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_symmetric_difference	stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_symmetric_difference	stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
set_union	stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
set_union	stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
simple_alloc	stl/stl_alloc.h	/^class simple_alloc {$/;"	c	namespace:std
single_client_alloc	stl/stl_alloc.h	/^typedef __default_alloc_template<false, 0> single_client_alloc;$/;"	t	namespace:std
single_client_alloc	stl/stl_alloc.h	/^typedef malloc_alloc single_client_alloc;$/;"	t	namespace:std
size	stl/container_concepts.h	/^    __c.size();$/;"	p	signature:()
size	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	p	signature:()
size	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
size	stl/stl_bvector.h	/^  size_type size() const { return size_type(end() - begin()); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
size	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	p	signature:()
size	stl/stl_deque.h	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
size	stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_map	access:public	signature:() const
size	stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
size	stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
size	stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_set	access:public	signature:() const
size	stl/stl_hashtable.h	/^  size_type size() const { return _M_num_elements; }$/;"	f	class:std::hashtable	access:public	signature:() const
size	stl/stl_list.h	/^  size_type size() const {$/;"	f	class:std::list	access:public	signature:() const
size	stl/stl_map.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::map	access:public	signature:() const
size	stl/stl_multimap.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::multimap	access:public	signature:() const
size	stl/stl_multiset.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::multiset	access:public	signature:() const
size	stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
size	stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::queue	access:public	signature:() const
size	stl/stl_rope.h	/^        size_type size() const { $/;"	f	class:std::rope	access:public	signature:() const
size	stl/stl_set.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::set	access:public	signature:() const
size	stl/stl_slist.h	/^  size_type size() const { return __slist_size(this->_M_head._M_next); }$/;"	f	class:std::slist	access:public	signature:() const
size	stl/stl_stack.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::stack	access:public	signature:() const
size	stl/stl_tempbuf.h	/^  ptrdiff_t size() const { return _M_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
size	stl/stl_tree.h	/^  size_type size() const { return _M_node_count; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
size	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
size	stl/stl_vector.h	/^  size_type size() const$/;"	f	class:std::vector	access:public	signature:() const
size_type	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(size_type);$/;"	v
size_type	stl/defalloc.h	/^    typedef size_t size_type;$/;"	t	class:allocator	access:public
size_type	stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:__allocator	access:private
size_type	stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:std::allocator	access:public
size_type	stl/stl_alloc.h	/^  typedef size_t     size_type;$/;"	t	class:std::allocator	access:public
size_type	stl/stl_alloc.h	/^  typedef size_t    size_type;$/;"	t	struct:std::__allocator	access:public
size_type	stl/stl_bvector.h	/^  typedef size_t size_type;$/;"	t	class:std::__BVECTOR	access:public
size_type	stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	class:std::deque	access:public
size_type	stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Deque_iterator	access:public
size_type	stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_map	access:public
size_type	stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_multimap	access:public
size_type	stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_multiset	access:public
size_type	stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_set	access:public
size_type	stl/stl_hashtable.h	/^  typedef size_t            size_type;$/;"	t	class:std::hashtable	access:public
size_type	stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
size_type	stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
size_type	stl/stl_list.h	/^  typedef size_t                     size_type;$/;"	t	struct:std::_List_iterator_base	access:public
size_type	stl/stl_list.h	/^  typedef size_t size_type;$/;"	t	class:std::list	access:public
size_type	stl/stl_map.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::map	access:public
size_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::multimap	access:public
size_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::multiset	access:public
size_type	stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::priority_queue	access:public
size_type	stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::queue	access:public
size_type	stl/stl_rope.h	/^        typedef size_t size_type;$/;"	t	class:std::rope	access:public
size_type	stl/stl_set.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::set	access:public
size_type	stl/stl_slist.h	/^  typedef size_t               size_type;$/;"	t	struct:std::_Slist_iterator_base	access:public
size_type	stl/stl_slist.h	/^  typedef size_t            size_type;$/;"	t	class:std::slist	access:public
size_type	stl/stl_stack.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::stack	access:public
size_type	stl/stl_tree.h	/^  typedef size_t size_type;$/;"	t	class:std::_Rb_tree	access:public
size_type	stl/stl_vector.h	/^  typedef size_t size_type;$/;"	t	class:std::vector	access:public
slist	stl/stl_slist.h	/^  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:std::slist	access:public	signature:(const allocator_type& __a = allocator_type())
slist	stl/stl_slist.h	/^  explicit slist(size_type __n) : _Base(allocator_type())$/;"	f	class:std::slist	access:public	signature:(size_type __n)
slist	stl/stl_slist.h	/^  slist(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
slist	stl/stl_slist.h	/^  slist(const slist& __x) : _Base(__x.get_allocator())$/;"	f	class:std::slist	access:public	signature:(const slist& __x)
slist	stl/stl_slist.h	/^  slist(const value_type* __first, const value_type* __last,$/;"	f	class:std::slist	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
slist	stl/stl_slist.h	/^  slist(const_iterator __first, const_iterator __last,$/;"	f	class:std::slist	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
slist	stl/stl_slist.h	/^  slist(size_type __n, const value_type& __x,$/;"	f	class:std::slist	access:public	signature:(size_type __n, const value_type& __x, const allocator_type& __a = allocator_type())
slist	stl/stl_slist.h	/^class slist : private _Slist_base<_Tp,_Alloc>$/;"	c	namespace:std	inherits:_Slist_base
sort	stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
sort	stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
sort	stl/stl_list.h	/^  template <class _StrictWeakOrdering> void sort(_StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(_StrictWeakOrdering)
sort	stl/stl_list.h	/^  void sort();$/;"	p	class:std::list	access:public	signature:()
sort	stl/stl_list.h	/^void list<_Tp, _Alloc>::sort()$/;"	f	class:std::list	signature:()
sort	stl/stl_list.h	/^void list<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:std::list	signature:(_StrictWeakOrdering __comp)
sort	stl/stl_slist.h	/^  void sort();     $/;"	p	class:std::slist	access:public	signature:()
sort	stl/stl_slist.h	/^  void sort(_StrictWeakOrdering __comp); $/;"	p	class:std::slist	access:public	signature:(_StrictWeakOrdering __comp)
sort	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort()$/;"	f	class:std::slist	signature:()
sort	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:std::slist	signature:(_StrictWeakOrdering __comp)
sort_heap	stl/stl_heap.h	/^sort_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
sort_heap	stl/stl_heap.h	/^void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
splice	stl/stl_list.h	/^      __carry.splice(__carry.begin(), *this, begin());$/;"	p	signature:(__carry.begin(), *this, begin())
splice	stl/stl_list.h	/^  void splice(iterator __position, list& __x) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x)
splice	stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __first, iterator __last) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list&, iterator __first, iterator __last)
splice	stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __i) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list&, iterator __i)
splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x)
splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __first, iterator __last)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x, iterator __first, iterator __last)
splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __i) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x, iterator __i)
splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, $/;"	f	class:std::slist	access:public	signature:(iterator __pos, iterator __before_first, iterator __before_last)
splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, iterator __prev)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, iterator __prev)
splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, slist& __x)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x)
stable_partition	stl/stl_algo.h	/^inline _ForwardIter stable_partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
stable_sort	stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
stable_sort	stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
stack	stl/stl_stack.h	/^  explicit stack(const _Sequence& __s) : c(__s) {}$/;"	f	class:std::stack	access:public	signature:(const _Sequence& __s)
stack	stl/stl_stack.h	/^  stack() : c() {}$/;"	f	class:std::stack	access:public	signature:()
stack	stl/stl_stack.h	/^class stack {$/;"	c	namespace:std
state_type	stl/char_traits.h	/^  typedef mbstate_t state_type;$/;"	t	class:std::__char_traits_base	access:public
std	stl/char_traits.h	/^namespace std {$/;"	n
std	stl/concept_checks.h	/^namespace std {$/;"	n
std	stl/ropeimpl.h	/^namespace std {$/;"	n
std	stl/stl_algo.h	/^namespace std {$/;"	n
std	stl/stl_algobase.h	/^namespace std {$/;"	n
std	stl/stl_alloc.h	/^namespace std {$/;"	n
std	stl/stl_bvector.h	/^   namespace std {$/;"	n
std	stl/stl_bvector.h	/^namespace std { $/;"	n
std	stl/stl_construct.h	/^namespace std {$/;"	n
std	stl/stl_ctraits_fns.h	/^namespace std {$/;"	n
std	stl/stl_deque.h	/^namespace std { $/;"	n
std	stl/stl_exception.h	/^namespace std {$/;"	n
std	stl/stl_function.h	/^namespace std {$/;"	n
std	stl/stl_hash_fun.h	/^namespace std {$/;"	n
std	stl/stl_hash_map.h	/^namespace std {$/;"	n
std	stl/stl_hash_set.h	/^namespace std {$/;"	n
std	stl/stl_hashtable.h	/^namespace std {$/;"	n
std	stl/stl_heap.h	/^namespace std {$/;"	n
std	stl/stl_iterator.h	/^namespace std {$/;"	n
std	stl/stl_iterator_base.h	/^namespace std {$/;"	n
std	stl/stl_list.h	/^namespace std {$/;"	n
std	stl/stl_map.h	/^namespace std {$/;"	n
std	stl/stl_multimap.h	/^namespace std {$/;"	n
std	stl/stl_multiset.h	/^namespace std {$/;"	n
std	stl/stl_numeric.h	/^namespace std {$/;"	n
std	stl/stl_pair.h	/^namespace std {$/;"	n
std	stl/stl_queue.h	/^namespace std {$/;"	n
std	stl/stl_range_errors.h	/^namespace std {$/;"	n
std	stl/stl_raw_storage_iter.h	/^namespace std {$/;"	n
std	stl/stl_rope.h	/^namespace std {$/;"	n
std	stl/stl_set.h	/^namespace std {$/;"	n
std	stl/stl_slist.h	/^namespace std { $/;"	n
std	stl/stl_stack.h	/^namespace std {$/;"	n
std	stl/stl_string_fwd.h	/^namespace std {$/;"	n
std	stl/stl_tempbuf.h	/^namespace std {$/;"	n
std	stl/stl_threads.h	/^namespace std {$/;"	n
std	stl/stl_tree.h	/^namespace std { $/;"	n
std	stl/stl_uninitialized.h	/^namespace std {$/;"	n
std	stl/stl_vector.h	/^namespace std { $/;"	n
std::_ALIGN	stl/stl_alloc.h	/^  enum {_ALIGN = 8};$/;"	e	enum:std::__anon9
std::_Alloc	stl/ropeimpl.h	/^  typedef typename _Rope_iterator::_allocator_type _Alloc;$/;"	t
std::_Arg1_type	stl/stl_function.h	/^  typedef typename _Operation::first_argument_type _Arg1_type;$/;"	t
std::_Arg2_type	stl/stl_function.h	/^  typedef typename _Operation::second_argument_type _Arg2_type;$/;"	t
std::_Atomic_swap	stl/stl_threads.h	/^    inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	namespace:std	signature:(unsigned long * __p, unsigned long __q)
std::_Atomic_swap	stl/stl_threads.h	/^    static inline unsigned long _Atomic_swap(unsigned long * __p, unsigned long __q) {$/;"	f	namespace:std	signature:(unsigned long * __p, unsigned long __q)
std::_Bit_const_iterator	stl/stl_bvector.h	/^struct _Bit_const_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator(const _Bit_iterator& __x) $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator& __x)
std::_Bit_const_iterator::_Bit_const_iterator	stl/stl_bvector.h	/^  _Bit_const_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
std::_Bit_const_iterator::__tmp	stl/stl_bvector.h	/^    const_iterator __tmp = *this;$/;"	l
std::_Bit_const_iterator::const_iterator	stl/stl_bvector.h	/^  typedef _Bit_const_iterator  const_iterator;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::const_reference	stl/stl_bvector.h	/^  typedef bool                 const_reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::operator *	stl/stl_bvector.h	/^  const_reference operator*() const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:() const
std::_Bit_const_iterator::operator +	stl/stl_bvector.h	/^  const_iterator operator+(difference_type __i) const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator ++	stl/stl_bvector.h	/^  const_iterator operator++(int) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator ++	stl/stl_bvector.h	/^  const_iterator& operator++() {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::operator +=	stl/stl_bvector.h	/^  const_iterator& operator+=(difference_type __i) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator -	stl/stl_bvector.h	/^  const_iterator operator-(difference_type __i) const {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator --	stl/stl_bvector.h	/^  const_iterator operator--(int) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator --	stl/stl_bvector.h	/^  const_iterator& operator--() {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::operator -=	stl/stl_bvector.h	/^  const_iterator& operator-=(difference_type __i) {$/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator []	stl/stl_bvector.h	/^  const_reference operator[](difference_type __i) { $/;"	f	struct:std::_Bit_const_iterator	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::pointer	stl/stl_bvector.h	/^  typedef const bool*          pointer;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_const_iterator::reference	stl/stl_bvector.h	/^  typedef bool                 reference;$/;"	t	struct:std::_Bit_const_iterator	access:public
std::_Bit_iterator	stl/stl_bvector.h	/^struct _Bit_iterator : public _Bit_iterator_base$/;"	s	namespace:std	inherits:_Bit_iterator_base
std::_Bit_iterator::_Bit_iterator	stl/stl_bvector.h	/^  _Bit_iterator() : _Bit_iterator_base(0, 0) {}$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::_Bit_iterator	stl/stl_bvector.h	/^  _Bit_iterator(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_iterator	access:public	signature:(unsigned int* __x, unsigned int __y)
std::_Bit_iterator::__tmp	stl/stl_bvector.h	/^    iterator __tmp = *this;$/;"	l
std::_Bit_iterator::iterator	stl/stl_bvector.h	/^  typedef _Bit_iterator   iterator;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator::operator *	stl/stl_bvector.h	/^  reference operator*() const { return reference(_M_p, 1U << _M_offset); }$/;"	f	struct:std::_Bit_iterator	access:public	signature:() const
std::_Bit_iterator::operator +	stl/stl_bvector.h	/^  iterator operator+(difference_type __i) const {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator ++	stl/stl_bvector.h	/^  iterator operator++(int) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
std::_Bit_iterator::operator ++	stl/stl_bvector.h	/^  iterator& operator++() {$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::operator +=	stl/stl_bvector.h	/^  iterator& operator+=(difference_type __i) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator -	stl/stl_bvector.h	/^  iterator operator-(difference_type __i) const {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator --	stl/stl_bvector.h	/^  iterator operator--(int) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(int)
std::_Bit_iterator::operator --	stl/stl_bvector.h	/^  iterator& operator--() {$/;"	f	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::operator -=	stl/stl_bvector.h	/^  iterator& operator-=(difference_type __i) {$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator []	stl/stl_bvector.h	/^  reference operator[](difference_type __i) { return *(*this + __i); }$/;"	f	struct:std::_Bit_iterator	access:public	signature:(difference_type __i)
std::_Bit_iterator::pointer	stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator::reference	stl/stl_bvector.h	/^  typedef _Bit_reference  reference;$/;"	t	struct:std::_Bit_iterator	access:public
std::_Bit_iterator_base	stl/stl_bvector.h	/^struct _Bit_iterator_base : public random_access_iterator<bool, ptrdiff_t> $/;"	s	namespace:std	inherits:random_access_iterator
std::_Bit_iterator_base::_Bit_iterator_base	stl/stl_bvector.h	/^  _Bit_iterator_base(unsigned int* __x, unsigned int __y)$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(unsigned int* __x, unsigned int __y)
std::_Bit_iterator_base::_M_bump_down	stl/stl_bvector.h	/^  void _M_bump_down() {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
std::_Bit_iterator_base::_M_bump_up	stl/stl_bvector.h	/^  void _M_bump_up() {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:()
std::_Bit_iterator_base::_M_incr	stl/stl_bvector.h	/^  void _M_incr(ptrdiff_t __i) {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(ptrdiff_t __i)
std::_Bit_iterator_base::_M_offset	stl/stl_bvector.h	/^  unsigned int _M_offset;$/;"	m	struct:std::_Bit_iterator_base	access:public
std::_Bit_iterator_base::_M_p	stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:std::_Bit_iterator_base	access:public
std::_Bit_iterator_base::__n	stl/stl_bvector.h	/^    difference_type __n = __i + _M_offset;$/;"	l
std::_Bit_iterator_base::operator !=	stl/stl_bvector.h	/^  bool operator!=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator <	stl/stl_bvector.h	/^  bool operator<(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator <=	stl/stl_bvector.h	/^  bool operator<=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator ==	stl/stl_bvector.h	/^  bool operator==(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator >	stl/stl_bvector.h	/^  bool operator>(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_iterator_base::operator >=	stl/stl_bvector.h	/^  bool operator>=(const _Bit_iterator_base& __i) const {$/;"	f	struct:std::_Bit_iterator_base	access:public	signature:(const _Bit_iterator_base& __i) const
std::_Bit_reference	stl/stl_bvector.h	/^struct _Bit_reference {$/;"	s	namespace:std
std::_Bit_reference::_Bit_reference	stl/stl_bvector.h	/^  _Bit_reference() : _M_p(0), _M_mask(0) {}$/;"	f	struct:std::_Bit_reference	access:public	signature:()
std::_Bit_reference::_Bit_reference	stl/stl_bvector.h	/^  _Bit_reference(unsigned int* __x, unsigned int __y) $/;"	f	struct:std::_Bit_reference	access:public	signature:(unsigned int* __x, unsigned int __y)
std::_Bit_reference::_M_mask	stl/stl_bvector.h	/^  unsigned int _M_mask;$/;"	m	struct:std::_Bit_reference	access:public
std::_Bit_reference::_M_p	stl/stl_bvector.h	/^  unsigned int* _M_p;$/;"	m	struct:std::_Bit_reference	access:public
std::_Bit_reference::flip	stl/stl_bvector.h	/^  void flip() { *_M_p ^= _M_mask; }$/;"	f	struct:std::_Bit_reference	access:public	signature:()
std::_Bit_reference::operator <	stl/stl_bvector.h	/^  bool operator<(const _Bit_reference& __x) const {$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
std::_Bit_reference::operator =	stl/stl_bvector.h	/^  _Bit_reference& operator=(bool __x)$/;"	f	struct:std::_Bit_reference	access:public	signature:(bool __x)
std::_Bit_reference::operator =	stl/stl_bvector.h	/^  _Bit_reference& operator=(const _Bit_reference& __x) $/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x)
std::_Bit_reference::operator ==	stl/stl_bvector.h	/^  bool operator==(const _Bit_reference& __x) const$/;"	f	struct:std::_Bit_reference	access:public	signature:(const _Bit_reference& __x) const
std::_Bit_reference::operator bool	stl/stl_bvector.h	/^  operator bool() const { return !(!(*_M_p & _M_mask)); }$/;"	f	struct:std::_Bit_reference	access:public	signature:() const
std::_Bvector_alloc_base	stl/stl_bvector.h	/^class _Bvector_alloc_base {$/;"	c	namespace:std
std::_Bvector_alloc_base	stl/stl_bvector.h	/^class _Bvector_alloc_base<_Allocator, true> {$/;"	c	namespace:std
std::_Bvector_alloc_base::_Alloc_type	stl/stl_bvector.h	/^          _Alloc_type;$/;"	t	class:std::_Bvector_alloc_base	access:protected
std::_Bvector_alloc_base::_Alloc_type::deallocate	stl/stl_bvector.h	/^      _Alloc_type::deallocate(_M_start._M_p,$/;"	p	class:std::_Bvector_alloc_base::_Alloc_type	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
std::_Bvector_alloc_base::_Bvector_alloc_base	stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Bvector_alloc_base::_Bvector_alloc_base	stl/stl_bvector.h	/^  _Bvector_alloc_base(const allocator_type&)$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:(const allocator_type&)
std::_Bvector_alloc_base::_M_bit_alloc	stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:std::_Bvector_alloc_base	access:protected	signature:(size_t __n)
std::_Bvector_alloc_base::_M_data_allocator	stl/stl_bvector.h	/^          _M_data_allocator;$/;"	m	class:std::_Bvector_alloc_base	access:protected
std::_Bvector_alloc_base::_M_deallocate	stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:std::_Bvector_alloc_base	access:protected	signature:()
std::_Bvector_alloc_base::_M_end_of_storage	stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;$/;"	m	class:std::_Bvector_alloc_base	access:protected
std::_Bvector_alloc_base::_M_finish	stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:std::_Bvector_alloc_base	access:protected
std::_Bvector_alloc_base::_M_start	stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:std::_Bvector_alloc_base	access:protected
std::_Bvector_alloc_base::allocator_type	stl/stl_bvector.h	/^          allocator_type;$/;"	t	class:std::_Bvector_alloc_base	access:public
std::_Bvector_alloc_base::deallocate	stl/stl_bvector.h	/^      _M_data_allocator.deallocate(_M_start._M_p, $/;"	p	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
std::_Bvector_alloc_base::get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:() const
std::_Bvector_alloc_base::get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Bvector_alloc_base	access:public	signature:() const
std::_Bvector_base	stl/stl_bvector.h	/^class _Bvector_base$/;"	c	namespace:std	inherits:_Bvector_alloc_base
std::_Bvector_base	stl/stl_bvector.h	/^class _Bvector_base$/;"	c	namespace:std
std::_Bvector_base::_Alloc_type	stl/stl_bvector.h	/^  typedef simple_alloc<unsigned int, _Alloc> _Alloc_type;$/;"	t	class:std::_Bvector_base	access:protected
std::_Bvector_base::_Alloc_type::deallocate	stl/stl_bvector.h	/^      _Alloc_type::deallocate(_M_start._M_p,$/;"	p	class:std::_Bvector_base::_Alloc_type	signature:(_M_start._M_p, _M_end_of_storage - _M_start._M_p)
std::_Bvector_base::_Base	stl/stl_bvector.h	/^          _Base;$/;"	t	class:std::_Bvector_base	access:private
std::_Bvector_base::_Base::_M_deallocate	stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	p	class:std::_Bvector_base::_Base	signature:()
std::_Bvector_base::_Bvector_base	stl/stl_bvector.h	/^  _Bvector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	class:std::_Bvector_base	access:public	signature:(const allocator_type& __a)
std::_Bvector_base::_Bvector_base	stl/stl_bvector.h	/^  _Bvector_base(const allocator_type&)$/;"	f	class:std::_Bvector_base	access:public	signature:(const allocator_type&)
std::_Bvector_base::_M_bit_alloc	stl/stl_bvector.h	/^  unsigned int* _M_bit_alloc(size_t __n) $/;"	f	class:std::_Bvector_base	access:protected	signature:(size_t __n)
std::_Bvector_base::_M_deallocate	stl/stl_bvector.h	/^  void _M_deallocate() {$/;"	f	class:std::_Bvector_base	access:protected	signature:()
std::_Bvector_base::_M_end_of_storage	stl/stl_bvector.h	/^  unsigned int* _M_end_of_storage;  $/;"	m	class:std::_Bvector_base	access:protected
std::_Bvector_base::_M_finish	stl/stl_bvector.h	/^  _Bit_iterator _M_finish;$/;"	m	class:std::_Bvector_base	access:protected
std::_Bvector_base::_M_start	stl/stl_bvector.h	/^  _Bit_iterator _M_start;$/;"	m	class:std::_Bvector_base	access:protected
std::_Bvector_base::allocator_type	stl/stl_bvector.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Bvector_base	access:public
std::_Bvector_base::allocator_type	stl/stl_bvector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Bvector_base	access:public
std::_Bvector_base::get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Bvector_base	access:public	signature:() const
std::_Bvector_base::~_Bvector_base	stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	f	class:std::_Bvector_base	access:public	signature:()
std::_Bvector_base::~_Bvector_base	stl/stl_bvector.h	/^  ~_Bvector_base() { _M_deallocate(); }$/;"	f	class:std::_Bvector_base	access:public	signature:()
std::_Category	stl/stl_iterator_base.h	/^    _Category;$/;"	t
std::_Category	stl/stl_iterator_base.h	/^  typedef typename iterator_traits<_Iter>::iterator_category _Category;$/;"	t
std::_CharT	stl/ropeimpl.h	/^  typedef typename _Rope_iterator::value_type _CharT;$/;"	t
std::_Constant_binary_fun	stl/stl_function.h	/^struct _Constant_binary_fun {$/;"	s	namespace:std
std::_Constant_binary_fun::_Constant_binary_fun	stl/stl_function.h	/^  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_binary_fun	access:public	signature:(const _Result& __v)
std::_Constant_binary_fun::_M_val	stl/stl_function.h	/^  _Result _M_val;$/;"	m	struct:std::_Constant_binary_fun	access:public
std::_Constant_binary_fun::first_argument_type	stl/stl_function.h	/^  typedef  _Arg1   first_argument_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
std::_Constant_binary_fun::operator ()	stl/stl_function.h	/^  const result_type& operator()(const _Arg1&, const _Arg2&) const {$/;"	f	struct:std::_Constant_binary_fun	access:public	signature:(const _Arg1&, const _Arg2&) const
std::_Constant_binary_fun::result_type	stl/stl_function.h	/^  typedef  _Result result_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
std::_Constant_binary_fun::second_argument_type	stl/stl_function.h	/^  typedef  _Arg2   second_argument_type;$/;"	t	struct:std::_Constant_binary_fun	access:public
std::_Constant_unary_fun	stl/stl_function.h	/^struct _Constant_unary_fun {$/;"	s	namespace:std
std::_Constant_unary_fun::_Constant_unary_fun	stl/stl_function.h	/^  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_unary_fun	access:public	signature:(const result_type& __v)
std::_Constant_unary_fun::_M_val	stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:std::_Constant_unary_fun	access:public
std::_Constant_unary_fun::argument_type	stl/stl_function.h	/^  typedef _Argument argument_type;$/;"	t	struct:std::_Constant_unary_fun	access:public
std::_Constant_unary_fun::operator ()	stl/stl_function.h	/^  const result_type& operator()(const _Argument&) const { return _M_val; }$/;"	f	struct:std::_Constant_unary_fun	access:public	signature:(const _Argument&) const
std::_Constant_unary_fun::result_type	stl/stl_function.h	/^  typedef  _Result  result_type;$/;"	t	struct:std::_Constant_unary_fun	access:public
std::_Constant_void_fun	stl/stl_function.h	/^struct _Constant_void_fun {$/;"	s	namespace:std
std::_Constant_void_fun::_Constant_void_fun	stl/stl_function.h	/^  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}$/;"	f	struct:std::_Constant_void_fun	access:public	signature:(const result_type& __v)
std::_Constant_void_fun::_M_val	stl/stl_function.h	/^  result_type _M_val;$/;"	m	struct:std::_Constant_void_fun	access:public
std::_Constant_void_fun::operator ()	stl/stl_function.h	/^  const result_type& operator()() const { return _M_val; }$/;"	f	struct:std::_Constant_void_fun	access:public	signature:() const
std::_Constant_void_fun::result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::_Constant_void_fun	access:public
std::_Construct	stl/stl_construct.h	/^inline void _Construct(_T1* __p) {$/;"	f	namespace:std	signature:(_T1* __p)
std::_Construct	stl/stl_construct.h	/^inline void _Construct(_T1* __p, const _T2& __value) {$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
std::_Deque_alloc_base	stl/stl_deque.h	/^class _Deque_alloc_base {$/;"	c	namespace:std
std::_Deque_alloc_base	stl/stl_deque.h	/^class _Deque_alloc_base<_Tp, _Alloc, true>$/;"	c	namespace:std
std::_Deque_alloc_base::_Deque_alloc_base	stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Deque_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Deque_alloc_base::_Deque_alloc_base	stl/stl_deque.h	/^  _Deque_alloc_base(const allocator_type&) : _M_map(0), _M_map_size(0) {}$/;"	f	class:std::_Deque_alloc_base	access:public	signature:(const allocator_type&)
std::_Deque_alloc_base::_M_allocate_map	stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(size_t __n)
std::_Deque_alloc_base::_M_allocate_node	stl/stl_deque.h	/^  _Tp* _M_allocate_node() {$/;"	f	class:std::_Deque_alloc_base	access:protected	signature:()
std::_Deque_alloc_base::_M_deallocate_map	stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(_Tp** __p, size_t __n)
std::_Deque_alloc_base::_M_deallocate_node	stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p) {$/;"	f	class:std::_Deque_alloc_base	access:protected	signature:(_Tp* __p)
std::_Deque_alloc_base::_M_map	stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_M_map_allocator	stl/stl_deque.h	/^  _Map_allocator_type _M_map_allocator;$/;"	m	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_M_map_size	stl/stl_deque.h	/^  size_t _M_map_size;$/;"	m	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_M_node_allocator	stl/stl_deque.h	/^  allocator_type      _M_node_allocator;$/;"	m	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_Map_alloc_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp*, _Alloc>::_Alloc_type _Map_alloc_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_Map_alloc_type::deallocate	stl/stl_deque.h	/^    { _Map_alloc_type::deallocate(__p, __n); }$/;"	p	class:std::_Deque_alloc_base::_Map_alloc_type	signature:(__p, __n)
std::_Deque_alloc_base::_Map_allocator_type	stl/stl_deque.h	/^          _Map_allocator_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_Node_alloc_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::_Alloc_type _Node_alloc_type;$/;"	t	class:std::_Deque_alloc_base	access:protected
std::_Deque_alloc_base::_Node_alloc_type::deallocate	stl/stl_deque.h	/^    _Node_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));$/;"	p	class:std::_Deque_alloc_base::_Node_alloc_type	signature:(__p, __deque_buf_size(sizeof(_Tp)))
std::_Deque_alloc_base::allocator_type	stl/stl_deque.h	/^  typedef typename _Alloc_traits<_Tp,_Alloc>::allocator_type allocator_type;$/;"	t	class:std::_Deque_alloc_base	access:public
std::_Deque_alloc_base::deallocate	stl/stl_deque.h	/^    _M_node_allocator.deallocate(__p, __deque_buf_size(sizeof(_Tp)));$/;"	p	signature:(__p, __deque_buf_size(sizeof(_Tp)))
std::_Deque_alloc_base::deallocate	stl/stl_deque.h	/^    { _M_map_allocator.deallocate(__p, __n); }$/;"	p	signature:(__p, __n)
std::_Deque_alloc_base::get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Deque_alloc_base	access:public	signature:() const
std::_Deque_alloc_base::get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Deque_alloc_base	access:public	signature:() const
std::_Deque_base	stl/stl_deque.h	/^class _Deque_base {$/;"	c	namespace:std
std::_Deque_base	stl/stl_deque.h	/^class _Deque_base$/;"	c	namespace:std	inherits:_Deque_alloc_base
std::_Deque_base::_Base	stl/stl_deque.h	/^          _Base;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a) $/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a)
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type& __a, size_t __num_elements)
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type&)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type&)
std::_Deque_base::_Deque_base	stl/stl_deque.h	/^  _Deque_base(const allocator_type&, size_t __num_elements)$/;"	f	class:std::_Deque_base	access:public	signature:(const allocator_type&, size_t __num_elements)
std::_Deque_base::_M_allocate_map	stl/stl_deque.h	/^  _Tp** _M_allocate_map(size_t __n) $/;"	f	class:std::_Deque_base	access:protected	signature:(size_t __n)
std::_Deque_base::_M_allocate_node	stl/stl_deque.h	/^  _Tp* _M_allocate_node()$/;"	f	class:std::_Deque_base	access:protected	signature:()
std::_Deque_base::_M_create_nodes	stl/stl_deque.h	/^  void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_create_nodes	stl/stl_deque.h	/^void _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_deallocate_map	stl/stl_deque.h	/^  void _M_deallocate_map(_Tp** __p, size_t __n) $/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp** __p, size_t __n)
std::_Deque_base::_M_deallocate_node	stl/stl_deque.h	/^  void _M_deallocate_node(_Tp* __p)$/;"	f	class:std::_Deque_base	access:protected	signature:(_Tp* __p)
std::_Deque_base::_M_destroy_nodes	stl/stl_deque.h	/^  void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	p	class:std::_Deque_base	access:protected	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_destroy_nodes	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	f	class:std::_Deque_base	signature:(_Tp** __nstart, _Tp** __nfinish)
std::_Deque_base::_M_finish	stl/stl_deque.h	/^  iterator _M_finish;$/;"	m	class:std::_Deque_base	access:protected
std::_Deque_base::_M_initialize_map	stl/stl_deque.h	/^  void _M_initialize_map(size_t);$/;"	p	class:std::_Deque_base	access:protected	signature:(size_t)
std::_Deque_base::_M_initialize_map	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)$/;"	f	class:std::_Deque_base	signature:(size_t __num_elements)
std::_Deque_base::_M_map	stl/stl_deque.h	/^  _Tp** _M_map;$/;"	m	class:std::_Deque_base	access:protected
std::_Deque_base::_M_map_size	stl/stl_deque.h	/^  size_t _M_map_size;  $/;"	m	class:std::_Deque_base	access:protected
std::_Deque_base::_M_start	stl/stl_deque.h	/^  iterator _M_start;$/;"	m	class:std::_Deque_base	access:protected
std::_Deque_base::_Map_alloc_type	stl/stl_deque.h	/^  typedef simple_alloc<_Tp*, _Alloc> _Map_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
std::_Deque_base::_Map_alloc_type::deallocate	stl/stl_deque.h	/^    { _Map_alloc_type::deallocate(__p, __n); }$/;"	p	class:std::_Deque_base::_Map_alloc_type	signature:(__p, __n)
std::_Deque_base::_Node_alloc_type	stl/stl_deque.h	/^  typedef simple_alloc<_Tp, _Alloc>  _Node_alloc_type;$/;"	t	class:std::_Deque_base	access:protected
std::_Deque_base::_Node_alloc_type::deallocate	stl/stl_deque.h	/^    { _Node_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp))); }$/;"	p	class:std::_Deque_base::_Node_alloc_type	signature:(__p, __deque_buf_size(sizeof(_Tp)))
std::_Deque_base::_S_initial_map_size	stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon15
std::_Deque_base::_S_initial_map_size	stl/stl_deque.h	/^  enum { _S_initial_map_size = 8 };$/;"	e	enum:std::_Deque_base::__anon16
std::_Deque_base::allocator_type	stl/stl_deque.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::allocator_type	stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::const_iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Deque_base	access:public	signature:() const
std::_Deque_base::iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:std::_Deque_base	access:public
std::_Deque_base::~_Deque_base	stl/stl_deque.h	/^  ~_Deque_base();    $/;"	p	class:std::_Deque_base	access:public	signature:()
std::_Deque_base::~_Deque_base	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::~_Deque_base() {$/;"	f	class:std::_Deque_base	signature:()
std::_Deque_iterator	stl/stl_deque.h	/^struct _Deque_iterator {$/;"	s	namespace:std
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator(_Tp* __x, _Map_pointer __y) $/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Tp* __x, _Map_pointer __y)
std::_Deque_iterator::_Deque_iterator	stl/stl_deque.h	/^  _Deque_iterator(const iterator& __x)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const iterator& __x)
std::_Deque_iterator::_M_cur	stl/stl_deque.h	/^  _Tp* _M_cur;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_first	stl/stl_deque.h	/^  _Tp* _M_first;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_last	stl/stl_deque.h	/^  _Tp* _M_last;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_node	stl/stl_deque.h	/^  _Map_pointer _M_node;$/;"	m	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_M_set_node	stl/stl_deque.h	/^  void _M_set_node(_Map_pointer __new_node) {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(_Map_pointer __new_node)
std::_Deque_iterator::_Map_pointer	stl/stl_deque.h	/^  typedef _Tp** _Map_pointer;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::_S_buffer_size	stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::_Self	stl/stl_deque.h	/^  typedef _Deque_iterator _Self;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::__node_offset	stl/stl_deque.h	/^      difference_type __node_offset =$/;"	l
std::_Deque_iterator::__offset	stl/stl_deque.h	/^    difference_type __offset = __n + (_M_cur - _M_first);$/;"	l
std::_Deque_iterator::__tmp	stl/stl_deque.h	/^    _Self __tmp = *this;$/;"	l
std::_Deque_iterator::const_iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::difference_type	stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::iterator	stl/stl_deque.h	/^  typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::iterator_category	stl/stl_deque.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::operator !=	stl/stl_deque.h	/^  bool operator!=(const _Self& __x) const { return !(*this == __x); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator *	stl/stl_deque.h	/^  reference operator*() const { return *_M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
std::_Deque_iterator::operator +	stl/stl_deque.h	/^  _Self operator+(difference_type __n) const$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator ++	stl/stl_deque.h	/^  _Self operator++(int)  {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
std::_Deque_iterator::operator ++	stl/stl_deque.h	/^  _Self& operator++() {$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::operator +=	stl/stl_deque.h	/^  _Self& operator+=(difference_type __n)$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator -	stl/stl_deque.h	/^  _Self operator-(difference_type __n) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator -	stl/stl_deque.h	/^  difference_type operator-(const _Self& __x) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator --	stl/stl_deque.h	/^  _Self operator--(int) {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(int)
std::_Deque_iterator::operator --	stl/stl_deque.h	/^  _Self& operator--() {$/;"	f	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::operator -=	stl/stl_deque.h	/^  _Self& operator-=(difference_type __n) { return *this += -__n; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator ->	stl/stl_deque.h	/^  pointer operator->() const { return _M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:() const
std::_Deque_iterator::operator <	stl/stl_deque.h	/^  bool operator<(const _Self& __x) const {$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator <=	stl/stl_deque.h	/^  bool operator<=(const _Self& __x) const { return !(__x < *this); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator ==	stl/stl_deque.h	/^  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator >	stl/stl_deque.h	/^  bool operator>(const _Self& __x) const  { return __x < *this; }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator >=	stl/stl_deque.h	/^  bool operator>=(const _Self& __x) const { return !(*this < __x); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(const _Self& __x) const
std::_Deque_iterator::operator []	stl/stl_deque.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }$/;"	f	struct:std::_Deque_iterator	access:public	signature:(difference_type __n) const
std::_Deque_iterator::pointer	stl/stl_deque.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::reference	stl/stl_deque.h	/^  typedef _Ref reference;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::size_type	stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Deque_iterator::value_type	stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	struct:std::_Deque_iterator	access:public
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(_Tp* __pointer) {$/;"	f	namespace:std	signature:(_Tp* __pointer)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(char*, char*) {}$/;"	f	namespace:std	signature:(char*, char*)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(double*, double*) {}$/;"	f	namespace:std	signature:(double*, double*)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(float*, float*) {}$/;"	f	namespace:std	signature:(float*, float*)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(int*, int*) {}$/;"	f	namespace:std	signature:(int*, int*)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(long*, long*) {}$/;"	f	namespace:std	signature:(long*, long*)
std::_Destroy	stl/stl_construct.h	/^inline void _Destroy(wchar_t*, wchar_t*) {}$/;"	f	namespace:std	signature:(wchar_t*, wchar_t*)
std::_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__first, __cur));$/;"	p	signature:(__first, __cur)
std::_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__first2, __mid2));$/;"	p	signature:(__first2, __mid2)
std::_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__result, __cur));$/;"	p	signature:(__result, __cur)
std::_Destroy	stl/stl_uninitialized.h	/^  __STL_UNWIND(_Destroy(__result, __mid));$/;"	p	signature:(__result, __mid)
std::_Eq_int_traits	stl/stl_ctraits_fns.h	/^struct _Eq_int_traits$/;"	s	namespace:std	inherits:binary_function
std::_Eq_int_traits::operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Eq_int_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::int_type& __y) const
std::_Eq_traits	stl/stl_ctraits_fns.h	/^struct _Eq_traits$/;"	s	namespace:std	inherits:binary_function
std::_Eq_traits::operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Eq_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
std::_Exception	stl/stl_exception.h	/^class _Exception {$/;"	c	namespace:std
std::_Hashtable_const_iterator	stl/stl_hashtable.h	/^struct _Hashtable_const_iterator {$/;"	s	namespace:std
std::_Hashtable_const_iterator::_Hashtable	stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator() {}$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:()
std::_Hashtable_const_iterator::_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const _Node* __n, const _Hashtable* __tab)
std::_Hashtable_const_iterator::_Hashtable_const_iterator	stl/stl_hashtable.h	/^  _Hashtable_const_iterator(const iterator& __it) $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const iterator& __it)
std::_Hashtable_const_iterator::_M_cur	stl/stl_hashtable.h	/^  const _Node* _M_cur;$/;"	m	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::_M_ht	stl/stl_hashtable.h	/^  const _Hashtable* _M_ht;$/;"	m	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::iterator_category	stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::operator !=	stl/stl_hashtable.h	/^  bool operator!=(const const_iterator& __it) const $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
std::_Hashtable_const_iterator::operator *	stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:() const
std::_Hashtable_const_iterator::operator ++	stl/stl_hashtable.h	/^  const_iterator operator++(int);$/;"	p	struct:std::_Hashtable_const_iterator	access:public	signature:(int)
std::_Hashtable_const_iterator::operator ++	stl/stl_hashtable.h	/^  const_iterator& operator++();$/;"	p	struct:std::_Hashtable_const_iterator	access:public	signature:()
std::_Hashtable_const_iterator::operator ++	stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:std::_Hashtable_const_iterator	signature:()
std::_Hashtable_const_iterator::operator ++	stl/stl_hashtable.h	/^_Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:std::_Hashtable_const_iterator	signature:(int)
std::_Hashtable_const_iterator::operator ->	stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:() const
std::_Hashtable_const_iterator::operator ==	stl/stl_hashtable.h	/^  bool operator==(const const_iterator& __it) const $/;"	f	struct:std::_Hashtable_const_iterator	access:public	signature:(const const_iterator& __it) const
std::_Hashtable_const_iterator::pointer	stl/stl_hashtable.h	/^  typedef const _Val* pointer;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::reference	stl/stl_hashtable.h	/^  typedef const _Val& reference;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::size_type	stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_const_iterator::value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
std::_Hashtable_iterator	stl/stl_hashtable.h	/^struct _Hashtable_iterator {$/;"	s	namespace:std
std::_Hashtable_iterator::_Hashtable	stl/stl_hashtable.h	/^          _Hashtable;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::_Hashtable_iterator	stl/stl_hashtable.h	/^  _Hashtable_iterator() {}$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:()
std::_Hashtable_iterator::_Hashtable_iterator	stl/stl_hashtable.h	/^  _Hashtable_iterator(_Node* __n, _Hashtable* __tab) $/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(_Node* __n, _Hashtable* __tab)
std::_Hashtable_iterator::_M_cur	stl/stl_hashtable.h	/^  _Node* _M_cur;$/;"	m	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::_M_ht	stl/stl_hashtable.h	/^  _Hashtable* _M_ht;$/;"	m	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::iterator_category	stl/stl_hashtable.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::operator !=	stl/stl_hashtable.h	/^  bool operator!=(const iterator& __it) const$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(const iterator& __it) const
std::_Hashtable_iterator::operator *	stl/stl_hashtable.h	/^  reference operator*() const { return _M_cur->_M_val; }$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:() const
std::_Hashtable_iterator::operator ++	stl/stl_hashtable.h	/^  iterator operator++(int);$/;"	p	struct:std::_Hashtable_iterator	access:public	signature:(int)
std::_Hashtable_iterator::operator ++	stl/stl_hashtable.h	/^  iterator& operator++();$/;"	p	struct:std::_Hashtable_iterator	access:public	signature:()
std::_Hashtable_iterator::operator ++	stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++()$/;"	f	class:std::_Hashtable_iterator	signature:()
std::_Hashtable_iterator::operator ++	stl/stl_hashtable.h	/^_Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>::operator++(int)$/;"	f	class:std::_Hashtable_iterator	signature:(int)
std::_Hashtable_iterator::operator ->	stl/stl_hashtable.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:() const
std::_Hashtable_iterator::operator ==	stl/stl_hashtable.h	/^  bool operator==(const iterator& __it) const$/;"	f	struct:std::_Hashtable_iterator	access:public	signature:(const iterator& __it) const
std::_Hashtable_iterator::pointer	stl/stl_hashtable.h	/^  typedef _Val* pointer;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::reference	stl/stl_hashtable.h	/^  typedef _Val& reference;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::size_type	stl/stl_hashtable.h	/^  typedef size_t size_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_iterator::value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
std::_Hashtable_node	stl/stl_hashtable.h	/^struct _Hashtable_node$/;"	s	namespace:std
std::_Hashtable_node::_M_next	stl/stl_hashtable.h	/^  _Hashtable_node* _M_next;$/;"	m	struct:std::_Hashtable_node	access:public
std::_Hashtable_node::_M_val	stl/stl_hashtable.h	/^  _Val _M_val;$/;"	m	struct:std::_Hashtable_node	access:public
std::_Identity	stl/stl_function.h	/^struct _Identity : public unary_function<_Tp,_Tp> {$/;"	s	namespace:std	inherits:unary_function
std::_Identity::operator ()	stl/stl_function.h	/^  const _Tp& operator()(const _Tp& __x) const { return __x; }$/;"	f	struct:std::_Identity	access:public	signature:(const _Tp& __x) const
std::_Is_POD	stl/stl_uninitialized.h	/^  typedef typename __type_traits<_Tp1>::is_POD_type _Is_POD;$/;"	t
std::_Is_POD	stl/stl_uninitialized.h	/^  typedef typename __type_traits<_Tp>::is_POD_type _Is_POD;$/;"	t
std::_List_alloc_base	stl/stl_list.h	/^class _List_alloc_base {$/;"	c	namespace:std
std::_List_alloc_base	stl/stl_list.h	/^class _List_alloc_base<_Tp, _Allocator, true> {$/;"	c	namespace:std
std::_List_alloc_base::_Alloc_type	stl/stl_list.h	/^          _Alloc_type;$/;"	t	class:std::_List_alloc_base	access:protected
std::_List_alloc_base::_Alloc_type::deallocate	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_List_alloc_base::_Alloc_type	signature:(__p, 1)
std::_List_alloc_base::_List_alloc_base	stl/stl_list.h	/^  _List_alloc_base(const allocator_type& __a) : _Node_allocator(__a) {}$/;"	f	class:std::_List_alloc_base	access:public	signature:(const allocator_type& __a)
std::_List_alloc_base::_List_alloc_base	stl/stl_list.h	/^  _List_alloc_base(const allocator_type&) {}$/;"	f	class:std::_List_alloc_base	access:public	signature:(const allocator_type&)
std::_List_alloc_base::_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_List_alloc_base	access:protected	signature:()
std::_List_alloc_base::_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node()$/;"	f	class:std::_List_alloc_base	access:protected	signature:()
std::_List_alloc_base::_M_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:std::_List_alloc_base	access:protected
std::_List_alloc_base::_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:std::_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
std::_List_alloc_base::_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p)$/;"	f	class:std::_List_alloc_base	access:protected	signature:(_List_node<_Tp>* __p)
std::_List_alloc_base::_Node_allocator	stl/stl_list.h	/^           _Node_allocator;$/;"	m	class:std::_List_alloc_base	access:protected
std::_List_alloc_base::allocator_type	stl/stl_list.h	/^          allocator_type;$/;"	t	class:std::_List_alloc_base	access:public
std::_List_alloc_base::deallocate	stl/stl_list.h	/^    { _Node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
std::_List_alloc_base::get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return _Node_allocator; }$/;"	f	class:std::_List_alloc_base	access:public	signature:() const
std::_List_alloc_base::get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_List_alloc_base	access:public	signature:() const
std::_List_base	stl/stl_list.h	/^class _List_base $/;"	c	namespace:std	inherits:_List_alloc_base
std::_List_base	stl/stl_list.h	/^class _List_base $/;"	c	namespace:std
std::_List_base::_Alloc_type	stl/stl_list.h	/^  typedef simple_alloc<_List_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	class:std::_List_base	access:protected
std::_List_base::_Alloc_type::deallocate	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	p	class:std::_List_base::_Alloc_type	signature:(__p, 1)
std::_List_base::_Base	stl/stl_list.h	/^          _Base; $/;"	t	class:std::_List_base	access:public
std::_List_base::_List_base	stl/stl_list.h	/^  _List_base(const allocator_type& __a) : _Base(__a) {$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type& __a)
std::_List_base::_List_base	stl/stl_list.h	/^  _List_base(const allocator_type&) {$/;"	f	class:std::_List_base	access:public	signature:(const allocator_type&)
std::_List_base::_M_get_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_List_base	access:protected	signature:()
std::_List_base::_M_node	stl/stl_list.h	/^  _List_node<_Tp>* _M_node;$/;"	m	class:std::_List_base	access:protected
std::_List_base::_M_put_node	stl/stl_list.h	/^  void _M_put_node(_List_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); } $/;"	f	class:std::_List_base	access:protected	signature:(_List_node<_Tp>* __p)
std::_List_base::allocator_type	stl/stl_list.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_List_base	access:public
std::_List_base::allocator_type	stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_List_base	access:public
std::_List_base::clear	stl/stl_list.h	/^  void clear();$/;"	p	class:std::_List_base	access:public	signature:()
std::_List_base::clear	stl/stl_list.h	/^_List_base<_Tp,_Alloc>::clear() $/;"	f	class:std::_List_base	signature:()
std::_List_base::get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_List_base	access:public	signature:() const
std::_List_base::~_List_base	stl/stl_list.h	/^  ~_List_base() {$/;"	f	class:std::_List_base	access:public	signature:()
std::_List_iterator	stl/stl_list.h	/^struct _List_iterator : public _List_iterator_base {$/;"	s	namespace:std	inherits:_List_iterator_base
std::_List_iterator::_List_iterator	stl/stl_list.h	/^  _List_iterator() {}$/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::_List_iterator	stl/stl_list.h	/^  _List_iterator(_Node* __x) : _List_iterator_base(__x) {}$/;"	f	struct:std::_List_iterator	access:public	signature:(_Node* __x)
std::_List_iterator::_List_iterator	stl/stl_list.h	/^  _List_iterator(const iterator& __x) : _List_iterator_base(__x._M_node) {}$/;"	f	struct:std::_List_iterator	access:public	signature:(const iterator& __x)
std::_List_iterator::_Node	stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::_Self	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Ref,_Ptr>             _Self;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::__tmp	stl/stl_list.h	/^    _Self __tmp = *this;$/;"	l
std::_List_iterator::const_iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::operator *	stl/stl_list.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:std::_List_iterator	access:public	signature:() const
std::_List_iterator::operator ++	stl/stl_list.h	/^  _Self operator++(int) { $/;"	f	struct:std::_List_iterator	access:public	signature:(int)
std::_List_iterator::operator ++	stl/stl_list.h	/^  _Self& operator++() { $/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::operator --	stl/stl_list.h	/^  _Self operator--(int) { $/;"	f	struct:std::_List_iterator	access:public	signature:(int)
std::_List_iterator::operator --	stl/stl_list.h	/^  _Self& operator--() { $/;"	f	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::operator ->	stl/stl_list.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_List_iterator	access:public	signature:() const
std::_List_iterator::pointer	stl/stl_list.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::reference	stl/stl_list.h	/^  typedef _Ref reference;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator::value_type	stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	struct:std::_List_iterator	access:public
std::_List_iterator_base	stl/stl_list.h	/^struct _List_iterator_base {$/;"	s	namespace:std
std::_List_iterator_base::_List_iterator_base	stl/stl_list.h	/^  _List_iterator_base() {}$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
std::_List_iterator_base::_List_iterator_base	stl/stl_list.h	/^  _List_iterator_base(_List_node_base* __x) : _M_node(__x) {}$/;"	f	struct:std::_List_iterator_base	access:public	signature:(_List_node_base* __x)
std::_List_iterator_base::_M_decr	stl/stl_list.h	/^  void _M_decr() { _M_node = _M_node->_M_prev; }$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
std::_List_iterator_base::_M_incr	stl/stl_list.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:std::_List_iterator_base	access:public	signature:()
std::_List_iterator_base::_M_node	stl/stl_list.h	/^  _List_node_base* _M_node;$/;"	m	struct:std::_List_iterator_base	access:public
std::_List_iterator_base::difference_type	stl/stl_list.h	/^  typedef ptrdiff_t                  difference_type;$/;"	t	struct:std::_List_iterator_base	access:public
std::_List_iterator_base::iterator_category	stl/stl_list.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_List_iterator_base	access:public
std::_List_iterator_base::operator !=	stl/stl_list.h	/^  bool operator!=(const _List_iterator_base& __x) const {$/;"	f	struct:std::_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
std::_List_iterator_base::operator ==	stl/stl_list.h	/^  bool operator==(const _List_iterator_base& __x) const {$/;"	f	struct:std::_List_iterator_base	access:public	signature:(const _List_iterator_base& __x) const
std::_List_iterator_base::size_type	stl/stl_list.h	/^  typedef size_t                     size_type;$/;"	t	struct:std::_List_iterator_base	access:public
std::_List_node	stl/stl_list.h	/^struct _List_node : public _List_node_base {$/;"	s	namespace:std	inherits:_List_node_base
std::_List_node::_M_data	stl/stl_list.h	/^  _Tp _M_data;$/;"	m	struct:std::_List_node	access:public
std::_List_node_base	stl/stl_list.h	/^struct _List_node_base {$/;"	s	namespace:std
std::_List_node_base::_M_next	stl/stl_list.h	/^  _List_node_base* _M_next;$/;"	m	struct:std::_List_node_base	access:public
std::_List_node_base::_M_prev	stl/stl_list.h	/^  _List_node_base* _M_prev;$/;"	m	struct:std::_List_node_base	access:public
std::_Lt_traits	stl/stl_ctraits_fns.h	/^struct _Lt_traits$/;"	s	namespace:std	inherits:binary_function
std::_Lt_traits::operator ()	stl/stl_ctraits_fns.h	/^  bool operator()(const typename _Traits::char_type& __x,$/;"	f	struct:std::_Lt_traits	access:public	signature:(const typename _Traits::char_type& __x, const typename _Traits::char_type& __y) const
std::_MAX_BYTES	stl/stl_alloc.h	/^  enum {_MAX_BYTES = 128};$/;"	e	enum:std::__anon10
std::_M_destroy_nodes	stl/stl_deque.h	/^    __STL_UNWIND(_M_destroy_nodes(_M_finish._M_node + 1, $/;"	p	signature:(_M_finish._M_node + 1, __new_finish._M_node + 1)
std::_M_destroy_nodes	stl/stl_deque.h	/^    __STL_UNWIND(_M_destroy_nodes(__new_start._M_node, _M_start._M_node));$/;"	p	signature:(__new_start._M_node, _M_start._M_node)
std::_M_destroy_nodes	stl/stl_deque.h	/^  __STL_UNWIND(_M_destroy_nodes(__nstart, __cur));$/;"	p	signature:(__nstart, __cur)
std::_M_erase	stl/stl_tree.h	/^  __STL_UNWIND(_M_erase(__top));$/;"	p	signature:(__top)
std::_M_fn	stl/ropeimpl.h	/^		  (*(__f->_M_fn))(__begin, __len, __buffer);$/;"	p	signature:(__begin, __len, __buffer)
std::_M_fn	stl/ropeimpl.h	/^		  (*(__f->_M_fn))(__start, __result_len, __section);$/;"	p	signature:(__start, __result_len, __section)
std::_M_fn	stl/ropeimpl.h	/^		(*(__f->_M_fn))(__i, 1, &__result);$/;"	p	signature:(__i, 1, &__result)
std::_M_free_c_string	stl/ropeimpl.h	/^		    __d->_M_free_c_string();$/;"	p	signature:()
std::_M_free_c_string	stl/ropeimpl.h	/^	      __r->_M_free_c_string();$/;"	p	signature:()
std::_M_free_c_string	stl/ropeimpl.h	/^	    __r->_M_free_c_string();$/;"	p	signature:()
std::_M_getc	stl/stl_iterator.h	/^    __i._M_getc();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^	    __base->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^	    __leftleft->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^	  __left->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^	__left->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^      __r->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^    _M_tree_ptr->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^    __left->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^    __r->_M_ref_nonnil();$/;"	p	signature:()
std::_M_ref_nonnil	stl/ropeimpl.h	/^    __right->_M_ref_nonnil();$/;"	p	signature:()
std::_M_set_node	stl/stl_deque.h	/^    _M_finish._M_set_node(_M_finish._M_node + 1);$/;"	p	signature:(_M_finish._M_node + 1)
std::_M_set_node	stl/stl_deque.h	/^    _M_start._M_set_node(_M_start._M_node - 1);$/;"	p	signature:(_M_start._M_node - 1)
std::_M_set_node	stl/stl_deque.h	/^  _M_finish._M_set_node(_M_finish._M_node - 1);$/;"	p	signature:(_M_finish._M_node - 1)
std::_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(_M_start._M_node + 1);$/;"	p	signature:(_M_start._M_node + 1)
std::_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(__new_nstart);$/;"	p	signature:(__new_nstart)
std::_M_set_node	stl/stl_deque.h	/^  _M_start._M_set_node(__nstart);$/;"	p	signature:(__nstart)
std::_M_unref_nonnil	stl/ropeimpl.h	/^	      __right->_M_unref_nonnil();$/;"	p	signature:()
std::_M_unref_nonnil	stl/ropeimpl.h	/^	    __forest[__i]->_M_unref_nonnil();$/;"	p	signature:()
std::_M_unref_nonnil	stl/ropeimpl.h	/^	   __result->_M_unref_nonnil();$/;"	p	signature:()
std::_M_unref_nonnil	stl/ropeimpl.h	/^	__forest[__i]->_M_unref_nonnil();$/;"	p	signature:()
std::_M_unref_nonnil	stl/ropeimpl.h	/^    _M_tree_ptr->_M_unref_nonnil();$/;"	p	signature:()
std::_NFREELISTS	stl/stl_alloc.h	/^  enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:std::__anon11
std::_Node	stl/stl_hashtable.h	/^  typedef typename hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::_Node _Node;$/;"	t
std::_Pii	stl/stl_hashtable.h	/^  typedef pair<const_iterator, const_iterator> _Pii;$/;"	t
std::_Pii	stl/stl_hashtable.h	/^  typedef pair<iterator, iterator> _Pii;$/;"	t
std::_Project1st	stl/stl_function.h	/^struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {$/;"	s	namespace:std	inherits:binary_function
std::_Project1st::operator ()	stl/stl_function.h	/^  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }$/;"	f	struct:std::_Project1st	access:public	signature:(const _Arg1& __x, const _Arg2&) const
std::_Project2nd	stl/stl_function.h	/^struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {$/;"	s	namespace:std	inherits:binary_function
std::_Project2nd::operator ()	stl/stl_function.h	/^  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }$/;"	f	struct:std::_Project2nd	access:public	signature:(const _Arg1&, const _Arg2& __y) const
std::_Rb_tree	stl/stl_tree.h	/^class _Rb_tree : protected _Rb_tree_base<_Value, _Alloc> {$/;"	c	namespace:std	inherits:_Rb_tree_base
std::_Rb_tree::_Base	stl/stl_tree.h	/^  typedef _Rb_tree_base<_Value, _Alloc> _Base;$/;"	t	class:std::_Rb_tree	access:private
std::_Rb_tree::_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_Color_type	stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node* _Link_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::_M_clone_node	stl/stl_tree.h	/^  _Link_type _M_clone_node(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_M_copy	stl/stl_tree.h	/^  ::_M_copy(_Link_type __x, _Link_type __p)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x, _Link_type __p)
std::_Rb_tree::_M_copy	stl/stl_tree.h	/^  _Link_type _M_copy(_Link_type __x, _Link_type __p);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x, _Link_type __p)
std::_Rb_tree::_M_create_node	stl/stl_tree.h	/^  _Link_type _M_create_node(const value_type& __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(const value_type& __x)
std::_Rb_tree::_M_empty_initialize	stl/stl_tree.h	/^  void _M_empty_initialize() {$/;"	f	class:std::_Rb_tree	access:private	signature:()
std::_Rb_tree::_M_erase	stl/stl_tree.h	/^  ::_M_erase(_Link_type __x)$/;"	f	class:std::_Rb_tree	signature:(_Link_type __x)
std::_Rb_tree::_M_erase	stl/stl_tree.h	/^  void _M_erase(_Link_type __x);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Link_type __x)
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^  ::_M_insert(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(_Base_ptr __x_, _Base_ptr __y_, const _Value& __v)
std::_Rb_tree::_M_insert	stl/stl_tree.h	/^  iterator _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	p	class:std::_Rb_tree	access:private	signature:(_Base_ptr __x, _Base_ptr __y, const value_type& __v)
std::_Rb_tree::_M_key_compare	stl/stl_tree.h	/^  _Compare _M_key_compare;$/;"	m	class:std::_Rb_tree	access:protected
std::_Rb_tree::_M_leftmost	stl/stl_tree.h	/^  _Link_type& _M_leftmost() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_node_count	stl/stl_tree.h	/^  size_type _M_node_count; \/\/ keeps track of size of tree$/;"	m	class:std::_Rb_tree	access:protected
std::_Rb_tree::_M_put_node	stl/stl_tree.h	/^    __STL_UNWIND(_M_put_node(__tmp));$/;"	p	signature:(__tmp)
std::_Rb_tree::_M_rightmost	stl/stl_tree.h	/^  _Link_type& _M_rightmost() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_M_root	stl/stl_tree.h	/^      _M_erase(_M_root());$/;"	p	signature:()
std::_Rb_tree::_M_root	stl/stl_tree.h	/^  _Link_type& _M_root() const $/;"	f	class:std::_Rb_tree	access:protected	signature:() const
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^  _Rb_tree()$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp)
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	f	class:std::_Rb_tree	access:public	signature:(const _Compare& __comp, const allocator_type& __a)
std::_Rb_tree::_Rb_tree	stl/stl_tree.h	/^  _Rb_tree(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x) $/;"	f	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
std::_Rb_tree::_Rb_tree_node	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value> _Rb_tree_node;$/;"	t	class:std::_Rb_tree	access:protected
std::_Rb_tree::_S_color	stl/stl_tree.h	/^  static _Color_type& _S_color(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_color	stl/stl_tree.h	/^  static _Color_type& _S_color(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_key	stl/stl_tree.h	/^  static const _Key& _S_key(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_key	stl/stl_tree.h	/^  static const _Key& _S_key(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_left	stl/stl_tree.h	/^  static _Link_type& _S_left(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_left	stl/stl_tree.h	/^  static _Link_type& _S_left(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_maximum	stl/stl_tree.h	/^  static _Link_type _S_maximum(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_minimum	stl/stl_tree.h	/^  static _Link_type _S_minimum(_Link_type __x) $/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_parent	stl/stl_tree.h	/^  static _Link_type& _S_parent(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_parent	stl/stl_tree.h	/^  static _Link_type& _S_parent(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_right	stl/stl_tree.h	/^  static _Link_type& _S_right(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_right	stl/stl_tree.h	/^  static _Link_type& _S_right(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::_S_value	stl/stl_tree.h	/^  static reference _S_value(_Base_ptr __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_value	stl/stl_tree.h	/^  static reference _S_value(_Link_type __x)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __x)
std::_Rb_tree::__STD::swap	stl/stl_tree.h	/^    __STD::swap(_M_header, __t._M_header);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_header, __t._M_header)
std::_Rb_tree::__STD::swap	stl/stl_tree.h	/^    __STD::swap(_M_key_compare, __t._M_key_compare);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_key_compare, __t._M_key_compare)
std::_Rb_tree::__STD::swap	stl/stl_tree.h	/^    __STD::swap(_M_node_count, __t._M_node_count);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_node_count, __t._M_node_count)
std::_Rb_tree::__rb_verify	stl/stl_tree.h	/^  bool __rb_verify() const;$/;"	p	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::__rb_verify	stl/stl_tree.h	/^bool _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	f	class:std::_Rb_tree	signature:() const
std::_Rb_tree::__tmp	stl/stl_tree.h	/^    _Link_type __tmp = _M_create_node(__x->_M_value_field);$/;"	l
std::_Rb_tree::__tmp	stl/stl_tree.h	/^    _Link_type __tmp = _M_get_node();$/;"	l
std::_Rb_tree::allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::begin	stl/stl_tree.h	/^  const_iterator begin() const { return _M_leftmost(); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::begin	stl/stl_tree.h	/^  iterator begin() { return _M_leftmost(); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::clear	stl/stl_tree.h	/^  void clear() {$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::const_iterator	stl/stl_tree.h	/^          const_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_pointer	stl/stl_tree.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_reference	stl/stl_tree.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_reverse_iterator	stl/stl_tree.h	/^          const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::const_reverse_iterator	stl/stl_tree.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::count	stl/stl_tree.h	/^  ::count(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::count	stl/stl_tree.h	/^  size_type count(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::destroy_node	stl/stl_tree.h	/^  void destroy_node(_Link_type __p)$/;"	f	class:std::_Rb_tree	access:protected	signature:(_Link_type __p)
std::_Rb_tree::difference_type	stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::empty	stl/stl_tree.h	/^  bool empty() const { return _M_node_count == 0; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::end	stl/stl_tree.h	/^  const_iterator end() const { return _M_header; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::end	stl/stl_tree.h	/^  iterator end() { return _M_header; }$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::equal_range	stl/stl_tree.h	/^  ::equal_range(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::equal_range	stl/stl_tree.h	/^  ::equal_range(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::equal_range	stl/stl_tree.h	/^  pair<const_iterator, const_iterator> equal_range(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::equal_range	stl/stl_tree.h	/^  pair<iterator,iterator> equal_range(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::erase	stl/stl_tree.h	/^  ::erase(const _Key* __first, const _Key* __last) $/;"	f	class:std::_Rb_tree	signature:(const _Key* __first, const _Key* __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:std::_Rb_tree	signature:(iterator __first, iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^  ::erase(iterator __position)$/;"	f	class:std::_Rb_tree	signature:(iterator __position)
std::_Rb_tree::erase	stl/stl_tree.h	/^  size_type erase(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::erase	stl/stl_tree.h	/^  void erase(const key_type* __first, const key_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type* __first, const key_type* __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __first, iterator __last)
std::_Rb_tree::erase	stl/stl_tree.h	/^  void erase(iterator __position);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position)
std::_Rb_tree::erase	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::erase(const _Key& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __x)
std::_Rb_tree::find	stl/stl_tree.h	/^  const_iterator find(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::find	stl/stl_tree.h	/^  iterator find(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::find	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::find	stl/stl_tree.h	/^_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>::find(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  ::insert_equal(_II __first, _II __last)$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  ::insert_equal(const _Val* __first, const _Val* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Val* __first, const _Val* __last)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  ::insert_equal(const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Value& __v)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  ::insert_equal(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  ::insert_equal(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  iterator insert_equal(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  iterator insert_equal(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  void insert_equal(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  void insert_equal(const value_type* __first, const value_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
std::_Rb_tree::insert_equal	stl/stl_tree.h	/^  void insert_equal(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  ::insert_unique(_II __first, _II __last) {$/;"	f	class:std::_Rb_tree	signature:(_II __first, _II __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  ::insert_unique(const _Val* __first, const _Val* __last)$/;"	f	class:std::_Rb_tree	signature:(const _Val* __first, const _Val* __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  ::insert_unique(const _Value& __v)$/;"	f	class:std::_Rb_tree	signature:(const _Value& __v)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  ::insert_unique(const_iterator __first, const_iterator __last)$/;"	f	class:std::_Rb_tree	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  ::insert_unique(iterator __position, const _Val& __v)$/;"	f	class:std::_Rb_tree	signature:(iterator __position, const _Val& __v)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  iterator insert_unique(iterator __position, const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(iterator __position, const value_type& __x)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  pair<iterator,bool> insert_unique(const value_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type& __x)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  void insert_unique(_InputIterator __first, _InputIterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  void insert_unique(const value_type* __first, const value_type* __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const value_type* __first, const value_type* __last)
std::_Rb_tree::insert_unique	stl/stl_tree.h	/^  void insert_unique(const_iterator __first, const_iterator __last);$/;"	p	class:std::_Rb_tree	access:public	signature:(const_iterator __first, const_iterator __last)
std::_Rb_tree::iterator	stl/stl_tree.h	/^  typedef _Rb_tree_iterator<value_type, reference, pointer> iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::key_comp	stl/stl_tree.h	/^  _Compare key_comp() const { return _M_key_compare; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::key_type	stl/stl_tree.h	/^  typedef _Key key_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^  ::lower_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^  ::lower_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^  const_iterator lower_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::lower_bound	stl/stl_tree.h	/^  iterator lower_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::max_size	stl/stl_tree.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::operator =	stl/stl_tree.h	/^  ::operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)$/;"	f	class:std::_Rb_tree	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
std::_Rb_tree::operator =	stl/stl_tree.h	/^  operator=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x)
std::_Rb_tree::pointer	stl/stl_tree.h	/^  typedef value_type* pointer;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::rbegin	stl/stl_tree.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::rbegin	stl/stl_tree.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::reference	stl/stl_tree.h	/^  typedef value_type& reference;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::rend	stl/stl_tree.h	/^  const_reverse_iterator rend() const { $/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::rend	stl/stl_tree.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::reverse_iterator	stl/stl_tree.h	/^          reverse_iterator; $/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::reverse_iterator	stl/stl_tree.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::size	stl/stl_tree.h	/^  size_type size() const { return _M_node_count; }$/;"	f	class:std::_Rb_tree	access:public	signature:() const
std::_Rb_tree::size_type	stl/stl_tree.h	/^  typedef size_t size_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::swap	stl/stl_tree.h	/^  void swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t) {$/;"	f	class:std::_Rb_tree	access:public	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t)
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^  ::upper_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^  ::upper_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^  const_iterator upper_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
std::_Rb_tree::upper_bound	stl/stl_tree.h	/^  iterator upper_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
std::_Rb_tree::value_type	stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	class:std::_Rb_tree	access:public
std::_Rb_tree::~_Rb_tree	stl/stl_tree.h	/^  ~_Rb_tree() { clear(); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree_Color_type	stl/stl_tree.h	/^typedef bool _Rb_tree_Color_type;$/;"	t	namespace:std
std::_Rb_tree_alloc_base	stl/stl_tree.h	/^class _Rb_tree_alloc_base {$/;"	c	namespace:std
std::_Rb_tree_alloc_base	stl/stl_tree.h	/^class _Rb_tree_alloc_base<_Tp, _Alloc, true> {$/;"	c	namespace:std
std::_Rb_tree_alloc_base::_Alloc_type	stl/stl_tree.h	/^          _Alloc_type;$/;"	t	class:std::_Rb_tree_alloc_base	access:protected
std::_Rb_tree_alloc_base::_Alloc_type::deallocate	stl/stl_tree.h	/^    { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Rb_tree_alloc_base::_Alloc_type	signature:(__p, 1)
std::_Rb_tree_alloc_base::_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node() $/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:()
std::_Rb_tree_alloc_base::_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:()
std::_Rb_tree_alloc_base::_M_header	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	class:std::_Rb_tree_alloc_base	access:protected
std::_Rb_tree_alloc_base::_M_node_allocator	stl/stl_tree.h	/^           _M_node_allocator;$/;"	m	class:std::_Rb_tree_alloc_base	access:protected
std::_Rb_tree_alloc_base::_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p) $/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
std::_Rb_tree_alloc_base::_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	class:std::_Rb_tree_alloc_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
std::_Rb_tree_alloc_base::_Rb_tree_alloc_base	stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Rb_tree_alloc_base::_Rb_tree_alloc_base	stl/stl_tree.h	/^  _Rb_tree_alloc_base(const allocator_type&) : _M_header(0) {}$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:(const allocator_type&)
std::_Rb_tree_alloc_base::allocator_type	stl/stl_tree.h	/^  typedef typename _Alloc_traits<_Tp, _Alloc>::allocator_type allocator_type;$/;"	t	class:std::_Rb_tree_alloc_base	access:public
std::_Rb_tree_alloc_base::deallocate	stl/stl_tree.h	/^    { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
std::_Rb_tree_alloc_base::get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:() const
std::_Rb_tree_alloc_base::get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rb_tree_alloc_base	access:public	signature:() const
std::_Rb_tree_base	stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s	namespace:std	inherits:_Rb_tree_alloc_base
std::_Rb_tree_base	stl/stl_tree.h	/^struct _Rb_tree_base$/;"	s	namespace:std
std::_Rb_tree_base::_Alloc_type	stl/stl_tree.h	/^  typedef simple_alloc<_Rb_tree_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:std::_Rb_tree_base	access:protected
std::_Rb_tree_base::_Alloc_type::deallocate	stl/stl_tree.h	/^    { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Rb_tree_base::_Alloc_type	signature:(__p, 1)
std::_Rb_tree_base::_Base	stl/stl_tree.h	/^          _Base;$/;"	t	struct:std::_Rb_tree_base	access:public
std::_Rb_tree_base::_M_get_node	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_get_node()$/;"	f	struct:std::_Rb_tree_base	access:protected	signature:()
std::_Rb_tree_base::_M_header	stl/stl_tree.h	/^  _Rb_tree_node<_Tp>* _M_header;$/;"	m	struct:std::_Rb_tree_base	access:protected
std::_Rb_tree_base::_M_put_node	stl/stl_tree.h	/^  void _M_put_node(_Rb_tree_node<_Tp>* __p)$/;"	f	struct:std::_Rb_tree_base	access:protected	signature:(_Rb_tree_node<_Tp>* __p)
std::_Rb_tree_base::_Rb_tree_base	stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type& __a) $/;"	f	struct:std::_Rb_tree_base	access:public	signature:(const allocator_type& __a)
std::_Rb_tree_base::_Rb_tree_base	stl/stl_tree.h	/^  _Rb_tree_base(const allocator_type&) $/;"	f	struct:std::_Rb_tree_base	access:public	signature:(const allocator_type&)
std::_Rb_tree_base::allocator_type	stl/stl_tree.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:std::_Rb_tree_base	access:public
std::_Rb_tree_base::allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rb_tree_base	access:public
std::_Rb_tree_base::get_allocator	stl/stl_tree.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:std::_Rb_tree_base	access:public	signature:() const
std::_Rb_tree_base::~_Rb_tree_base	stl/stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_M_header); }$/;"	f	struct:std::_Rb_tree_base	access:public	signature:()
std::_Rb_tree_base_iterator	stl/stl_tree.h	/^struct _Rb_tree_base_iterator$/;"	s	namespace:std
std::_Rb_tree_base_iterator::_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
std::_Rb_tree_base_iterator::_M_decrement	stl/stl_tree.h	/^  void _M_decrement()$/;"	f	struct:std::_Rb_tree_base_iterator	access:public	signature:()
std::_Rb_tree_base_iterator::_M_increment	stl/stl_tree.h	/^  void _M_increment()$/;"	f	struct:std::_Rb_tree_base_iterator	access:public	signature:()
std::_Rb_tree_base_iterator::_M_node	stl/stl_tree.h	/^  _Base_ptr _M_node;$/;"	m	struct:std::_Rb_tree_base_iterator	access:public
std::_Rb_tree_base_iterator::__y	stl/stl_tree.h	/^      _Base_ptr __y = _M_node->_M_left;$/;"	l
std::_Rb_tree_base_iterator::__y	stl/stl_tree.h	/^      _Base_ptr __y = _M_node->_M_parent;$/;"	l
std::_Rb_tree_base_iterator::difference_type	stl/stl_tree.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
std::_Rb_tree_base_iterator::iterator_category	stl/stl_tree.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::_Rb_tree_base_iterator	access:public
std::_Rb_tree_iterator	stl/stl_tree.h	/^struct _Rb_tree_iterator : public _Rb_tree_base_iterator$/;"	s	namespace:std	inherits:_Rb_tree_base_iterator
std::_Rb_tree_iterator::_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator() {}$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator(_Link_type __x) { _M_node = __x; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
std::_Rb_tree_iterator::_Rb_tree_iterator	stl/stl_tree.h	/^  _Rb_tree_iterator(const iterator& __it) { _M_node = __it._M_node; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(const iterator& __it)
std::_Rb_tree_iterator::_Self	stl/stl_tree.h	/^    _Self;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::__tmp	stl/stl_tree.h	/^    _Self __tmp = *this;$/;"	l
std::_Rb_tree_iterator::const_iterator	stl/stl_tree.h	/^    const_iterator;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::iterator	stl/stl_tree.h	/^    iterator;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::operator *	stl/stl_tree.h	/^  reference operator*() const { return _Link_type(_M_node)->_M_value_field; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
std::_Rb_tree_iterator::operator ++	stl/stl_tree.h	/^  _Self operator++(int) {$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
std::_Rb_tree_iterator::operator ++	stl/stl_tree.h	/^  _Self& operator++() { _M_increment(); return *this; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::operator --	stl/stl_tree.h	/^  _Self operator--(int) {$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:(int)
std::_Rb_tree_iterator::operator --	stl/stl_tree.h	/^  _Self& operator--() { _M_decrement(); return *this; }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::operator ->	stl/stl_tree.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Rb_tree_iterator	access:public	signature:() const
std::_Rb_tree_iterator::pointer	stl/stl_tree.h	/^  typedef _Ptr pointer;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::reference	stl/stl_tree.h	/^  typedef _Ref reference;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_iterator::value_type	stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
std::_Rb_tree_node	stl/stl_tree.h	/^struct _Rb_tree_node : public _Rb_tree_node_base$/;"	s	namespace:std	inherits:_Rb_tree_node_base
std::_Rb_tree_node::_Link_type	stl/stl_tree.h	/^  typedef _Rb_tree_node<_Value>* _Link_type;$/;"	t	struct:std::_Rb_tree_node	access:public
std::_Rb_tree_node::_M_value_field	stl/stl_tree.h	/^  _Value _M_value_field;$/;"	m	struct:std::_Rb_tree_node	access:public
std::_Rb_tree_node_base	stl/stl_tree.h	/^struct _Rb_tree_node_base$/;"	s	namespace:std
std::_Rb_tree_node_base::_Base_ptr	stl/stl_tree.h	/^  typedef _Rb_tree_node_base* _Base_ptr;$/;"	t	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_Color_type	stl/stl_tree.h	/^  typedef _Rb_tree_Color_type _Color_type;$/;"	t	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_color	stl/stl_tree.h	/^  _Color_type _M_color; $/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_left	stl/stl_tree.h	/^  _Base_ptr _M_left;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_parent	stl/stl_tree.h	/^  _Base_ptr _M_parent;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_M_right	stl/stl_tree.h	/^  _Base_ptr _M_right;$/;"	m	struct:std::_Rb_tree_node_base	access:public
std::_Rb_tree_node_base::_S_maximum	stl/stl_tree.h	/^  static _Base_ptr _S_maximum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_node_base::_S_minimum	stl/stl_tree.h	/^  static _Base_ptr _S_minimum(_Base_ptr __x)$/;"	f	struct:std::_Rb_tree_node_base	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_rebalance	stl/stl_tree.h	/^_Rb_tree_rebalance(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
std::_Rb_tree_rebalance_for_erase	stl/stl_tree.h	/^_Rb_tree_rebalance_for_erase(_Rb_tree_node_base* __z,$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __z, _Rb_tree_node_base*& __root, _Rb_tree_node_base*& __leftmost, _Rb_tree_node_base*& __rightmost)
std::_Rb_tree_rotate_left	stl/stl_tree.h	/^_Rb_tree_rotate_left(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
std::_Rb_tree_rotate_right	stl/stl_tree.h	/^_Rb_tree_rotate_right(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __x, _Rb_tree_node_base*& __root)
std::_Refcount_Base	stl/stl_threads.h	/^struct _Refcount_Base$/;"	s	namespace:std
std::_Refcount_Base::_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return --_M_ref_count; }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return InterlockedDecrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() { return __add_and_fetch(&_M_ref_count, (size_t) -1); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_decr	stl/stl_threads.h	/^  _RC_t _M_decr() {$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_incr	stl/stl_threads.h	/^   void _M_incr() { InterlockedIncrement((_RC_t*)&_M_ref_count); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_incr	stl/stl_threads.h	/^  void _M_incr() {  __add_and_fetch(&_M_ref_count, 1); }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_incr	stl/stl_threads.h	/^  void _M_incr() { ++_M_ref_count; }$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_incr	stl/stl_threads.h	/^  void _M_incr() {$/;"	f	struct:std::_Refcount_Base	access:public	signature:()
std::_Refcount_Base::_M_ref_count	stl/stl_threads.h	/^   volatile _RC_t _M_ref_count;$/;"	m	struct:std::_Refcount_Base	access:public
std::_Refcount_Base::_M_ref_count_lock	stl/stl_threads.h	/^  mutex_t         _M_ref_count_lock;$/;"	m	struct:std::_Refcount_Base	access:public
std::_Refcount_Base::_M_ref_count_lock	stl/stl_threads.h	/^  pthread_mutex_t _M_ref_count_lock;$/;"	m	struct:std::_Refcount_Base	access:public
std::_Refcount_Base::_RC_t	stl/stl_threads.h	/^  typedef long _RC_t;$/;"	t	struct:std::_Refcount_Base	access:public
std::_Refcount_Base::_Refcount_Base	stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n) {}$/;"	f	struct:std::_Refcount_Base	access:public	signature:(_RC_t __n)
std::_Refcount_Base::_Refcount_Base	stl/stl_threads.h	/^  _Refcount_Base(_RC_t __n) : _M_ref_count(__n)$/;"	f	struct:std::_Refcount_Base	access:public	signature:(_RC_t __n)
std::_Refcount_Base::__tmp	stl/stl_threads.h	/^    \/*volatile*\/ _RC_t __tmp = --_M_ref_count;$/;"	l
std::_Refcount_Base::__tmp	stl/stl_threads.h	/^    volatile _RC_t __tmp = --_M_ref_count;$/;"	l
std::_Ret	stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^inline const_mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^inline const_mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^inline const_mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun1_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^inline mem_fun1_ref_t<_Ret,_Tp,_Arg> mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^inline mem_fun1_t<_Ret,_Tp,_Arg> mem_fun1(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^inline mem_fun_ref_t<_Ret,_Tp> mem_fun_ref(_Ret (_Tp::*__f)()) $/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^inline mem_fun_t<_Ret,_Tp> mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Tp::*__f)
std::_Ret	stl/stl_function.h	/^mem_fun1_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_Ret	stl/stl_function.h	/^mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Tp::*__f) const
std::_RevIter1	stl/stl_algo.h	/^  typedef reverse_iterator<_BidirectionalIter1> _RevIter1;$/;"	t
std::_RevIter2	stl/stl_algo.h	/^  typedef reverse_iterator<_BidirectionalIter2> _RevIter2;$/;"	t
std::_RopeRep::_S_ref	stl/ropeimpl.h	/^        _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
std::_RopeRep::_S_ref	stl/ropeimpl.h	/^    _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
std::_RopeRep::_S_unref	stl/ropeimpl.h	/^        _RopeRep::_S_unref(_M_root);$/;"	p	class:std::_RopeRep	signature:(_M_root)
std::_RopeRep::_S_unref	stl/ropeimpl.h	/^      _RopeRep::_S_unref(__old);$/;"	p	class:std::_RopeRep	signature:(__old)
std::_Rope_Concat_fn	stl/stl_rope.h	/^struct _Rope_Concat_fn$/;"	s	namespace:std	inherits:binary_function
std::_Rope_Concat_fn::operator ()	stl/stl_rope.h	/^        rope<_CharT,_Alloc> operator() (const rope<_CharT,_Alloc>& __x,$/;"	f	struct:std::_Rope_Concat_fn	access:public	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
std::_Rope_RopeConcatenation	stl/stl_rope.h	/^struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
std::_Rope_RopeConcatenation::_M_left	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_left;$/;"	m	struct:std::_Rope_RopeConcatenation	access:public
std::_Rope_RopeConcatenation::_M_right	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_right;$/;"	m	struct:std::_Rope_RopeConcatenation	access:public
std::_Rope_RopeConcatenation::_M_unref_nonnil	stl/stl_rope.h	/^        _M_left->_M_unref_nonnil();$/;"	p	signature:()
std::_Rope_RopeConcatenation::_M_unref_nonnil	stl/stl_rope.h	/^        _M_right->_M_unref_nonnil();$/;"	p	signature:()
std::_Rope_RopeConcatenation::_Rope_RopeConcatenation	stl/stl_rope.h	/^    _Rope_RopeConcatenation(_Rope_RopeRep<_CharT,_Alloc>* __l,$/;"	f	struct:std::_Rope_RopeConcatenation	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __l, _Rope_RopeRep<_CharT,_Alloc>* __r, allocator_type __a)
std::_Rope_RopeConcatenation::allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeConcatenation	access:public
std::_Rope_RopeConcatenation::~_Rope_RopeConcatenation	stl/ropeimpl.h	/^		       ~_Rope_RopeConcatenation();$/;"	p	class:std::_Rope_RopeConcatenation	signature:()
std::_Rope_RopeConcatenation::~_Rope_RopeConcatenation	stl/stl_rope.h	/^    ~_Rope_RopeConcatenation() {$/;"	f	struct:std::_Rope_RopeConcatenation	access:public	signature:()
std::_Rope_RopeFunction	stl/stl_rope.h	/^struct _Rope_RopeFunction : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
std::_Rope_RopeFunction::_M_delete_when_done	stl/stl_rope.h	/^      bool _M_delete_when_done; \/\/ Char_producer is owned by the$/;"	m	struct:std::_Rope_RopeFunction	access:public
std::_Rope_RopeFunction::_M_fn	stl/stl_rope.h	/^    char_producer<_CharT>* _M_fn;$/;"	m	struct:std::_Rope_RopeFunction	access:public
std::_Rope_RopeFunction::_Rope_RopeFunction	stl/stl_rope.h	/^    _Rope_RopeFunction(char_producer<_CharT>* __f, size_t __size,$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
std::_Rope_RopeFunction::_S_fn_finalization_proc	stl/stl_rope.h	/^      static void _S_fn_finalization_proc(void * __tree, void *) {$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:(void * __tree, void *)
std::_Rope_RopeFunction::allocator_type	stl/stl_rope.h	/^                                        allocator_type;$/;"	t	struct:std::_Rope_RopeFunction	access:public
std::_Rope_RopeFunction::~_Rope_RopeFunction	stl/ropeimpl.h	/^	        __f->_Rope_RopeFunction<_CharT,_Alloc>::~_Rope_RopeFunction();$/;"	p	class:std::_Rope_RopeFunction	signature:()
std::_Rope_RopeFunction::~_Rope_RopeFunction	stl/stl_rope.h	/^    ~_Rope_RopeFunction() {$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:()
std::_Rope_RopeLeaf	stl/stl_rope.h	/^struct _Rope_RopeLeaf : public _Rope_RopeRep<_CharT,_Alloc> {$/;"	s	namespace:std	inherits:_Rope_RopeRep
std::_Rope_RopeLeaf::_M_data	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_data; \/* Not necessarily 0 terminated. *\/$/;"	m	struct:std::_Rope_RopeLeaf	access:public
std::_Rope_RopeLeaf::_Rope_RopeLeaf	stl/stl_rope.h	/^    _Rope_RopeLeaf(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:(__GC_CONST _CharT* __d, size_t __size, allocator_type __a)
std::_Rope_RopeLeaf::_S_alloc_granularity	stl/stl_rope.h	/^    enum { _S_alloc_granularity = 8 };$/;"	e	enum:std::_Rope_RopeLeaf::__anon19
std::_Rope_RopeLeaf::_S_rounded_up_size	stl/stl_rope.h	/^    static size_t _S_rounded_up_size(size_t __n) {$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:(size_t __n)
std::_Rope_RopeLeaf::__size_with_eos	stl/stl_rope.h	/^        size_t __size_with_eos;$/;"	l
std::_Rope_RopeLeaf::allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeLeaf	access:public
std::_Rope_RopeLeaf::~_Rope_RopeLeaf	stl/ropeimpl.h	/^	        __l->_Rope_RopeLeaf<_CharT,_Alloc>::~_Rope_RopeLeaf();$/;"	p	class:std::_Rope_RopeLeaf	signature:()
std::_Rope_RopeLeaf::~_Rope_RopeLeaf	stl/stl_rope.h	/^    ~_Rope_RopeLeaf() {$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:()
std::_Rope_RopeRep	stl/stl_rope.h	/^struct _Rope_RopeRep : public _Rope_rep_base<_CharT,_Alloc>$/;"	s	namespace:std	inherits:_Rope_rep_base,_Refcount_Base
std::_Rope_RopeRep::_M_c_string	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_c_string;$/;"	m	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeRep::_M_depth	stl/stl_rope.h	/^    unsigned char _M_depth;$/;"	m	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeRep::_M_free_c_string	stl/ropeimpl.h	/^inline void _Rope_RopeRep<_CharT,_Alloc>::_M_free_c_string()$/;"	f	class:std::_Rope_RopeRep	signature:()
std::_Rope_RopeRep::_M_free_c_string	stl/stl_rope.h	/^          void _M_free_c_string();$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_free_tree	stl/ropeimpl.h	/^void _Rope_RopeRep<_CharT,_Alloc>::_M_free_tree()$/;"	f	class:std::_Rope_RopeRep	signature:()
std::_Rope_RopeRep::_M_free_tree	stl/stl_rope.h	/^              if (0 != __t && 0 == __t->_M_ref_count) __t->_M_free_tree();$/;"	p	signature:()
std::_Rope_RopeRep::_M_free_tree	stl/stl_rope.h	/^          void _M_free_tree();$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_incr	stl/stl_rope.h	/^              if (0 != __t) __t->_M_incr();$/;"	p	signature:()
std::_Rope_RopeRep::_M_incr	stl/stl_rope.h	/^        void _M_incr () {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_is_balanced	stl/stl_rope.h	/^    bool _M_is_balanced:8;$/;"	m	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeRep::_M_ref_nonnil	stl/stl_rope.h	/^          void _M_ref_nonnil() {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_ref_nonnil	stl/stl_rope.h	/^          void _M_ref_nonnil()$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_tag	stl/stl_rope.h	/^    _Tag _M_tag:8;$/;"	m	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeRep::_M_unref_nonnil	stl/stl_rope.h	/^                  __t->_M_unref_nonnil();$/;"	p	signature:()
std::_Rope_RopeRep::_M_unref_nonnil	stl/stl_rope.h	/^          void _M_unref_nonnil() {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_M_unref_nonnil	stl/stl_rope.h	/^          void _M_unref_nonnil()$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:()
std::_Rope_RopeRep::_Rope_RopeRep	stl/stl_rope.h	/^    _Rope_RopeRep(_Tag __t, int __d, bool __b, size_t __size,$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Tag __t, int __d, bool __b, size_t __size, allocator_type __a)
std::_Rope_RopeRep::_S_concat	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
std::_Rope_RopeRep::_S_free_if_unref	stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
std::_Rope_RopeRep::_S_free_if_unref	stl/stl_rope.h	/^          static void _S_free_if_unref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
std::_Rope_RopeRep::_S_free_string	stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string$/;"	f	class:std::_Rope_RopeRep	signature:(const _CharT*, size_t, allocator_type)
std::_Rope_RopeRep::_S_free_string	stl/ropeimpl.h	/^  inline void _Rope_RopeRep<_CharT,_Alloc>::_S_free_string(_CharT* __s,$/;"	f	class:std::_Rope_RopeRep	signature:(_CharT* __s, size_t __n, allocator_type __a)
std::_Rope_RopeRep::_S_free_string	stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len);$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len)
std::_Rope_RopeRep::_S_free_string	stl/stl_rope.h	/^        static void _S_free_string(__GC_CONST _CharT*, size_t __len,$/;"	p	struct:std::_Rope_RopeRep	access:public	signature:(__GC_CONST _CharT*, size_t __len, allocator_type __a)
std::_Rope_RopeRep::_S_function	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
std::_Rope_RopeRep::_S_leaf	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
std::_Rope_RopeRep::_S_max_rope_depth	stl/stl_rope.h	/^    enum { _S_max_rope_depth = 45 };$/;"	e	enum:std::_Rope_RopeRep::__anon18
std::_Rope_RopeRep::_S_ref	stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
std::_Rope_RopeRep::_S_ref	stl/stl_rope.h	/^          static void _S_ref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
std::_Rope_RopeRep::_S_substringfn	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	e	enum:std::_Rope_RopeRep::_Tag
std::_Rope_RopeRep::_S_unref	stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep* __t)$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep* __t)
std::_Rope_RopeRep::_S_unref	stl/stl_rope.h	/^          static void _S_unref(_Rope_RopeRep*) {}$/;"	f	struct:std::_Rope_RopeRep	access:public	signature:(_Rope_RopeRep*)
std::_Rope_RopeRep::_Tag	stl/stl_rope.h	/^    enum _Tag {_S_leaf, _S_concat, _S_substringfn, _S_function};$/;"	g	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeRep::allocator_type	stl/stl_rope.h	/^                        allocator_type;$/;"	t	struct:std::_Rope_RopeRep	access:public
std::_Rope_RopeSubstring	stl/stl_rope.h	/^struct _Rope_RopeSubstring : public _Rope_RopeFunction<_CharT,_Alloc>,$/;"	s	namespace:std	inherits:_Rope_RopeFunction,char_producer
std::_Rope_RopeSubstring::_M_base	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_base;      \/\/ not 0$/;"	m	struct:std::_Rope_RopeSubstring	access:public
std::_Rope_RopeSubstring::_M_ref_nonnil	stl/stl_rope.h	/^            _M_base->_M_ref_nonnil();$/;"	p	signature:()
std::_Rope_RopeSubstring::_M_start	stl/stl_rope.h	/^    size_t _M_start;$/;"	m	struct:std::_Rope_RopeSubstring	access:public
std::_Rope_RopeSubstring::_M_unref_nonnil	stl/stl_rope.h	/^          _M_base->_M_unref_nonnil();$/;"	p	signature:()
std::_Rope_RopeSubstring::_Rope_RopeSubstring	stl/stl_rope.h	/^    _Rope_RopeSubstring(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s,$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
std::_Rope_RopeSubstring::__fn	stl/stl_rope.h	/^                char_producer<_CharT>* __fn =$/;"	l
std::_Rope_RopeSubstring::__s	stl/stl_rope.h	/^                __GC_CONST _CharT* __s =$/;"	l
std::_Rope_RopeSubstring::allocator_type	stl/stl_rope.h	/^        allocator_type;$/;"	t	struct:std::_Rope_RopeSubstring	access:public
std::_Rope_RopeSubstring::operator ()	stl/stl_rope.h	/^    virtual void operator()(size_t __start_pos, size_t __req_len,$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:(size_t __start_pos, size_t __req_len, _CharT* __buffer)
std::_Rope_RopeSubstring::~_Rope_RopeSubstring	stl/ropeimpl.h	/^		        ~_Rope_RopeSubstring();$/;"	p	class:std::_Rope_RopeSubstring	signature:()
std::_Rope_RopeSubstring::~_Rope_RopeSubstring	stl/stl_rope.h	/^    virtual ~_Rope_RopeSubstring()$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:()
std::_Rope_alloc_base	stl/stl_rope.h	/^class _Rope_alloc_base {$/;"	c	namespace:std
std::_Rope_alloc_base	stl/stl_rope.h	/^class _Rope_alloc_base<_CharT,_Allocator,true> {$/;"	c	namespace:std
std::_Rope_alloc_base::_M_data_allocator	stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:std::_Rope_alloc_base	access:protected
std::_Rope_alloc_base::_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep *_M_tree_ptr;$/;"	m	class:std::_Rope_alloc_base	access:protected
std::_Rope_alloc_base::_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:std::_Rope_alloc_base	access:protected
std::_Rope_alloc_base::_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Allocator> _RopeRep;$/;"	t	class:std::_Rope_alloc_base	access:public
std::_Rope_alloc_base::_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type& __a)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type& __a)
std::_Rope_alloc_base::_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(_RopeRep *__t, const allocator_type&)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(_RopeRep *__t, const allocator_type&)
std::_Rope_alloc_base::_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Rope_alloc_base::_Rope_alloc_base	stl/stl_rope.h	/^  _Rope_alloc_base(const allocator_type&) {}$/;"	f	class:std::_Rope_alloc_base	access:public	signature:(const allocator_type&)
std::_Rope_alloc_base::allocator_type	stl/stl_rope.h	/^          allocator_type;$/;"	t	class:std::_Rope_alloc_base	access:public
std::_Rope_alloc_base::get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Rope_alloc_base	access:public	signature:() const
std::_Rope_alloc_base::get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rope_alloc_base	access:public	signature:() const
std::_Rope_base	stl/stl_rope.h	/^class _Rope_base {$/;"	c	namespace:std
std::_Rope_base	stl/stl_rope.h	/^struct _Rope_base $/;"	s	namespace:std	inherits:_Rope_alloc_base
std::_Rope_base::_Base	stl/stl_rope.h	/^          _Base;$/;"	t	struct:std::_Rope_base	access:public
std::_Rope_base::_M_tree_ptr	stl/stl_rope.h	/^    _RopeRep* _M_tree_ptr;$/;"	m	class:std::_Rope_base	access:protected
std::_Rope_base::_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT, _Alloc> _RopeRep;$/;"	t	class:std::_Rope_base	access:public
std::_Rope_base::_RopeRep	stl/stl_rope.h	/^  typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	struct:std::_Rope_base	access:public
std::_Rope_base::_Rope_base	stl/stl_rope.h	/^  _Rope_base(_RopeRep * __t, const allocator_type&) : _M_tree_ptr(__t) {}$/;"	f	class:std::_Rope_base	access:public	signature:(_RopeRep * __t, const allocator_type&)
std::_Rope_base::_Rope_base	stl/stl_rope.h	/^  _Rope_base(_RopeRep* __t, const allocator_type& __a) : _Base(__t, __a) {}$/;"	f	struct:std::_Rope_base	access:public	signature:(_RopeRep* __t, const allocator_type& __a)
std::_Rope_base::_Rope_base	stl/stl_rope.h	/^  _Rope_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:std::_Rope_base	access:public	signature:(const allocator_type& __a)
std::_Rope_base::_Rope_base	stl/stl_rope.h	/^  _Rope_base(const allocator_type&) {}$/;"	f	class:std::_Rope_base	access:public	signature:(const allocator_type&)
std::_Rope_base::allocator_type	stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Rope_base	access:public
std::_Rope_base::allocator_type	stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rope_base	access:public
std::_Rope_base::get_allocator	stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:std::_Rope_base	access:public	signature:()
std::_Rope_char_consumer	stl/stl_rope.h	/^class _Rope_char_consumer {$/;"	c	namespace:std
std::_Rope_char_consumer::operator ()	stl/stl_rope.h	/^        virtual bool operator()(const _CharT* __buffer, size_t __len) = 0;$/;"	p	class:std::_Rope_char_consumer	access:public	signature:(const _CharT* __buffer, size_t __len)
std::_Rope_char_consumer::~_Rope_char_consumer	stl/stl_rope.h	/^        virtual ~_Rope_char_consumer() {};$/;"	f	class:std::_Rope_char_consumer	access:public	signature:()
std::_Rope_char_ptr_proxy	stl/stl_rope.h	/^class _Rope_char_ptr_proxy {$/;"	c	namespace:std
std::_Rope_char_ptr_proxy::_M_pos	stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:std::_Rope_char_ptr_proxy	access:private
std::_Rope_char_ptr_proxy::_M_root	stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_char_ptr_proxy	access:private
std::_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy() {}$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:()
std::_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(_CharT* __x) : _M_root(0), _M_pos(0) {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(_CharT* __x)
std::_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ptr_proxy& __x)$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
std::_Rope_char_ptr_proxy::_Rope_char_ptr_proxy	stl/stl_rope.h	/^    _Rope_char_ptr_proxy(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x) $/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ref_proxy<_CharT,_Alloc>& __x)
std::_Rope_char_ptr_proxy::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator==  __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
std::_Rope_char_ptr_proxy::operator *	stl/stl_rope.h	/^    _Rope_char_ref_proxy<_CharT,_Alloc> operator*() const {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:() const
std::_Rope_char_ptr_proxy::operator =	stl/stl_rope.h	/^    operator= (const _Rope_char_ptr_proxy& __x) {$/;"	f	class:std::_Rope_char_ptr_proxy	access:public	signature:(const _Rope_char_ptr_proxy& __x)
std::_Rope_char_ptr_proxy::operator ==	stl/stl_rope.h	/^    friend bool operator== (const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x,$/;"	p	class:std::_Rope_char_ptr_proxy	access:friend	signature:(const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __x, const _Rope_char_ptr_proxy<_CharT2,_Alloc2>& __y)
std::_Rope_char_ref_proxy	stl/stl_rope.h	/^class _Rope_char_ref_proxy {$/;"	c	namespace:std
std::_Rope_char_ref_proxy::_M_current	stl/stl_rope.h	/^    _CharT _M_current;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_M_current_valid	stl/stl_rope.h	/^    bool _M_current_valid;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_M_pos	stl/stl_rope.h	/^    size_t _M_pos;$/;"	m	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_M_root	stl/stl_rope.h	/^    _My_rope* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_My_rope	stl/stl_rope.h	/^    typedef rope<_CharT,_Alloc> _My_rope;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_RopeRep	stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p)
std::_Rope_char_ref_proxy::_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(_My_rope* __r, size_t __p, _CharT __c)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(_My_rope* __r, size_t __p, _CharT __c)
std::_Rope_char_ref_proxy::_Rope_char_ref_proxy	stl/stl_rope.h	/^    _Rope_char_ref_proxy(const _Rope_char_ref_proxy& __x)$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __x)
std::_Rope_char_ref_proxy::_Self_destruct_ptr	stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::_Self_destruct_ptr	stl/stl_rope.h	/^        typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:std::_Rope_char_ref_proxy	access:private
std::_Rope_char_ref_proxy::operator &	stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator& () const {$/;"	f	class:std::_Rope_char_ref_proxy	signature:() const
std::_Rope_char_ref_proxy::operator &	stl/stl_rope.h	/^    _Rope_char_ptr_proxy<_CharT,_Alloc> operator& () const;$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:() const
std::_Rope_char_ref_proxy::operator =	stl/ropeimpl.h	/^_Rope_char_ref_proxy<_CharT, _Alloc>::operator= (_CharT __c) {$/;"	f	class:std::_Rope_char_ref_proxy	signature:(_CharT __c)
std::_Rope_char_ref_proxy::operator =	stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (_CharT __c);$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:(_CharT __c)
std::_Rope_char_ref_proxy::operator =	stl/stl_rope.h	/^    _Rope_char_ref_proxy& operator= (const _Rope_char_ref_proxy& __c) {$/;"	f	class:std::_Rope_char_ref_proxy	access:public	signature:(const _Rope_char_ref_proxy& __c)
std::_Rope_char_ref_proxy::operator _CharT	stl/ropeimpl.h	/^inline _Rope_char_ref_proxy<_CharT, _Alloc>::operator _CharT () const$/;"	f	class:std::_Rope_char_ref_proxy	signature:() const
std::_Rope_char_ref_proxy::operator _CharT	stl/stl_rope.h	/^    inline operator _CharT () const;$/;"	p	class:std::_Rope_char_ref_proxy	access:public	signature:() const
std::_Rope_const_iterator	stl/stl_rope.h	/^class _Rope_const_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_iterator_base
std::_Rope_const_iterator::_RopeRep	stl/stl_rope.h	/^      typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_const_iterator	access:protected
std::_Rope_const_iterator::_Rope_const_iterator	stl/ropeimpl.h	/^_Rope_const_iterator<_CharT, _Alloc>::_Rope_const_iterator($/;"	f	class:std::_Rope_const_iterator	signature:( const _Rope_iterator<_CharT,_Alloc>& __x)
std::_Rope_const_iterator::_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator() {};$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
std::_Rope_const_iterator::_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _RopeRep* __root, size_t __pos):$/;"	f	class:std::_Rope_const_iterator	access:protected	signature:(const _RopeRep* __root, size_t __pos)
std::_Rope_const_iterator::_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_const_iterator& __x) :$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
std::_Rope_const_iterator::_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const _Rope_iterator<_CharT,_Alloc>& __x);$/;"	p	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_iterator<_CharT,_Alloc>& __x)
std::_Rope_const_iterator::_Rope_const_iterator	stl/stl_rope.h	/^    _Rope_const_iterator(const rope<_CharT,_Alloc>& __r, size_t __pos) :$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const rope<_CharT,_Alloc>& __r, size_t __pos)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::_Rope_const_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::_Rope_const_iterator::__next	stl/stl_rope.h	/^        __GC_CONST _CharT* __next;$/;"	l
std::_Rope_const_iterator::__old_pos	stl/stl_rope.h	/^        size_t __old_pos = _M_current_pos;$/;"	l
std::_Rope_const_iterator::operator *	stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
std::_Rope_const_iterator::operator +	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
std::_Rope_const_iterator::operator +	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT2,_Alloc2>& __x)
std::_Rope_const_iterator::operator ++	stl/stl_rope.h	/^    _Rope_const_iterator operator++(int) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(int)
std::_Rope_const_iterator::operator ++	stl/stl_rope.h	/^    _Rope_const_iterator& operator++() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
std::_Rope_const_iterator::operator +=	stl/stl_rope.h	/^    _Rope_const_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
std::_Rope_const_iterator::operator -	stl/stl_rope.h	/^    friend _Rope_const_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
std::_Rope_const_iterator::operator -	stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_const_iterator::operator --	stl/stl_rope.h	/^    _Rope_const_iterator operator--(int) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(int)
std::_Rope_const_iterator::operator --	stl/stl_rope.h	/^    _Rope_const_iterator& operator--() {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:()
std::_Rope_const_iterator::operator -=	stl/stl_rope.h	/^    _Rope_const_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(ptrdiff_t __n)
std::_Rope_const_iterator::operator <	stl/stl_rope.h	/^    friend bool operator< $/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_const_iterator::operator =	stl/stl_rope.h	/^    _Rope_const_iterator& operator= (const _Rope_const_iterator& __x) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(const _Rope_const_iterator& __x)
std::_Rope_const_iterator::operator ==	stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:std::_Rope_const_iterator	access:friend	signature:(const _Rope_const_iterator<_CharT2,_Alloc2>& __x, const _Rope_const_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_const_iterator::operator []	stl/stl_rope.h	/^    reference operator[](size_t __n) {$/;"	f	class:std::_Rope_const_iterator	access:public	signature:(size_t __n)
std::_Rope_const_iterator::pointer	stl/stl_rope.h	/^    typedef const _CharT* pointer;$/;"	t	class:std::_Rope_const_iterator	access:public
std::_Rope_const_iterator::reference	stl/stl_rope.h	/^    typedef _CharT reference;   \/\/ Really a value.  Returning a reference$/;"	t	class:std::_Rope_const_iterator	access:public
std::_Rope_fill	stl/ropeimpl.h	/^  inline void _Rope_fill(basic_ostream<_CharT, _Traits>& __o, size_t __n)$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, size_t __n)
std::_Rope_find_char_char_consumer	stl/ropeimpl.h	/^class _Rope_find_char_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
std::_Rope_find_char_char_consumer::_M_count	stl/ropeimpl.h	/^	size_t _M_count;  \/\/ Number of nonmatching characters$/;"	m	class:std::_Rope_find_char_char_consumer	access:public
std::_Rope_find_char_char_consumer::_M_pattern	stl/ropeimpl.h	/^	_CharT _M_pattern;$/;"	m	class:std::_Rope_find_char_char_consumer	access:private
std::_Rope_find_char_char_consumer::_Rope_find_char_char_consumer	stl/ropeimpl.h	/^	_Rope_find_char_char_consumer(_CharT __p) $/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:(_CharT __p)
std::_Rope_find_char_char_consumer::__i	stl/ropeimpl.h	/^	    size_t __i;$/;"	l
std::_Rope_find_char_char_consumer::operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
std::_Rope_find_char_char_consumer::~_Rope_find_char_char_consumer	stl/ropeimpl.h	/^	~_Rope_find_char_char_consumer() {}$/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:()
std::_Rope_flatten_char_consumer	stl/ropeimpl.h	/^class _Rope_flatten_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
std::_Rope_flatten_char_consumer::_M_buf_ptr	stl/ropeimpl.h	/^	_CharT* _M_buf_ptr;$/;"	m	class:std::_Rope_flatten_char_consumer	access:private
std::_Rope_flatten_char_consumer::_Rope_flatten_char_consumer	stl/ropeimpl.h	/^	_Rope_flatten_char_consumer(_CharT* __buffer) {$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:(_CharT* __buffer)
std::_Rope_flatten_char_consumer::operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n) {$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
std::_Rope_flatten_char_consumer::~_Rope_flatten_char_consumer	stl/ropeimpl.h	/^	~_Rope_flatten_char_consumer() {}$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:()
std::_Rope_insert_char_consumer	stl/ropeimpl.h	/^class _Rope_insert_char_consumer : public _Rope_char_consumer<_CharT> {$/;"	c	namespace:std	inherits:_Rope_char_consumer
std::_Rope_insert_char_consumer::_Insert_ostream	stl/ropeimpl.h	/^	  typedef basic_ostream<_CharT,_Traits> _Insert_ostream;$/;"	t	class:std::_Rope_insert_char_consumer	access:private
std::_Rope_insert_char_consumer::_M_o	stl/ropeimpl.h	/^	_Insert_ostream& _M_o;$/;"	m	class:std::_Rope_insert_char_consumer	access:private
std::_Rope_insert_char_consumer::_Rope_insert_char_consumer	stl/ropeimpl.h	/^	_Rope_insert_char_consumer(_Insert_ostream& __writer) $/;"	f	class:std::_Rope_insert_char_consumer	access:public	signature:(_Insert_ostream& __writer)
std::_Rope_insert_char_consumer::operator ()	stl/ropeimpl.h	/^	bool operator() (const _CharT* __leaf, size_t __n);$/;"	p	class:std::_Rope_insert_char_consumer	access:public	signature:(const _CharT* __leaf, size_t __n)
std::_Rope_insert_char_consumer::operator ()	stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT, _Traits>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
std::_Rope_insert_char_consumer::operator ()	stl/ropeimpl.h	/^  bool _Rope_insert_char_consumer<_CharT>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const _CharT* __leaf, size_t __n)
std::_Rope_insert_char_consumer::operator ()	stl/ropeimpl.h	/^  inline bool _Rope_insert_char_consumer<char>::operator()$/;"	f	class:std::_Rope_insert_char_consumer	signature:(const char* __leaf, size_t __n)
std::_Rope_insert_char_consumer::~_Rope_insert_char_consumer	stl/ropeimpl.h	/^	~_Rope_insert_char_consumer() { };$/;"	f	class:std::_Rope_insert_char_consumer	access:public	signature:()
std::_Rope_is_simple	stl/ropeimpl.h	/^inline bool _Rope_is_simple(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
std::_Rope_is_simple	stl/ropeimpl.h	/^inline bool _Rope_is_simple(wchar_t*) { return true; }$/;"	f	namespace:std	signature:(wchar_t*)
std::_Rope_is_simple	stl/ropeimpl.h	/^template <class _CharT> inline bool _Rope_is_simple(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
std::_Rope_iterator	stl/stl_rope.h	/^class _Rope_iterator : public _Rope_iterator_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_iterator_base
std::_Rope_iterator::_M_check	stl/ropeimpl.h	/^void _Rope_iterator<_CharT,_Alloc>::_M_check() {$/;"	f	class:std::_Rope_iterator	signature:()
std::_Rope_iterator::_M_check	stl/stl_rope.h	/^    void _M_check();$/;"	p	class:std::_Rope_iterator	access:protected	signature:()
std::_Rope_iterator::_M_root_rope	stl/stl_rope.h	/^    rope<_CharT,_Alloc>* _M_root_rope;$/;"	m	class:std::_Rope_iterator	access:protected
std::_Rope_iterator::_RopeRep::_S_ref	stl/stl_rope.h	/^        _RopeRep::_S_ref(_M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
std::_Rope_iterator::_RopeRep::_S_ref	stl/stl_rope.h	/^        _RopeRep::_S_ref(__x._M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(__x._M_root)
std::_Rope_iterator::_RopeRep::_S_ref	stl/stl_rope.h	/^       { _RopeRep::_S_ref(_M_root); if (!(__r -> empty()))_S_setcache(*this); }$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
std::_Rope_iterator::_RopeRep::_S_unref	stl/stl_rope.h	/^        _RopeRep::_S_unref(_M_root);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(_M_root)
std::_Rope_iterator::_RopeRep::_S_unref	stl/stl_rope.h	/^        _RopeRep::_S_unref(__old);$/;"	p	class:std::_Rope_iterator::_RopeRep	signature:(__old)
std::_Rope_iterator::_Rope_iterator	stl/ropeimpl.h	/^inline _Rope_iterator<_CharT,_Alloc>::_Rope_iterator($/;"	f	class:std::_Rope_iterator	signature:( rope<_CharT,_Alloc>& __r, size_t __pos)
std::_Rope_iterator::_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator::_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(const _Rope_iterator& __x) :$/;"	f	class:std::_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
std::_Rope_iterator::_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>& __r, size_t __pos);$/;"	p	class:std::_Rope_iterator	access:public	signature:(rope<_CharT,_Alloc>& __r, size_t __pos)
std::_Rope_iterator::_Rope_iterator	stl/stl_rope.h	/^    _Rope_iterator(rope<_CharT,_Alloc>* __r, size_t __pos)$/;"	f	class:std::_Rope_iterator	access:protected	signature:(rope<_CharT,_Alloc>* __r, size_t __pos)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator+ __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT,_Alloc> operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator< __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend bool operator== __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::_Rope_iterator::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^    friend ptrdiff_t operator- __STL_NULL_TMPL_ARGS$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::_Rope_iterator::__old	stl/stl_rope.h	/^        _RopeRep* __old = _M_root;$/;"	l
std::_Rope_iterator::__old_pos	stl/stl_rope.h	/^        size_t __old_pos = _M_current_pos;$/;"	l
std::_Rope_iterator::container	stl/stl_rope.h	/^    rope<_CharT,_Alloc>& container() { return *_M_root_rope; }$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator::operator *	stl/stl_rope.h	/^    reference operator*() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator::operator +	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
std::_Rope_iterator::operator +	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator+$/;"	p	class:std::_Rope_iterator	access:friend	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT2,_Alloc2>& __x)
std::_Rope_iterator::operator ++	stl/stl_rope.h	/^    _Rope_iterator operator++(int) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(int)
std::_Rope_iterator::operator ++	stl/stl_rope.h	/^    _Rope_iterator& operator++() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator::operator +=	stl/stl_rope.h	/^    _Rope_iterator& operator+=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
std::_Rope_iterator::operator -	stl/stl_rope.h	/^    friend _Rope_iterator<_CharT2,_Alloc2> operator-$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, ptrdiff_t __n)
std::_Rope_iterator::operator -	stl/stl_rope.h	/^    friend ptrdiff_t operator-$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_iterator::operator --	stl/stl_rope.h	/^    _Rope_iterator operator--(int) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(int)
std::_Rope_iterator::operator --	stl/stl_rope.h	/^    _Rope_iterator& operator--() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator::operator -=	stl/stl_rope.h	/^    _Rope_iterator& operator-=(ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
std::_Rope_iterator::operator <	stl/stl_rope.h	/^    friend bool operator<$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_iterator::operator =	stl/stl_rope.h	/^    _Rope_iterator& operator= (const _Rope_iterator& __x) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(const _Rope_iterator& __x)
std::_Rope_iterator::operator ==	stl/stl_rope.h	/^    friend bool operator==$/;"	p	class:std::_Rope_iterator	access:friend	signature:(const _Rope_iterator<_CharT2,_Alloc2>& __x, const _Rope_iterator<_CharT2,_Alloc2>& __y)
std::_Rope_iterator::operator []	stl/stl_rope.h	/^    reference operator[](ptrdiff_t __n) {$/;"	f	class:std::_Rope_iterator	access:public	signature:(ptrdiff_t __n)
std::_Rope_iterator::pointer	stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>* pointer;$/;"	t	class:std::_Rope_iterator	access:public
std::_Rope_iterator::reference	stl/stl_rope.h	/^    typedef _Rope_char_ref_proxy<_CharT,_Alloc>  reference;$/;"	t	class:std::_Rope_iterator	access:public
std::_Rope_iterator::~_Rope_iterator	stl/stl_rope.h	/^    ~_Rope_iterator() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
std::_Rope_iterator_base	stl/stl_rope.h	/^class _Rope_iterator_base$/;"	c	namespace:std	inherits:random_access_iterator
std::_Rope_iterator_base::_M_buf_end	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_end;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_buf_ptr	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_ptr;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_buf_start	stl/stl_rope.h	/^    __GC_CONST _CharT* _M_buf_start;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_current_pos	stl/stl_rope.h	/^    size_t _M_current_pos;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_decr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_decr(size_t __n) {$/;"	f	class:std::_Rope_iterator_base	signature:(size_t __n)
std::_Rope_iterator_base::_M_decr	stl/stl_rope.h	/^    void _M_decr(size_t __n);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(size_t __n)
std::_Rope_iterator_base::_M_incr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_M_incr(size_t __n) {$/;"	f	class:std::_Rope_iterator_base	signature:(size_t __n)
std::_Rope_iterator_base::_M_incr	stl/stl_rope.h	/^    void _M_incr(size_t __n);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(size_t __n)
std::_Rope_iterator_base::_M_leaf_index	stl/stl_rope.h	/^    int _M_leaf_index;     \/\/ Last valid __pos in path_end;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_leaf_pos	stl/stl_rope.h	/^    size_t _M_leaf_pos;    \/\/ Starting position for current leaf$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_path_directions	stl/stl_rope.h	/^    unsigned char _M_path_directions;$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_path_end	stl/stl_rope.h	/^    const _RopeRep* _M_path_end[_S_path_cache_len];$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_root	stl/stl_rope.h	/^    _RopeRep* _M_root;     \/\/ The whole rope.$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_M_tmp_buf	stl/stl_rope.h	/^    _CharT _M_tmp_buf[_S_iterator_buf_len];$/;"	m	class:std::_Rope_iterator_base	access:protected
std::_Rope_iterator_base::_RopeRep	stl/stl_rope.h	/^    typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::_Rope_iterator_base	access:public
std::_Rope_iterator_base::_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base() {}$/;"	f	class:std::_Rope_iterator_base	access:protected	signature:()
std::_Rope_iterator_base::_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base(_RopeRep* __root, size_t __pos)$/;"	f	class:std::_Rope_iterator_base	access:protected	signature:(_RopeRep* __root, size_t __pos)
std::_Rope_iterator_base::_Rope_iterator_base	stl/stl_rope.h	/^    _Rope_iterator_base(const _Rope_iterator_base& __x) {$/;"	f	class:std::_Rope_iterator_base	access:public	signature:(const _Rope_iterator_base& __x)
std::_Rope_iterator_base::_S_iterator_buf_len	stl/stl_rope.h	/^    enum { _S_iterator_buf_len = 15 };$/;"	e	enum:std::_Rope_iterator_base::__anon21
std::_Rope_iterator_base::_S_path_cache_len	stl/stl_rope.h	/^    enum { _S_path_cache_len = 4 }; \/\/ Must be <= 9.$/;"	e	enum:std::_Rope_iterator_base::__anon20
std::_Rope_iterator_base::_S_setbuf	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setbuf( $/;"	f	class:std::_Rope_iterator_base	signature:( _Rope_iterator_base<_CharT,_Alloc>& __x)
std::_Rope_iterator_base::_S_setbuf	stl/stl_rope.h	/^    static void _S_setbuf(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
std::_Rope_iterator_base::_S_setcache	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache$/;"	f	class:std::_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
std::_Rope_iterator_base::_S_setcache	stl/stl_rope.h	/^    static void _S_setcache(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
std::_Rope_iterator_base::_S_setcache_for_incr	stl/ropeimpl.h	/^void _Rope_iterator_base<_CharT,_Alloc>::_S_setcache_for_incr$/;"	f	class:std::_Rope_iterator_base	signature:(_Rope_iterator_base<_CharT,_Alloc>& __x)
std::_Rope_iterator_base::_S_setcache_for_incr	stl/stl_rope.h	/^    static void _S_setcache_for_incr(_Rope_iterator_base& __x);$/;"	p	class:std::_Rope_iterator_base	access:protected	signature:(_Rope_iterator_base& __x)
std::_Rope_iterator_base::_allocator_type	stl/stl_rope.h	/^    typedef _Alloc _allocator_type; \/\/ used in _Rope_rotate, VC++ workaround$/;"	t	class:std::_Rope_iterator_base	access:public
std::_Rope_iterator_base::index	stl/stl_rope.h	/^    size_t index() const { return _M_current_pos; }$/;"	f	class:std::_Rope_iterator_base	access:public	signature:() const
std::_Rope_rep_alloc_base	stl/stl_rope.h	/^class _Rope_rep_alloc_base {$/;"	c	namespace:std
std::_Rope_rep_alloc_base	stl/stl_rope.h	/^class _Rope_rep_alloc_base<_CharT,_Allocator,true> {$/;"	c	namespace:std
std::_Rope_rep_alloc_base::_M_data_allocator	stl/stl_rope.h	/^    allocator_type _M_data_allocator;$/;"	m	class:std::_Rope_rep_alloc_base	access:protected
std::_Rope_rep_alloc_base::_M_size	stl/stl_rope.h	/^  size_t _M_size;       \/\/ This is here only to avoid wasting space$/;"	m	class:std::_Rope_rep_alloc_base	access:public
std::_Rope_rep_alloc_base::_M_size	stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:std::_Rope_rep_alloc_base	access:public
std::_Rope_rep_alloc_base::_Rope_rep_alloc_base	stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type& __a)$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type& __a)
std::_Rope_rep_alloc_base::_Rope_rep_alloc_base	stl/stl_rope.h	/^  _Rope_rep_alloc_base(size_t __size, const allocator_type&)$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:(size_t __size, const allocator_type&)
std::_Rope_rep_alloc_base::__ROPE_DEFINE_ALLOCS	stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Allocator);$/;"	p	class:std::_Rope_rep_alloc_base	access:protected	signature:(_Allocator)
std::_Rope_rep_alloc_base::allocator_type	stl/stl_rope.h	/^          allocator_type;$/;"	t	class:std::_Rope_rep_alloc_base	access:public
std::_Rope_rep_alloc_base::get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:() const
std::_Rope_rep_alloc_base::get_allocator	stl/stl_rope.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Rope_rep_alloc_base	access:public	signature:() const
std::_Rope_rep_base	stl/stl_rope.h	/^class _Rope_rep_base {$/;"	c	namespace:std
std::_Rope_rep_base	stl/stl_rope.h	/^struct _Rope_rep_base$/;"	s	namespace:std	inherits:_Rope_rep_alloc_base
std::_Rope_rep_base::_Base	stl/stl_rope.h	/^          _Base;$/;"	t	struct:std::_Rope_rep_base	access:public
std::_Rope_rep_base::_M_size	stl/stl_rope.h	/^  size_t _M_size;$/;"	m	class:std::_Rope_rep_base	access:public
std::_Rope_rep_base::_Rope_rep_base	stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type& __a)$/;"	f	struct:std::_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type& __a)
std::_Rope_rep_base::_Rope_rep_base	stl/stl_rope.h	/^  _Rope_rep_base(size_t __size, const allocator_type&) : _M_size(__size) {}$/;"	f	class:std::_Rope_rep_base	access:public	signature:(size_t __size, const allocator_type&)
std::_Rope_rep_base::__ROPE_DEFINE_ALLOCS	stl/stl_rope.h	/^  __ROPE_DEFINE_ALLOCS(_Alloc);$/;"	p	class:std::_Rope_rep_base	access:protected	signature:(_Alloc)
std::_Rope_rep_base::allocator_type	stl/stl_rope.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::_Rope_rep_base	access:public
std::_Rope_rep_base::allocator_type	stl/stl_rope.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Rope_rep_base	access:public
std::_Rope_rep_base::get_allocator	stl/stl_rope.h	/^  static allocator_type get_allocator() { return allocator_type(); }$/;"	f	class:std::_Rope_rep_base	access:public	signature:()
std::_Rope_rotate	stl/ropeimpl.h	/^_Rope_rotate(_Rope_iterator __first,$/;"	f	namespace:std	signature:(_Rope_iterator __first, _Rope_iterator __middle, _Rope_iterator __last)
std::_Rope_self_destruct_ptr	stl/stl_rope.h	/^  struct _Rope_self_destruct_ptr {$/;"	s	namespace:std
std::_Rope_self_destruct_ptr::_M_ptr	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* _M_ptr;$/;"	m	struct:std::_Rope_self_destruct_ptr	access:public
std::_Rope_self_destruct_ptr::_Rope_RopeRep::_S_unref	stl/stl_rope.h	/^      { _Rope_RopeRep<_CharT,_Alloc>::_S_unref(_M_ptr); }$/;"	p	class:std::_Rope_self_destruct_ptr::_Rope_RopeRep	signature:(_M_ptr)
std::_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	stl/stl_rope.h	/^        _Rope_self_destruct_ptr() : _M_ptr(0) {};$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	stl/stl_rope.h	/^        _Rope_self_destruct_ptr() {};$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_Rope_self_destruct_ptr::_Rope_self_destruct_ptr	stl/stl_rope.h	/^    _Rope_self_destruct_ptr(_Rope_RopeRep<_CharT,_Alloc>* __p) : _M_ptr(__p) {}$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __p)
std::_Rope_self_destruct_ptr::operator *	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>& operator*() { return *_M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_Rope_self_destruct_ptr::operator ->	stl/stl_rope.h	/^    _Rope_RopeRep<_CharT,_Alloc>* operator->() { return _M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_Rope_self_destruct_ptr::operator =	stl/stl_rope.h	/^    _Rope_self_destruct_ptr& operator= (_Rope_RopeRep<_CharT,_Alloc>* __x)$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:(_Rope_RopeRep<_CharT,_Alloc>* __x)
std::_Rope_self_destruct_ptr::operator _Rope_RopeRep<_CharT,_Alloc>*	stl/stl_rope.h	/^    operator _Rope_RopeRep<_CharT,_Alloc>*() { return _M_ptr; }$/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_Rope_self_destruct_ptr::~_Rope_self_destruct_ptr	stl/stl_rope.h	/^    ~_Rope_self_destruct_ptr() $/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
std::_STL_auto_lock	stl/stl_threads.h	/^struct _STL_auto_lock$/;"	s	namespace:std
std::_STL_auto_lock::_M_acquire_lock	stl/stl_threads.h	/^    { _M_lock._M_acquire_lock(); }$/;"	p	signature:()
std::_STL_auto_lock::_M_lock	stl/stl_threads.h	/^  _STL_mutex_lock& _M_lock;$/;"	m	struct:std::_STL_auto_lock	access:public
std::_STL_auto_lock::_M_release_lock	stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	p	signature:()
std::_STL_auto_lock::_STL_auto_lock	stl/stl_threads.h	/^  _STL_auto_lock(_STL_mutex_lock& __lock) : _M_lock(__lock)$/;"	f	struct:std::_STL_auto_lock	access:public	signature:(_STL_mutex_lock& __lock)
std::_STL_auto_lock::_STL_auto_lock	stl/stl_threads.h	/^  _STL_auto_lock(const _STL_auto_lock&);$/;"	p	struct:std::_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
std::_STL_auto_lock::operator =	stl/stl_threads.h	/^  void operator=(const _STL_auto_lock&);$/;"	p	struct:std::_STL_auto_lock	access:private	signature:(const _STL_auto_lock&)
std::_STL_auto_lock::~_STL_auto_lock	stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	f	struct:std::_STL_auto_lock	access:public	signature:()
std::_STL_mutex_lock	stl/stl_threads.h	/^struct _STL_mutex_lock$/;"	s	namespace:std
std::_STL_mutex_lock::_M_acquire_lock	stl/stl_threads.h	/^  void _M_acquire_lock() {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
std::_STL_mutex_lock::_M_initialize	stl/stl_threads.h	/^  void _M_initialize() { _M_lock = 0; }$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
std::_STL_mutex_lock::_M_lock	stl/stl_threads.h	/^  volatile unsigned long _M_lock;$/;"	m	struct:std::_STL_mutex_lock	access:public
std::_STL_mutex_lock::_M_release_lock	stl/stl_threads.h	/^  void _M_release_lock() {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:()
std::_STL_mutex_lock::_STL_mutex_spin::__last	stl/stl_threads.h	/^        _STL_mutex_spin<0>::__last = __i;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
std::_STL_mutex_lock::_STL_mutex_spin::__max	stl/stl_threads.h	/^        _STL_mutex_spin<0>::__max = _STL_mutex_spin<0>::__high_max;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
std::_STL_mutex_lock::_STL_mutex_spin::__max	stl/stl_threads.h	/^    _STL_mutex_spin<0>::__max = _STL_mutex_spin<0>::__low_max;$/;"	m	class:std::_STL_mutex_lock::_STL_mutex_spin
std::_STL_mutex_lock::_S_nsec_sleep	stl/stl_threads.h	/^  static void _S_nsec_sleep(int __log_nsec) {$/;"	f	struct:std::_STL_mutex_lock	access:public	signature:(int __log_nsec)
std::_STL_mutex_lock::__i	stl/stl_threads.h	/^    unsigned __i;$/;"	l
std::_STL_mutex_lock::__junk	stl/stl_threads.h	/^    volatile unsigned __junk = 17;      \/\/ Value doesn't matter.$/;"	l
std::_STL_mutex_lock::__lock	stl/stl_threads.h	/^    volatile unsigned long* __lock = &_M_lock;$/;"	l
std::_STL_mutex_lock::__lock	stl/stl_threads.h	/^    volatile unsigned long* __lock = &this->_M_lock;$/;"	l
std::_STL_mutex_lock::__log_nsec	stl/stl_threads.h	/^      int __log_nsec = __i + 6;$/;"	l
std::_STL_mutex_lock::__my_last_spins	stl/stl_threads.h	/^    unsigned __my_last_spins = _STL_mutex_spin<0>::__last;$/;"	l
std::_STL_mutex_lock::__my_spin_max	stl/stl_threads.h	/^    unsigned __my_spin_max = _STL_mutex_spin<0>::__max;$/;"	l
std::_STL_mutex_lock::__ts	stl/stl_threads.h	/^          struct timespec __ts;$/;"	l
std::_STL_mutex_spin	stl/stl_threads.h	/^struct _STL_mutex_spin {$/;"	s	namespace:std
std::_STL_mutex_spin::__high_max	stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:std::_STL_mutex_spin::__anon23
std::_STL_mutex_spin::__last	stl/stl_threads.h	/^  static unsigned __last;$/;"	m	struct:std::_STL_mutex_spin	access:public
std::_STL_mutex_spin::__last	stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__last = 0;$/;"	m	class:std::_STL_mutex_spin
std::_STL_mutex_spin::__low_max	stl/stl_threads.h	/^  enum { __low_max = 30, __high_max = 1000 };$/;"	e	enum:std::_STL_mutex_spin::__anon23
std::_STL_mutex_spin::__max	stl/stl_threads.h	/^  static unsigned __max;$/;"	m	struct:std::_STL_mutex_spin	access:public
std::_STL_mutex_spin::__max	stl/stl_threads.h	/^unsigned _STL_mutex_spin<__inst>::__max = _STL_mutex_spin<__inst>::__low_max;$/;"	m	class:std::_STL_mutex_spin
std::_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(_CharT&) {}$/;"	f	namespace:std	signature:(_CharT&)
std::_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(char& __c) { __c = 0; }$/;"	f	namespace:std	signature:(char& __c)
std::_S_cond_store_eos	stl/stl_rope.h	/^inline void _S_cond_store_eos(wchar_t& __c) { __c = 0; }$/;"	f	namespace:std	signature:(wchar_t& __c)
std::_S_destr_concat_char_iter	stl/ropeimpl.h	/^      _My_rope::_S_destr_concat_char_iter(__left, &__c, 1));$/;"	p	signature:(__left, &__c, 1)
std::_S_eos	stl/stl_rope.h	/^inline _CharT _S_eos(_CharT*) { return _CharT(); }$/;"	f	namespace:std	signature:(_CharT*)
std::_S_is_almost_balanced	stl/ropeimpl.h	/^	    __stl_assert(_S_is_almost_balanced(__insertee));$/;"	p	signature:(__insertee)
std::_S_is_almost_balanced	stl/ropeimpl.h	/^    __stl_assert(_S_is_almost_balanced(__insertee));$/;"	p	signature:(__insertee)
std::_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
std::_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
std::_S_is_basic_char_type	stl/stl_rope.h	/^inline bool _S_is_basic_char_type(wchar_t*) { return true; }$/;"	f	namespace:std	signature:(wchar_t*)
std::_S_is_one_byte_char_type	stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(_CharT*) { return false; }$/;"	f	namespace:std	signature:(_CharT*)
std::_S_is_one_byte_char_type	stl/stl_rope.h	/^inline bool _S_is_one_byte_char_type(char*) { return true; }$/;"	f	namespace:std	signature:(char*)
std::_S_rb_tree_black	stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_black = true;$/;"	m	namespace:std
std::_S_rb_tree_red	stl/stl_tree.h	/^const _Rb_tree_Color_type _S_rb_tree_red = false;$/;"	m	namespace:std
std::_S_right	stl/stl_tree.h	/^    _M_erase(_S_right(__x));$/;"	p	signature:(__x)
std::_S_substring	stl/ropeimpl.h	/^		  _S_substring(__left, __start, __left_len));$/;"	p	signature:(__left, __start, __left_len)
std::_S_substring	stl/ropeimpl.h	/^		  _S_substring(__right, 0, __endp1 - __left_len));$/;"	p	signature:(__right, 0, __endp1 - __left_len)
std::_S_substring	stl/ropeimpl.h	/^	    _Self_destruct_ptr __prefix(_S_substring(__r, 0, __max_len));$/;"	p	signature:(__r, 0, __max_len)
std::_S_substring	stl/ropeimpl.h	/^      _My_rope::_S_substring(__old, 0, _M_pos));$/;"	p	signature:(__old, 0, _M_pos)
std::_S_substring	stl/ropeimpl.h	/^      _My_rope::_S_substring(__old, _M_pos+1, __old->_M_size));$/;"	p	signature:(__old, _M_pos+1, __old->_M_size)
std::_S_unref	stl/ropeimpl.h	/^	    __STL_UNWIND(_S_unref(__leftleft); _S_unref(__rest))$/;"	p	signature:(__leftleft)
std::_S_unref	stl/ropeimpl.h	/^	  __STL_UNWIND(_S_unref(__left); _S_unref(__nright));$/;"	p	signature:(__left)
std::_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__left); _S_unref(__right));$/;"	p	signature:(__left)
std::_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__r); _S_unref(__nright));$/;"	p	signature:(__r)
std::_S_unref	stl/ropeimpl.h	/^    __STL_UNWIND(_S_unref(__r); _S_unref(__right))$/;"	p	signature:(__r)
std::_Select1st	stl/stl_function.h	/^struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {$/;"	s	namespace:std	inherits:unary_function
std::_Select1st::operator ()	stl/stl_function.h	/^  const typename _Pair::first_type& operator()(const _Pair& __x) const {$/;"	f	struct:std::_Select1st	access:public	signature:(const _Pair& __x) const
std::_Select2nd	stl/stl_function.h	/^struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>$/;"	s	namespace:std	inherits:unary_function
std::_Select2nd::operator ()	stl/stl_function.h	/^  const typename _Pair::second_type& operator()(const _Pair& __x) const {$/;"	f	struct:std::_Select2nd	access:public	signature:(const _Pair& __x) const
std::_Slist_alloc_base	stl/stl_slist.h	/^class _Slist_alloc_base {$/;"	c	namespace:std
std::_Slist_alloc_base	stl/stl_slist.h	/^class _Slist_alloc_base<_Tp,_Allocator, true> {$/;"	c	namespace:std
std::_Slist_alloc_base::_Alloc_type	stl/stl_slist.h	/^          _Alloc_type;$/;"	t	class:std::_Slist_alloc_base	access:protected
std::_Slist_alloc_base::_Alloc_type::deallocate	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Slist_alloc_base::_Alloc_type	signature:(__p, 1)
std::_Slist_alloc_base::_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() $/;"	f	class:std::_Slist_alloc_base	access:protected	signature:()
std::_Slist_alloc_base::_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	class:std::_Slist_alloc_base	access:protected	signature:()
std::_Slist_alloc_base::_M_head	stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	class:std::_Slist_alloc_base	access:protected
std::_Slist_alloc_base::_M_node_allocator	stl/stl_slist.h	/^           _M_node_allocator;$/;"	m	class:std::_Slist_alloc_base	access:protected
std::_Slist_alloc_base::_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) $/;"	f	class:std::_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
std::_Slist_alloc_base::_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	class:std::_Slist_alloc_base	access:protected	signature:(_Slist_node<_Tp>* __p)
std::_Slist_alloc_base::_Slist_alloc_base	stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type& __a) : _M_node_allocator(__a) {}$/;"	f	class:std::_Slist_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Slist_alloc_base::_Slist_alloc_base	stl/stl_slist.h	/^  _Slist_alloc_base(const allocator_type&) {}$/;"	f	class:std::_Slist_alloc_base	access:public	signature:(const allocator_type&)
std::_Slist_alloc_base::allocator_type	stl/stl_slist.h	/^          allocator_type;$/;"	t	class:std::_Slist_alloc_base	access:public
std::_Slist_alloc_base::deallocate	stl/stl_slist.h	/^    { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
std::_Slist_alloc_base::get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::_Slist_alloc_base	access:public	signature:() const
std::_Slist_alloc_base::get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Slist_alloc_base	access:public	signature:() const
std::_Slist_base	stl/stl_slist.h	/^struct _Slist_base {$/;"	s	namespace:std
std::_Slist_base	stl/stl_slist.h	/^struct _Slist_base$/;"	s	namespace:std	inherits:_Slist_alloc_base
std::_Slist_base::_Alloc_type	stl/stl_slist.h	/^  typedef simple_alloc<_Slist_node<_Tp>, _Alloc> _Alloc_type;$/;"	t	struct:std::_Slist_base	access:protected
std::_Slist_base::_Alloc_type::deallocate	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	p	class:std::_Slist_base::_Alloc_type	signature:(__p, 1)
std::_Slist_base::_Base	stl/stl_slist.h	/^          _Base;$/;"	t	struct:std::_Slist_base	access:public
std::_Slist_base::_M_erase_after	stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base* __pos)$/;"	f	struct:std::_Slist_base	access:protected	signature:(_Slist_node_base* __pos)
std::_Slist_base::_M_erase_after	stl/stl_slist.h	/^  _Slist_node_base* _M_erase_after(_Slist_node_base*, _Slist_node_base*);$/;"	p	struct:std::_Slist_base	access:protected	signature:(_Slist_node_base*, _Slist_node_base*)
std::_Slist_base::_M_erase_after	stl/stl_slist.h	/^_Slist_base<_Tp,_Alloc>::_M_erase_after(_Slist_node_base* __before_first,$/;"	f	class:std::_Slist_base	signature:(_Slist_node_base* __before_first, _Slist_node_base* __last_node)
std::_Slist_base::_M_get_node	stl/stl_slist.h	/^  _Slist_node<_Tp>* _M_get_node() { return _Alloc_type::allocate(1); }$/;"	f	struct:std::_Slist_base	access:protected	signature:()
std::_Slist_base::_M_head	stl/stl_slist.h	/^  _Slist_node_base _M_head;$/;"	m	struct:std::_Slist_base	access:protected
std::_Slist_base::_M_put_node	stl/stl_slist.h	/^  void _M_put_node(_Slist_node<_Tp>* __p) { _Alloc_type::deallocate(__p, 1); }$/;"	f	struct:std::_Slist_base	access:protected	signature:(_Slist_node<_Tp>* __p)
std::_Slist_base::_Slist_base	stl/stl_slist.h	/^  _Slist_base(const allocator_type& __a)$/;"	f	struct:std::_Slist_base	access:public	signature:(const allocator_type& __a)
std::_Slist_base::_Slist_base	stl/stl_slist.h	/^  _Slist_base(const allocator_type&) { _M_head._M_next = 0; }$/;"	f	struct:std::_Slist_base	access:public	signature:(const allocator_type&)
std::_Slist_base::__next	stl/stl_slist.h	/^    _Slist_node<_Tp>* __next = (_Slist_node<_Tp>*) (__pos->_M_next);$/;"	l
std::_Slist_base::__next_next	stl/stl_slist.h	/^    _Slist_node_base* __next_next = __next->_M_next;$/;"	l
std::_Slist_base::allocator_type	stl/stl_slist.h	/^  typedef _Alloc allocator_type;$/;"	t	struct:std::_Slist_base	access:public
std::_Slist_base::allocator_type	stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Slist_base	access:public
std::_Slist_base::get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	struct:std::_Slist_base	access:public	signature:() const
std::_Slist_base::~_Slist_base	stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&_M_head, 0); }$/;"	f	struct:std::_Slist_base	access:public	signature:()
std::_Slist_base::~_Slist_base	stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&this->_M_head, 0); }$/;"	f	struct:std::_Slist_base	access:public	signature:()
std::_Slist_iterator	stl/stl_slist.h	/^struct _Slist_iterator : public _Slist_iterator_base$/;"	s	namespace:std	inherits:_Slist_iterator_base
std::_Slist_iterator::_Node	stl/stl_slist.h	/^  typedef _Slist_node<_Tp> _Node;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::_Self	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Ref, _Ptr>             _Self;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator() : _Slist_iterator_base(0) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:()
std::_Slist_iterator::_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator(_Node* __x) : _Slist_iterator_base(__x) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:(_Node* __x)
std::_Slist_iterator::_Slist_iterator	stl/stl_slist.h	/^  _Slist_iterator(const iterator& __x) : _Slist_iterator_base(__x._M_node) {}$/;"	f	struct:std::_Slist_iterator	access:public	signature:(const iterator& __x)
std::_Slist_iterator::__tmp	stl/stl_slist.h	/^    _Self __tmp = *this;$/;"	l
std::_Slist_iterator::const_iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::operator *	stl/stl_slist.h	/^  reference operator*() const { return ((_Node*) _M_node)->_M_data; }$/;"	f	struct:std::_Slist_iterator	access:public	signature:() const
std::_Slist_iterator::operator ++	stl/stl_slist.h	/^  _Self operator++(int)$/;"	f	struct:std::_Slist_iterator	access:public	signature:(int)
std::_Slist_iterator::operator ++	stl/stl_slist.h	/^  _Self& operator++()$/;"	f	struct:std::_Slist_iterator	access:public	signature:()
std::_Slist_iterator::operator ->	stl/stl_slist.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	struct:std::_Slist_iterator	access:public	signature:() const
std::_Slist_iterator::pointer	stl/stl_slist.h	/^  typedef _Ptr             pointer;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::reference	stl/stl_slist.h	/^  typedef _Ref             reference;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator::value_type	stl/stl_slist.h	/^  typedef _Tp              value_type;$/;"	t	struct:std::_Slist_iterator	access:public
std::_Slist_iterator_base	stl/stl_slist.h	/^struct _Slist_iterator_base$/;"	s	namespace:std
std::_Slist_iterator_base::_M_incr	stl/stl_slist.h	/^  void _M_incr() { _M_node = _M_node->_M_next; }$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:()
std::_Slist_iterator_base::_M_node	stl/stl_slist.h	/^  _Slist_node_base* _M_node;$/;"	m	struct:std::_Slist_iterator_base	access:public
std::_Slist_iterator_base::_Slist_iterator_base	stl/stl_slist.h	/^  _Slist_iterator_base(_Slist_node_base* __x) : _M_node(__x) {}$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(_Slist_node_base* __x)
std::_Slist_iterator_base::difference_type	stl/stl_slist.h	/^  typedef ptrdiff_t            difference_type;$/;"	t	struct:std::_Slist_iterator_base	access:public
std::_Slist_iterator_base::iterator_category	stl/stl_slist.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::_Slist_iterator_base	access:public
std::_Slist_iterator_base::operator !=	stl/stl_slist.h	/^  bool operator!=(const _Slist_iterator_base& __x) const {$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
std::_Slist_iterator_base::operator ==	stl/stl_slist.h	/^  bool operator==(const _Slist_iterator_base& __x) const {$/;"	f	struct:std::_Slist_iterator_base	access:public	signature:(const _Slist_iterator_base& __x) const
std::_Slist_iterator_base::size_type	stl/stl_slist.h	/^  typedef size_t               size_type;$/;"	t	struct:std::_Slist_iterator_base	access:public
std::_Slist_node	stl/stl_slist.h	/^struct _Slist_node : public _Slist_node_base$/;"	s	namespace:std	inherits:_Slist_node_base
std::_Slist_node::_M_data	stl/stl_slist.h	/^  _Tp _M_data;$/;"	m	struct:std::_Slist_node	access:public
std::_Slist_node_base	stl/stl_slist.h	/^struct _Slist_node_base$/;"	s	namespace:std
std::_Slist_node_base::_M_next	stl/stl_slist.h	/^  _Slist_node_base* _M_next;$/;"	m	struct:std::_Slist_node_base	access:public
std::_Swap_lock_struct	stl/stl_threads.h	/^    struct _Swap_lock_struct {$/;"	s	namespace:std
std::_Swap_lock_struct::_S_swap_lock	stl/stl_threads.h	/^        static mutex_t _S_swap_lock;$/;"	m	struct:std::_Swap_lock_struct	access:public
std::_Swap_lock_struct::_S_swap_lock	stl/stl_threads.h	/^        static pthread_mutex_t _S_swap_lock;$/;"	m	struct:std::_Swap_lock_struct	access:public
std::_Swap_lock_struct::_S_swap_lock	stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = DEFAULTMUTEX;$/;"	m	class:std::_Swap_lock_struct
std::_Swap_lock_struct::_S_swap_lock	stl/stl_threads.h	/^    _Swap_lock_struct<__dummy>::_S_swap_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:std::_Swap_lock_struct
std::_Temporary_buffer	stl/stl_tempbuf.h	/^class _Temporary_buffer {$/;"	c	namespace:std
std::_Temporary_buffer::_M_allocate_buffer	stl/stl_tempbuf.h	/^  void _M_allocate_buffer() {$/;"	f	class:std::_Temporary_buffer	access:private	signature:()
std::_Temporary_buffer::_M_buffer	stl/stl_tempbuf.h	/^  _Tp*       _M_buffer;$/;"	m	class:std::_Temporary_buffer	access:private
std::_Temporary_buffer::_M_initialize_buffer	stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp& val, __false_type) {$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Tp& val, __false_type)
std::_Temporary_buffer::_M_initialize_buffer	stl/stl_tempbuf.h	/^  void _M_initialize_buffer(const _Tp&, __true_type) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Tp&, __true_type)
std::_Temporary_buffer::_M_len	stl/stl_tempbuf.h	/^  ptrdiff_t  _M_len;$/;"	m	class:std::_Temporary_buffer	access:private
std::_Temporary_buffer::_M_original_len	stl/stl_tempbuf.h	/^  ptrdiff_t  _M_original_len;$/;"	m	class:std::_Temporary_buffer	access:private
std::_Temporary_buffer::_Temporary_buffer	stl/stl_tempbuf.h	/^  _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::_Temporary_buffer::_Temporary_buffer	stl/stl_tempbuf.h	/^  _Temporary_buffer(const _Temporary_buffer&) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
std::_Temporary_buffer::_Trivial	stl/stl_tempbuf.h	/^    typedef typename __type_traits<_Tp>::is_POD_type _Trivial;$/;"	t
std::_Temporary_buffer::begin	stl/stl_tempbuf.h	/^  _Tp* begin() { return _M_buffer; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Temporary_buffer::end	stl/stl_tempbuf.h	/^  _Tp* end() { return _M_buffer + _M_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Temporary_buffer::free	stl/stl_tempbuf.h	/^    __STL_UNWIND(free(_M_buffer); _M_buffer = 0; _M_len = 0);$/;"	p	signature:(_M_buffer)
std::_Temporary_buffer::operator =	stl/stl_tempbuf.h	/^  void operator=(const _Temporary_buffer&) {}$/;"	f	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer&)
std::_Temporary_buffer::requested_size	stl/stl_tempbuf.h	/^  ptrdiff_t requested_size() const { return _M_original_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
std::_Temporary_buffer::size	stl/stl_tempbuf.h	/^  ptrdiff_t size() const { return _M_len; }$/;"	f	class:std::_Temporary_buffer	access:public	signature:() const
std::_Temporary_buffer::~_Temporary_buffer	stl/stl_tempbuf.h	/^  ~_Temporary_buffer() {  $/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_Tp	stl/stl_algobase.h	/^  typedef typename iterator_traits<_InputIter>::value_type _Tp;$/;"	t
std::_Tp	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	p	signature:(__val)
std::_Trivial	stl/stl_algobase.h	/^          _Trivial;$/;"	t
std::_Trivial_destructor	stl/stl_construct.h	/^          _Trivial_destructor;$/;"	t
std::_Vector_alloc_base	stl/stl_vector.h	/^class _Vector_alloc_base {$/;"	c	namespace:std
std::_Vector_alloc_base	stl/stl_vector.h	/^class _Vector_alloc_base<_Tp, _Allocator, true> {$/;"	c	namespace:std
std::_Vector_alloc_base::_Alloc_type	stl/stl_vector.h	/^  typedef typename _Alloc_traits<_Tp, _Allocator>::_Alloc_type _Alloc_type;$/;"	t	class:std::_Vector_alloc_base	access:protected
std::_Vector_alloc_base::_Alloc_type::deallocate	stl/stl_vector.h	/^    { _Alloc_type::deallocate(__p, __n);}$/;"	p	class:std::_Vector_alloc_base::_Alloc_type	signature:(__p, __n)
std::_Vector_alloc_base::_M_allocate	stl/stl_vector.h	/^  _Tp* _M_allocate(size_t __n)$/;"	f	class:std::_Vector_alloc_base	access:protected	signature:(size_t __n)
std::_Vector_alloc_base::_M_data_allocator	stl/stl_vector.h	/^  allocator_type _M_data_allocator;$/;"	m	class:std::_Vector_alloc_base	access:protected
std::_Vector_alloc_base::_M_deallocate	stl/stl_vector.h	/^  void _M_deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::_Vector_alloc_base	access:protected	signature:(_Tp* __p, size_t __n)
std::_Vector_alloc_base::_M_end_of_storage	stl/stl_vector.h	/^  _Tp* _M_end_of_storage;$/;"	m	class:std::_Vector_alloc_base	access:protected
std::_Vector_alloc_base::_M_finish	stl/stl_vector.h	/^  _Tp* _M_finish;$/;"	m	class:std::_Vector_alloc_base	access:protected
std::_Vector_alloc_base::_M_start	stl/stl_vector.h	/^  _Tp* _M_start;$/;"	m	class:std::_Vector_alloc_base	access:protected
std::_Vector_alloc_base::_Vector_alloc_base	stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type& __a)$/;"	f	class:std::_Vector_alloc_base	access:public	signature:(const allocator_type& __a)
std::_Vector_alloc_base::_Vector_alloc_base	stl/stl_vector.h	/^  _Vector_alloc_base(const allocator_type&)$/;"	f	class:std::_Vector_alloc_base	access:public	signature:(const allocator_type&)
std::_Vector_alloc_base::allocator_type	stl/stl_vector.h	/^          allocator_type;$/;"	t	class:std::_Vector_alloc_base	access:public
std::_Vector_alloc_base::deallocate	stl/stl_vector.h	/^    { if (__p) _M_data_allocator.deallocate(__p, __n); }$/;"	p	signature:(__p, __n)
std::_Vector_alloc_base::get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return _M_data_allocator; }$/;"	f	class:std::_Vector_alloc_base	access:public	signature:() const
std::_Vector_alloc_base::get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::_Vector_alloc_base	access:public	signature:() const
std::_Vector_base	stl/stl_vector.h	/^struct _Vector_base$/;"	s	namespace:std	inherits:_Vector_alloc_base
std::_Vector_base::_Base	stl/stl_vector.h	/^          _Base;$/;"	t	struct:std::_Vector_base	access:public
std::_Vector_base::_Vector_base	stl/stl_vector.h	/^  _Vector_base(const allocator_type& __a) : _Base(__a) {}$/;"	f	struct:std::_Vector_base	access:public	signature:(const allocator_type& __a)
std::_Vector_base::_Vector_base	stl/stl_vector.h	/^  _Vector_base(size_t __n, const allocator_type& __a) : _Base(__a) {$/;"	f	struct:std::_Vector_base	access:public	signature:(size_t __n, const allocator_type& __a)
std::_Vector_base::allocator_type	stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::_Vector_base	access:public
std::_Vector_base::~_Vector_base	stl/stl_vector.h	/^  ~_Vector_base() { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }$/;"	f	struct:std::_Vector_base	access:public	signature:()
std::__BVECTOR	stl/stl_bvector.h	/^class __BVECTOR : public __BVECTOR_BASE $/;"	c	namespace:std	inherits:__BVECTOR_BASE
std::__BVECTOR::_Integral	stl/stl_bvector.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
std::__BVECTOR::_M_assign_aux	stl/stl_bvector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::__BVECTOR::_M_assign_aux	stl/stl_bvector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::__BVECTOR::_M_assign_dispatch	stl/stl_bvector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
std::__BVECTOR::_M_assign_dispatch	stl/stl_bvector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::__BVECTOR	access:public	signature:(_Integer __n, _Integer __val, __true_type)
std::__BVECTOR::_M_fill_assign	stl/stl_bvector.h	/^  void _M_fill_assign(size_t __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_t __n, bool __x)
std::__BVECTOR::_M_fill_insert	stl/stl_bvector.h	/^  void _M_fill_insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
std::__BVECTOR::_M_initialize	stl/stl_bvector.h	/^  void _M_initialize(size_type __n) {$/;"	f	class:std::__BVECTOR	access:protected	signature:(size_type __n)
std::__BVECTOR::_M_initialize_dispatch	stl/stl_bvector.h	/^  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::__BVECTOR::_M_initialize_dispatch	stl/stl_bvector.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:std::__BVECTOR	access:public	signature:(_Integer __n, _Integer __x, __true_type)
std::__BVECTOR::_M_initialize_range	stl/stl_bvector.h	/^  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::__BVECTOR	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::__BVECTOR::_M_initialize_range	stl/stl_bvector.h	/^  void _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::__BVECTOR::_M_insert_aux	stl/stl_bvector.h	/^  void _M_insert_aux(iterator __position, bool __x) {$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __position, bool __x)
std::__BVECTOR::_M_insert_dispatch	stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
std::__BVECTOR::_M_insert_dispatch	stl/stl_bvector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::__BVECTOR::_M_insert_range	stl/stl_bvector.h	/^  void _M_insert_range(iterator __pos,$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
std::__BVECTOR::_M_insert_range	stl/stl_bvector.h	/^  void _M_insert_range(iterator __position,$/;"	f	class:std::__BVECTOR	access:protected	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::__BVECTOR::_M_range_check	stl/stl_bvector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
std::__BVECTOR::__STD::swap	stl/stl_bvector.h	/^    __STD::swap(_M_end_of_storage, __x._M_end_of_storage);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_end_of_storage, __x._M_end_of_storage)
std::__BVECTOR::__STD::swap	stl/stl_bvector.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_finish, __x._M_finish)
std::__BVECTOR::__STD::swap	stl/stl_bvector.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_start, __x._M_start)
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  __VECTOR(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const __VECTOR& __x) : __BVECTOR_BASE(__x.get_allocator()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(const __VECTOR& __x)
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const bool* __first, const bool* __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(const bool* __first, const bool* __last, const allocator_type& __a = allocator_type())
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  __VECTOR(const_iterator __first, const_iterator __last,$/;"	f	class:std::__BVECTOR	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  __VECTOR(size_type __n, bool __value,$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n, bool __value, const allocator_type& __a = allocator_type())
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  explicit __VECTOR(const allocator_type& __a = allocator_type())$/;"	f	class:std::__BVECTOR	access:public	signature:(const allocator_type& __a = allocator_type())
std::__BVECTOR::__VECTOR	stl/stl_bvector.h	/^  explicit __VECTOR(size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
std::__BVECTOR::__cur	stl/stl_bvector.h	/^    iterator __cur = begin();$/;"	l
std::__BVECTOR::__first	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	l
std::__BVECTOR::__i	stl/stl_bvector.h	/^        iterator __i = copy(begin(), __position, iterator(__q, 0));$/;"	l
std::__BVECTOR::__i	stl/stl_bvector.h	/^      iterator __i = copy(begin(), __position, iterator(__q, 0));$/;"	l
std::__BVECTOR::__last	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	l
std::__BVECTOR::__last	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	l
std::__BVECTOR::__len	stl/stl_bvector.h	/^        size_type __len = size() + max(size(), __n);$/;"	l
std::__BVECTOR::__len	stl/stl_bvector.h	/^      size_type __len = size() + max(size(), __n);$/;"	l
std::__BVECTOR::__len	stl/stl_bvector.h	/^      size_type __len = size() ? 2 * size() : __WORD_BIT;$/;"	l
std::__BVECTOR::__len	stl/stl_bvector.h	/^    size_type __len = 0;$/;"	l
std::__BVECTOR::__mid	stl/stl_bvector.h	/^      _ForwardIterator __mid = __first;$/;"	l
std::__BVECTOR::__mid	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	l
std::__BVECTOR::__n	stl/stl_bvector.h	/^      size_type __n = 0;$/;"	l
std::__BVECTOR::__n	stl/stl_bvector.h	/^    difference_type __n = __position - begin();$/;"	l
std::__BVECTOR::__n	stl/stl_bvector.h	/^    size_type __n = 0;$/;"	l
std::__BVECTOR::__q	stl/stl_bvector.h	/^        unsigned int* __q = _M_bit_alloc(__len);$/;"	l
std::__BVECTOR::__q	stl/stl_bvector.h	/^      unsigned int* __q = _M_bit_alloc(__len);$/;"	l
std::__BVECTOR::__q	stl/stl_bvector.h	/^      unsigned int* __q = _M_bit_alloc(__n);$/;"	l
std::__BVECTOR::__q	stl/stl_bvector.h	/^    unsigned int* __q = _M_bit_alloc(__n);$/;"	l
std::__BVECTOR::__x	stl/stl_bvector.h	/^      _M_insert_aux(end(), __x);$/;"	l
std::__BVECTOR::__x	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	l
std::__BVECTOR::__x	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	l
std::__BVECTOR::allocator_type	stl/stl_bvector.h	/^  typedef typename __BVECTOR_BASE::allocator_type allocator_type;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::assign	stl/stl_bvector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::__BVECTOR::assign	stl/stl_bvector.h	/^  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }$/;"	f	class:std::__BVECTOR	access:public	signature:(size_t __n, bool __x)
std::__BVECTOR::at	stl/stl_bvector.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
std::__BVECTOR::at	stl/stl_bvector.h	/^  reference at(size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
std::__BVECTOR::back	stl/stl_bvector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::back	stl/stl_bvector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::begin	stl/stl_bvector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::begin	stl/stl_bvector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::begin	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
std::__BVECTOR::capacity	stl/stl_bvector.h	/^  size_type capacity() const {$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::clear	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::const_iterator	stl/stl_bvector.h	/^  typedef _Bit_const_iterator          const_iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::const_pointer	stl/stl_bvector.h	/^  typedef const bool* const_pointer;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::const_reference	stl/stl_bvector.h	/^  typedef bool const_reference;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::const_reverse_iterator	stl/stl_bvector.h	/^                           difference_type> const_reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::const_reverse_iterator	stl/stl_bvector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::copy	stl/stl_bvector.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:(__first, __last, begin())
std::__BVECTOR::difference_type	stl/stl_bvector.h	/^  typedef ptrdiff_t difference_type; $/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::empty	stl/stl_bvector.h	/^  bool empty() const { return begin() == end(); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::end	stl/stl_bvector.h	/^      _M_insert_aux(end(), __x);$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      erase(begin() + difference_type(__new_size), end());$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      insert(end(), __first, __last);$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      insert(end(), __mid, __last);$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::end	stl/stl_bvector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::end	stl/stl_bvector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
std::__BVECTOR::erase	stl/stl_bvector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __first, iterator __last)
std::__BVECTOR::erase	stl/stl_bvector.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position)
std::__BVECTOR::flip	stl/stl_bvector.h	/^  void flip() {$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::front	stl/stl_bvector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::front	stl/stl_bvector.h	/^  reference front() { return *begin(); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::get_allocator	stl/stl_bvector.h	/^  allocator_type get_allocator() const {$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::insert	stl/stl_bvector.h	/^  iterator insert(iterator __position, bool __x = bool()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, bool __x = bool())
std::__BVECTOR::insert	stl/stl_bvector.h	/^  void insert(iterator __position, const bool* __first, const bool* __last) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, const bool* __first, const bool* __last)
std::__BVECTOR::insert	stl/stl_bvector.h	/^  void insert(iterator __position, size_type __n, bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, size_type __n, bool __x)
std::__BVECTOR::insert	stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, _InputIterator __first, _InputIterator __last)
std::__BVECTOR::insert	stl/stl_bvector.h	/^  void insert(iterator __position,$/;"	f	class:std::__BVECTOR	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
std::__BVECTOR::iterator	stl/stl_bvector.h	/^  typedef _Bit_iterator                iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::max_size	stl/stl_bvector.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::operator =	stl/stl_bvector.h	/^  __VECTOR& operator=(const __VECTOR& __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(const __VECTOR& __x)
std::__BVECTOR::operator []	stl/stl_bvector.h	/^  const_reference operator[](size_type __n) const$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n) const
std::__BVECTOR::operator []	stl/stl_bvector.h	/^  reference operator[](size_type __n)$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
std::__BVECTOR::pointer	stl/stl_bvector.h	/^  typedef _Bit_reference* pointer;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::pop_back	stl/stl_bvector.h	/^  void pop_back() { --_M_finish; }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::push_back	stl/stl_bvector.h	/^  void push_back(bool __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(bool __x)
std::__BVECTOR::rbegin	stl/stl_bvector.h	/^  const_reverse_iterator rbegin() const { $/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::rbegin	stl/stl_bvector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::reference	stl/stl_bvector.h	/^  typedef _Bit_reference reference;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::rend	stl/stl_bvector.h	/^  const_reverse_iterator rend() const { $/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::rend	stl/stl_bvector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__BVECTOR::reserve	stl/stl_bvector.h	/^  void reserve(size_type __n) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __n)
std::__BVECTOR::resize	stl/stl_bvector.h	/^  void resize(size_type __new_size, bool __x = bool()) {$/;"	f	class:std::__BVECTOR	access:public	signature:(size_type __new_size, bool __x = bool())
std::__BVECTOR::reverse_iterator	stl/stl_bvector.h	/^          reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::reverse_iterator	stl/stl_bvector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::size	stl/stl_bvector.h	/^      insert(end(), __n - size(), __x);$/;"	p	signature:()
std::__BVECTOR::size	stl/stl_bvector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
std::__BVECTOR::size	stl/stl_bvector.h	/^  size_type size() const { return size_type(end() - begin()); }$/;"	f	class:std::__BVECTOR	access:public	signature:() const
std::__BVECTOR::size_type	stl/stl_bvector.h	/^  typedef size_t size_type;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::swap	stl/stl_bvector.h	/^  void swap(__BVECTOR& __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(__BVECTOR& __x)
std::__BVECTOR::value_type	stl/stl_bvector.h	/^  typedef bool value_type;$/;"	t	class:std::__BVECTOR	access:public
std::__BVECTOR::~__VECTOR	stl/stl_bvector.h	/^  ~__VECTOR() { }$/;"	f	class:std::__BVECTOR	access:public	signature:()
std::__DECLARE_INSTANCE	stl/stl_threads.h	/^    __DECLARE_INSTANCE(mutex_t, _Swap_lock_struct<__dummy>::_S_swap_lock, $/;"	p	namespace:std	signature:(mutex_t, _Swap_lock_struct<__dummy>::_S_swap_lock, =DEFAULTMUTEX)
std::__L	stl/stl_tree.h	/^    _Link_type __L = _S_left(__x);$/;"	l
std::__List_base_reverse	stl/stl_list.h	/^inline void __List_base_reverse(_List_node_base* __p)$/;"	f	namespace:std	signature:(_List_node_base* __p)
std::__M	stl/stl_algo.h	/^    _Distance __M = __rand(__t);$/;"	l
std::__M	stl/stl_algo.h	/^    _Distance __M = __random_number(__t);$/;"	l
std::__R	stl/stl_tree.h	/^    _Link_type __R = _S_right(__x);$/;"	l
std::__STL_FREE_STRING	stl/ropeimpl.h	/^		__STL_UNWIND(_RopeRep::__STL_FREE_STRING($/;"	p	signature:(__section, __result_len, __base->get_allocator())
std::__STL_FREE_STRING	stl/ropeimpl.h	/^    __STL_UNWIND(_RopeRep::__STL_FREE_STRING(__new_data, __old_len + __len,$/;"	p	signature:(__new_data, __old_len + __len, __r->get_allocator())
std::__STL_MUTEX_INITIALIZER	stl/stl_alloc.h	/^        __STL_MUTEX_INITIALIZER;$/;"	m	namespace:std
std::__WORD_BIT	stl/stl_bvector.h	/^static const int __WORD_BIT = int(CHAR_BIT*sizeof(unsigned int));$/;"	m	namespace:std
std::__adj_endp1	stl/ropeimpl.h	/^    size_t __adj_endp1;$/;"	l
std::__adjacent_difference	stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
std::__adjacent_difference	stl/stl_numeric.h	/^__adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
std::__adjust_heap	stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value)
std::__adjust_heap	stl/stl_heap.h	/^__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
std::__advance	stl/stl_iterator_base.h	/^inline void __advance(_BidirectionalIterator& __i, _Distance __n, $/;"	f	namespace:std	signature:(_BidirectionalIterator& __i, _Distance __n, bidirectional_iterator_tag)
std::__advance	stl/stl_iterator_base.h	/^inline void __advance(_InputIter& __i, _Distance __n, input_iterator_tag) {$/;"	f	namespace:std	signature:(_InputIter& __i, _Distance __n, input_iterator_tag)
std::__advance	stl/stl_iterator_base.h	/^inline void __advance(_RandomAccessIterator& __i, _Distance __n, $/;"	f	namespace:std	signature:(_RandomAccessIterator& __i, _Distance __n, random_access_iterator_tag)
std::__after	stl/stl_slist.h	/^    _Slist_node_base* __after = __pos->_M_next;$/;"	l
std::__allocator	stl/stl_alloc.h	/^struct __allocator {$/;"	s	namespace:std
std::__allocator::__STL_NOTHROW	stl/stl_alloc.h	/^  __allocator(const __allocator& __a) __STL_NOTHROW$/;"	m	struct:std::__allocator	access:public
std::__allocator::__STL_NOTHROW	stl/stl_alloc.h	/^  __allocator(const __allocator<_Tp1, _Alloc>& __a) __STL_NOTHROW$/;"	m	struct:std::__allocator	access:public
std::__allocator::__underlying_alloc	stl/stl_alloc.h	/^  _Alloc __underlying_alloc;$/;"	m	struct:std::__allocator	access:public
std::__allocator::const_pointer	stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	struct:std::__allocator	access:public
std::__allocator::const_reference	stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	struct:std::__allocator	access:public
std::__allocator::difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:std::__allocator	access:public
std::__allocator::pointer	stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	struct:std::__allocator	access:public
std::__allocator::rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	struct:std::__allocator	access:public
std::__allocator::rebind::other	stl/stl_alloc.h	/^    typedef __allocator<_Tp1, _Alloc> other;$/;"	t	struct:std::__allocator::rebind	access:public
std::__allocator::reference	stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	struct:std::__allocator	access:public
std::__allocator::size_type	stl/stl_alloc.h	/^  typedef size_t    size_type;$/;"	t	struct:std::__allocator	access:public
std::__allocator::value_type	stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	struct:std::__allocator	access:public
std::__back1	stl/stl_deque.h	/^    iterator __back1 = _M_finish;$/;"	l
std::__back2	stl/stl_deque.h	/^    iterator __back2 = __back1;$/;"	l
std::__balanced	stl/ropeimpl.h	/^        _RopeRep* __balanced;$/;"	l
std::__base_buffer	stl/ropeimpl.h	/^	_CharT* __base_buffer =$/;"	l
std::__base_leaf	stl/ropeimpl.h	/^	_RopeLeaf* __base_leaf;$/;"	l
std::__base_rope	stl/ropeimpl.h	/^	rope __base_rope;$/;"	l
std::__bc	stl/stl_tree.h	/^    int __bc = __node->_M_color == _S_rb_tree_black ? 1 : 0;$/;"	l
std::__before	stl/stl_tree.h	/^    iterator __before = __position;$/;"	l
std::__before_last	stl/stl_slist.h	/^  _Slist_node_base* __before_last = __slist_previous(__head, 0);$/;"	l
std::__black_count	stl/stl_tree.h	/^__black_count(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)$/;"	f	namespace:std	signature:(_Rb_tree_node_base* __node, _Rb_tree_node_base* __root)
std::__bucket	stl/stl_hashtable.h	/^    size_type __bucket = _M_ht->_M_bkt_num(__old->_M_val);$/;"	l
std::__buf	stl/stl_algo.h	/^  _Temporary_buffer<_BidirectionalIter, _Tp> __buf(__first, __last);$/;"	p	signature:(__first, __last)
std::__buf	stl/stl_algo.h	/^  _Temporary_buffer<_ForwardIter, _Tp> __buf(__first, __last);$/;"	p	signature:(__first, __last)
std::__buf_start_pos	stl/ropeimpl.h	/^		size_t __buf_start_pos = __leaf_pos;$/;"	l
std::__buffer	stl/ropeimpl.h	/^		_CharT* __buffer =$/;"	l
std::__buffer	stl/ropeimpl.h	/^	    _CharT __buffer[__max_len + 1];$/;"	l
std::__buffer_end	stl/stl_algo.h	/^    _Pointer __buffer_end = copy(__first, __middle, __buffer);$/;"	l
std::__buffer_end	stl/stl_algo.h	/^    _Pointer __buffer_end = copy(__middle, __last, __buffer);$/;"	l
std::__buffer_end	stl/stl_algo.h	/^  _BidirectionalIter2 __buffer_end;$/;"	l
std::__buffer_last	stl/stl_algo.h	/^  _Pointer __buffer_last = __buffer + __len;$/;"	l
std::__bytes_left	stl/stl_alloc.h	/^    size_t __bytes_left = _S_end_free - _S_start_free;$/;"	l
std::__bytes_to_get	stl/stl_alloc.h	/^        size_t __bytes_to_get = $/;"	l
std::__c	stl/ropeimpl.h	/^		_RopeConcatenation* __c = (_RopeConcatenation*)__base;$/;"	l
std::__c	stl/ropeimpl.h	/^		_RopeConcatenation* __c = (_RopeConcatenation*)__r;$/;"	l
std::__c	stl/ropeimpl.h	/^		_Rope_RopeConcatenation<_CharT,_Alloc>* __c =$/;"	l
std::__c	stl/ropeimpl.h	/^	        _Rope_RopeConcatenation<_CharT,_Alloc>* __c$/;"	l
std::__c	stl/ropeimpl.h	/^	_RopeConcatenation* __c = (_RopeConcatenation*)__r;$/;"	l
std::__c	stl/ropeimpl.h	/^      _Rope_insert_char_consumer<_CharT, _Traits> __c(__o);$/;"	p	signature:(__o)
std::__c	stl/ropeimpl.h	/^      _Rope_insert_char_consumer<_CharT> __c(__o);$/;"	p	signature:(__o)
std::__c	stl/ropeimpl.h	/^    _Rope_RopeConcatenation<_CharT,_Alloc>* __c;$/;"	l
std::__c	stl/ropeimpl.h	/^    _Rope_find_char_char_consumer<_CharT> __c(__pattern);$/;"	p	signature:(__pattern)
std::__c	stl/ropeimpl.h	/^    _Rope_flatten_char_consumer<_CharT> __c(__buffer);$/;"	p	signature:(__buffer)
std::__carry	stl/stl_list.h	/^    list<_Tp, _Alloc> __carry;$/;"	l
std::__carry	stl/stl_slist.h	/^    slist __carry;$/;"	l
std::__char_traits_base	stl/char_traits.h	/^template <class _CharT, class _IntT> class __char_traits_base {$/;"	c	namespace:std
std::__char_traits_base::__i	stl/char_traits.h	/^    size_t __i;$/;"	l
std::__char_traits_base::__nullchar	stl/char_traits.h	/^    const _CharT __nullchar = _CharT();$/;"	l
std::__char_traits_base::assign	stl/char_traits.h	/^  static _CharT* assign(_CharT* __s, size_t __n, _CharT __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s, size_t __n, _CharT __c)
std::__char_traits_base::assign	stl/char_traits.h	/^  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }$/;"	f	class:std::__char_traits_base	access:public	signature:(char_type& __c1, const char_type& __c2)
std::__char_traits_base::char_type	stl/char_traits.h	/^  typedef _CharT char_type;$/;"	t	class:std::__char_traits_base	access:public
std::__char_traits_base::compare	stl/char_traits.h	/^  static int compare(const _CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s1, const _CharT* __s2, size_t __n)
std::__char_traits_base::copy	stl/char_traits.h	/^  static _CharT* copy(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
std::__char_traits_base::eof	stl/char_traits.h	/^  static int_type eof() {$/;"	f	class:std::__char_traits_base	access:public	signature:()
std::__char_traits_base::eq	stl/char_traits.h	/^  static bool eq(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
std::__char_traits_base::eq_int_type	stl/char_traits.h	/^  static bool eq_int_type(const int_type& __c1, const int_type& __c2) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c1, const int_type& __c2)
std::__char_traits_base::find	stl/char_traits.h	/^  static const _CharT* find(const _CharT* __s, size_t __n, const _CharT& __c)$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s, size_t __n, const _CharT& __c)
std::__char_traits_base::int_type	stl/char_traits.h	/^  typedef _IntT int_type;$/;"	t	class:std::__char_traits_base	access:public
std::__char_traits_base::length	stl/char_traits.h	/^  static size_t length(const _CharT* __s) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT* __s)
std::__char_traits_base::lt	stl/char_traits.h	/^  static bool lt(const _CharT& __c1, const _CharT& __c2) $/;"	f	class:std::__char_traits_base	access:public	signature:(const _CharT& __c1, const _CharT& __c2)
std::__char_traits_base::move	stl/char_traits.h	/^  static _CharT* move(_CharT* __s1, const _CharT* __s2, size_t __n) {$/;"	f	class:std::__char_traits_base	access:public	signature:(_CharT* __s1, const _CharT* __s2, size_t __n)
std::__char_traits_base::not_eof	stl/char_traits.h	/^  static int_type not_eof(const int_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c)
std::__char_traits_base::off_type	stl/char_traits.h	/^  typedef streamoff off_type;$/;"	t	class:std::__char_traits_base	access:public
std::__char_traits_base::pos_type	stl/char_traits.h	/^  typedef streampos pos_type;$/;"	t	class:std::__char_traits_base	access:public
std::__char_traits_base::state_type	stl/char_traits.h	/^  typedef mbstate_t state_type;$/;"	t	class:std::__char_traits_base	access:public
std::__char_traits_base::to_char_type	stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c)
std::__char_traits_base::to_int_type	stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const char_type& __c)
std::__chars_left	stl/ropeimpl.h	/^        size_t __chars_left = _M_buf_end - _M_buf_ptr;$/;"	l
std::__chars_left	stl/ropeimpl.h	/^        size_t __chars_left = _M_buf_ptr - _M_buf_start;$/;"	l
std::__chunk	stl/stl_alloc.h	/^    char* __chunk = _S_chunk_alloc(__n, __nobjs);$/;"	l
std::__chunk_insertion_sort	stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size)
std::__chunk_insertion_sort	stl/stl_algo.h	/^void __chunk_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Distance __chunk_size, _Compare __comp)
std::__clrstack	stl/ropeimpl.h	/^    _RopeRep* __clrstack[_RopeRep::_S_max_rope_depth];$/;"	l
std::__comp	stl/stl_tree.h	/^  bool __comp = true;$/;"	l
std::__conc	stl/ropeimpl.h	/^		_RopeConcatenation* __conc = (_RopeConcatenation*)__r;$/;"	l
std::__copy	stl/stl_algobase.h	/^__copy(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _OutputIter __result, random_access_iterator_tag, _Distance*)
std::__copy	stl/stl_algobase.h	/^inline _OutputIter __copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, input_iterator_tag, _Distance*)
std::__copy	stl/stl_hashtable.h	/^        _Node* __copy = _M_new_node(__cur->_M_val);$/;"	l
std::__copy_aux	stl/stl_algobase.h	/^inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
std::__copy_aux2	stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __false_type)
std::__copy_aux2	stl/stl_algobase.h	/^inline _OutputIter __copy_aux2(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, __true_type)
std::__copy_aux2	stl/stl_algobase.h	/^inline _Tp* __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result,$/;"	f	namespace:std	signature:(_Tp* __first, _Tp* __last, _Tp* __result, __true_type)
std::__copy_aux2	stl/stl_algobase.h	/^inline _Tp* __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result,$/;"	f	namespace:std	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result, __true_type)
std::__copy_backward	stl/stl_algobase.h	/^inline _BidirectionalIter __copy_backward(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _BidirectionalIter __result, random_access_iterator_tag, _Distance*)
std::__copy_backward	stl/stl_algobase.h	/^inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first, $/;"	f	namespace:std	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result, bidirectional_iterator_tag, _Distance*)
std::__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch$/;"	s	namespace:std
std::__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch<_Tp*, _Tp*, __true_type>$/;"	s	namespace:std
std::__copy_backward_dispatch	stl/stl_algobase.h	/^struct __copy_backward_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s	namespace:std
std::__copy_backward_dispatch::_Cat	stl/stl_algobase.h	/^          _Cat;$/;"	t	struct:std::__copy_backward_dispatch	access:public
std::__copy_backward_dispatch::_Distance	stl/stl_algobase.h	/^          _Distance;$/;"	t	struct:std::__copy_backward_dispatch	access:public
std::__copy_backward_dispatch::_Num	stl/stl_algobase.h	/^    const ptrdiff_t _Num = __last - __first;$/;"	l
std::__copy_backward_dispatch::copy	stl/stl_algobase.h	/^  static _BidirectionalIter2 copy(_BidirectionalIter1 __first, $/;"	f	struct:std::__copy_backward_dispatch	access:public	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __last, _BidirectionalIter2 __result)
std::__copy_backward_dispatch::copy	stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:std::__copy_backward_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
std::__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch {$/;"	s	namespace:std
std::__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch<_Tp*, _Tp*, __true_type>$/;"	s	namespace:std
std::__copy_dispatch	stl/stl_algobase.h	/^struct __copy_dispatch<const _Tp*, _Tp*, __true_type>$/;"	s	namespace:std
std::__copy_dispatch::_Category	stl/stl_algobase.h	/^    typedef typename iterator_traits<_InputIter>::iterator_category _Category;$/;"	t
std::__copy_dispatch::_Distance	stl/stl_algobase.h	/^    typedef typename iterator_traits<_InputIter>::difference_type _Distance;$/;"	t
std::__copy_dispatch::copy	stl/stl_algobase.h	/^  static _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	struct:std::__copy_dispatch	access:public	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
std::__copy_dispatch::copy	stl/stl_algobase.h	/^  static _Tp* copy(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	struct:std::__copy_dispatch	access:public	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
std::__copy_n	stl/stl_algobase.h	/^__copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result)
std::__copy_n	stl/stl_algobase.h	/^__copy_n(_RAIter __first, _Size __count,$/;"	f	namespace:std	signature:(_RAIter __first, _Size __count, _OutputIter __result, random_access_iterator_tag)
std::__copy_n	stl/stl_algobase.h	/^pair<_InputIter, _OutputIter> __copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result, input_iterator_tag)
std::__copy_sz	stl/stl_alloc.h	/^    size_t __copy_sz;$/;"	l
std::__copy_trivial	stl/stl_algobase.h	/^__copy_trivial(const _Tp* __first, const _Tp* __last, _Tp* __result) {$/;"	f	namespace:std	signature:(const _Tp* __first, const _Tp* __last, _Tp* __result)
std::__counter	stl/stl_list.h	/^    list<_Tp, _Alloc> __counter[64];$/;"	l
std::__counter	stl/stl_slist.h	/^    slist __counter[64];$/;"	l
std::__csptr	stl/ropeimpl.h	/^    size_t __csptr = 0;$/;"	l
std::__cstr	stl/ropeimpl.h	/^    _CharT* __cstr = _M_c_string;$/;"	l
std::__cstr	stl/ropeimpl.h	/^    __GC_CONST _CharT* __cstr = __r->_M_c_string;$/;"	l
std::__cur	stl/stl_deque.h	/^  _Map_pointer __cur;$/;"	l
std::__cur	stl/stl_deque.h	/^  _Tp** __cur;$/;"	l
std::__cur	stl/stl_deque.h	/^  iterator __cur = begin();$/;"	l
std::__cur	stl/stl_hashtable.h	/^      const _Node* __cur = __ht._M_buckets[__i];$/;"	l
std::__cur	stl/stl_hashtable.h	/^    _Node* __cur = _M_buckets[__i];$/;"	l
std::__cur	stl/stl_hashtable.h	/^    _Node* __cur = _M_buckets[__n];$/;"	l
std::__cur	stl/stl_hashtable.h	/^    _Node* __cur = __first;$/;"	l
std::__cur	stl/stl_hashtable.h	/^  _Node* __cur = _M_buckets[__n];$/;"	l
std::__cur	stl/stl_list.h	/^  _List_node<_Tp>* __cur = (_List_node<_Tp>*) _M_node->_M_next;$/;"	l
std::__cur	stl/stl_slist.h	/^  _Node* __cur = (_Node*) this->_M_head._M_next;$/;"	l
std::__cur	stl/stl_slist.h	/^  _Node_base* __cur = &this->_M_head;$/;"	l
std::__cur	stl/stl_slist.h	/^  _Node_base* __cur = this->_M_head._M_next;$/;"	l
std::__cur	stl/stl_slist.h	/^  _Slist_node<_Tp>* __cur = (_Slist_node<_Tp>*) (__before_first->_M_next);$/;"	l
std::__cur	stl/stl_uninitialized.h	/^  _ForwardIter __cur = __first;$/;"	l
std::__cur	stl/stl_uninitialized.h	/^  _ForwardIter __cur = __result;$/;"	l
std::__cur	stl/stl_vector.h	/^  iterator __cur = begin();$/;"	l
std::__cur1	stl/stl_hashtable.h	/^    _Node* __cur1 = __ht1._M_buckets[__n];$/;"	l
std::__cur2	stl/stl_hashtable.h	/^    _Node* __cur2 = __ht2._M_buckets[__n];$/;"	l
std::__cur_node	stl/stl_deque.h	/^  _Map_pointer __cur_node;$/;"	l
std::__curr_depth	stl/ropeimpl.h	/^    int __curr_depth = -1;  \/* index into path    *\/$/;"	l
std::__curr_rope	stl/ropeimpl.h	/^    const _RopeRep* __curr_rope;$/;"	l
std::__curr_start_pos	stl/ropeimpl.h	/^    size_t __curr_start_pos = 0;$/;"	l
std::__current	stl/stl_algo.h	/^  _ForwardIter1 __current = __first1;$/;"	l
std::__current_index	stl/ropeimpl.h	/^    int __current_index = __x._M_leaf_index;$/;"	l
std::__current_node	stl/ropeimpl.h	/^    const _RopeRep* __current_node = __x._M_path_end[__current_index];$/;"	l
std::__current_obj	stl/stl_alloc.h	/^    _Obj* __current_obj;$/;"	l
std::__cut	stl/stl_algo.h	/^    _RandomAccessIter __cut =$/;"	l
std::__d	stl/ropeimpl.h	/^		    _RopeRep* __d = __clrstack[__csptr];$/;"	l
std::__d	stl/stl_algo.h	/^  _Distance __d = __gcd(__n, __k);$/;"	l
std::__default_alloc_template	stl/stl_alloc.h	/^class __default_alloc_template {$/;"	c	namespace:std
std::__default_alloc_template::_ALIGN	stl/stl_alloc.h	/^    enum {_ALIGN = 8};$/;"	e	enum:std::__default_alloc_template::__anon12
std::__default_alloc_template::_Lock	stl/stl_alloc.h	/^    class _Lock {$/;"	c	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_Lock::_Lock	stl/stl_alloc.h	/^            _Lock() { __NODE_ALLOCATOR_LOCK; }$/;"	f	class:std::__default_alloc_template::_Lock	access:public	signature:()
std::__default_alloc_template::_Lock::~_Lock	stl/stl_alloc.h	/^            ~_Lock() { __NODE_ALLOCATOR_UNLOCK; }$/;"	f	class:std::__default_alloc_template::_Lock	access:public	signature:()
std::__default_alloc_template::_MAX_BYTES	stl/stl_alloc.h	/^    enum {_MAX_BYTES = 128};$/;"	e	enum:std::__default_alloc_template::__anon13
std::__default_alloc_template::_NFREELISTS	stl/stl_alloc.h	/^    enum {_NFREELISTS = 16}; \/\/ _MAX_BYTES\/_ALIGN$/;"	e	enum:std::__default_alloc_template::__anon14
std::__default_alloc_template::_Obj	stl/stl_alloc.h	/^  union _Obj {$/;"	u	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_Obj::_M_client_data	stl/stl_alloc.h	/^        char _M_client_data[1];    \/* The client sees this.        *\/$/;"	m	union:std::__default_alloc_template::_Obj	access:public
std::__default_alloc_template::_Obj::_M_free_list_link	stl/stl_alloc.h	/^        union _Obj* _M_free_list_link;$/;"	m	union:std::__default_alloc_template::_Obj	typeref:union:std::__default_alloc_template::_Obj::_Obj	access:public
std::__default_alloc_template::_S_chunk_alloc	stl/stl_alloc.h	/^  static char* _S_chunk_alloc(size_t __size, int& __nobjs);$/;"	p	class:std::__default_alloc_template	access:private	signature:(size_t __size, int& __nobjs)
std::__default_alloc_template::_S_chunk_alloc	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_chunk_alloc(size_t __size, $/;"	f	class:std::__default_alloc_template	signature:(size_t __size, int& __nobjs)
std::__default_alloc_template::_S_end_free	stl/stl_alloc.h	/^  static char* _S_end_free;$/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_end_free	stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_end_free = 0;$/;"	m	class:std::__default_alloc_template
std::__default_alloc_template::_S_free_list	stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[]; $/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_free_list	stl/stl_alloc.h	/^    static _Obj* __STL_VOLATILE _S_free_list[_NFREELISTS]; $/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_free_list	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst> ::_S_free_list[$/;"	m	class:std::__default_alloc_template
std::__default_alloc_template::_S_freelist_index	stl/stl_alloc.h	/^  static  size_t _S_freelist_index(size_t __bytes) {$/;"	f	class:std::__default_alloc_template	access:private	signature:(size_t __bytes)
std::__default_alloc_template::_S_heap_size	stl/stl_alloc.h	/^  static size_t _S_heap_size;$/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_heap_size	stl/stl_alloc.h	/^size_t __default_alloc_template<__threads, __inst>::_S_heap_size = 0;$/;"	m	class:std::__default_alloc_template
std::__default_alloc_template::_S_node_allocator_lock	stl/stl_alloc.h	/^    static _STL_mutex_lock _S_node_allocator_lock;$/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_refill	stl/stl_alloc.h	/^  static void* _S_refill(size_t __n);$/;"	p	class:std::__default_alloc_template	access:private	signature:(size_t __n)
std::__default_alloc_template::_S_refill	stl/stl_alloc.h	/^__default_alloc_template<__threads, __inst>::_S_refill(size_t __n)$/;"	f	class:std::__default_alloc_template	signature:(size_t __n)
std::__default_alloc_template::_S_round_up	stl/stl_alloc.h	/^  _S_round_up(size_t __bytes) $/;"	f	class:std::__default_alloc_template	access:private	signature:(size_t __bytes)
std::__default_alloc_template::_S_start_free	stl/stl_alloc.h	/^  static char* _S_start_free;$/;"	m	class:std::__default_alloc_template	access:private
std::__default_alloc_template::_S_start_free	stl/stl_alloc.h	/^char* __default_alloc_template<__threads, __inst>::_S_start_free = 0;$/;"	m	class:std::__default_alloc_template
std::__default_alloc_template::__lock_instance	stl/stl_alloc.h	/^      _Lock __lock_instance;$/;"	l
std::__default_alloc_template::__my_free_list	stl/stl_alloc.h	/^      _Obj* __STL_VOLATILE*  __my_free_list$/;"	l
std::__default_alloc_template::__my_free_list	stl/stl_alloc.h	/^      _Obj* __STL_VOLATILE* __my_free_list$/;"	l
std::__default_alloc_template::__q	stl/stl_alloc.h	/^      _Obj* __q = (_Obj*)__p;$/;"	l
std::__default_alloc_template::__result	stl/stl_alloc.h	/^      _Obj* __RESTRICT __result = *__my_free_list;$/;"	l
std::__default_alloc_template::__ret	stl/stl_alloc.h	/^    void* __ret = 0;$/;"	l
std::__default_alloc_template::allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::__default_alloc_template	access:public	signature:(size_t __n)
std::__default_alloc_template::deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:std::__default_alloc_template	access:public	signature:(void* __p, size_t __n)
std::__default_alloc_template::malloc_alloc::deallocate	stl/stl_alloc.h	/^      malloc_alloc::deallocate(__p, __n);$/;"	p	class:std::__default_alloc_template::malloc_alloc	signature:(__p, __n)
std::__default_alloc_template::reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz);$/;"	p	class:std::__default_alloc_template	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
std::__default_alloc_template::reallocate	stl/stl_alloc.h	/^__default_alloc_template<threads, inst>::reallocate(void* __p,$/;"	f	class:std::__default_alloc_template	signature:(void* __p, size_t __old_sz, size_t __new_sz)
std::__depth	stl/ropeimpl.h	/^    size_t __depth = __result->_M_depth;$/;"	l
std::__deque_buf_size	stl/stl_deque.h	/^inline size_t __deque_buf_size(size_t __size) {$/;"	f	namespace:std	signature:(size_t __size)
std::__destroy	stl/stl_construct.h	/^__destroy(_ForwardIterator __first, _ForwardIterator __last, _Tp*)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, _Tp*)
std::__destroy_aux	stl/stl_construct.h	/^__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last, __false_type)
std::__destroy_aux	stl/stl_construct.h	/^inline void __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type) {}$/;"	f	namespace:std	signature:(_ForwardIterator, _ForwardIterator, __true_type)
std::__dirns	stl/ropeimpl.h	/^    unsigned char __dirns = 0; \/\/ Bit vector marking right turns in the path$/;"	l
std::__dirns	stl/ropeimpl.h	/^    unsigned char __dirns = __x._M_path_directions;$/;"	l
std::__distance	stl/stl_iterator_base.h	/^__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::__distance	stl/stl_iterator_base.h	/^__distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
std::__distance	stl/stl_iterator_base.h	/^inline void __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n, input_iterator_tag)
std::__distance	stl/stl_iterator_base.h	/^inline void __distance(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance& __n, random_access_iterator_tag)
std::__distance_type	stl/stl_iterator_base.h	/^__distance_type(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
std::__elems_after	stl/stl_deque.h	/^    const difference_type __elems_after = $/;"	l
std::__elems_after	stl/stl_vector.h	/^      const size_type __elems_after = _M_finish - __position;$/;"	l
std::__elems_before	stl/stl_deque.h	/^    difference_type __elems_before = __first - _M_start;$/;"	l
std::__elems_before	stl/stl_deque.h	/^  const difference_type __elems_before = __pos - _M_start;$/;"	l
std::__elemsafter	stl/stl_deque.h	/^    const difference_type __elemsafter = $/;"	l
std::__elemsafter	stl/stl_deque.h	/^    const difference_type __elemsafter = __length - __elemsbefore;$/;"	l
std::__elemsbefore	stl/stl_deque.h	/^  const difference_type __elemsbefore = __pos - _M_start;$/;"	l
std::__end1	stl/stl_list.h	/^  const_iterator __end1 = __x.end();$/;"	l
std::__end1	stl/stl_slist.h	/^  const_iterator __end1 = _SL1.end();$/;"	l
std::__end2	stl/stl_list.h	/^  const_iterator __end2 = __y.end();$/;"	l
std::__end2	stl/stl_slist.h	/^  const_iterator __end2 = _SL2.end();$/;"	l
std::__equal_range	stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
std::__equal_range	stl/stl_algo.h	/^__equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
std::__erased	stl/stl_hashtable.h	/^  size_type __erased = 0;$/;"	l
std::__exponent	stl/ropeimpl.h	/^    size_t __exponent;$/;"	l
std::__exponentiate_threshold	stl/ropeimpl.h	/^    const size_t __exponentiate_threshold = 32;$/;"	l
std::__f	stl/ropeimpl.h	/^		_RopeFunction* __f = (_RopeFunction*)__base;$/;"	l
std::__f	stl/ropeimpl.h	/^		_RopeFunction* __f = (_RopeFunction*)__r;$/;"	l
std::__f	stl/ropeimpl.h	/^	        _Rope_RopeFunction<_CharT,_Alloc>* __f$/;"	l
std::__f	stl/ropeimpl.h	/^    char __f = __o.fill();$/;"	l
std::__f_bucket	stl/stl_hashtable.h	/^  size_type __f_bucket = __first._M_cur ? $/;"	l
std::__fill	stl/stl_list.h	/^    int __fill = 0;$/;"	l
std::__fill	stl/stl_slist.h	/^    int __fill = 0;$/;"	l
std::__final_insertion_sort	stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::__final_insertion_sort	stl/stl_algo.h	/^void __final_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::__find_end	stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag)
std::__find_end	stl/stl_algo.h	/^_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate __comp)
std::__find_end	stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
std::__find_end	stl/stl_algo.h	/^__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate __comp)
std::__finish_n	stl/stl_deque.h	/^        iterator __finish_n = _M_finish - difference_type(__n);$/;"	l
std::__first	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	l
std::__first	stl/stl_hashtable.h	/^          _Node* __first = _M_buckets[__bucket];$/;"	l
std::__first	stl/stl_hashtable.h	/^  _Node* __first = _M_buckets[__n];$/;"	l
std::__first	stl/stl_hashtable.h	/^  const unsigned long* __first = __stl_prime_list;$/;"	l
std::__first	stl/stl_list.h	/^  iterator __first = begin();$/;"	l
std::__first	stl/stl_slist.h	/^    _Slist_node_base* __first = __before_first->_M_next;$/;"	l
std::__first	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	l
std::__first1	stl/stl_list.h	/^    iterator __first1 = begin();$/;"	l
std::__first1	stl/stl_list.h	/^  iterator __first1 = begin();$/;"	l
std::__first2	stl/stl_list.h	/^    const_iterator __first2 = __x.begin();$/;"	l
std::__first2	stl/stl_list.h	/^  iterator __first2 = __x.begin();$/;"	l
std::__first_cut	stl/stl_algo.h	/^    _BidirectionalIter __first_cut = __first;$/;"	l
std::__first_cut	stl/stl_algo.h	/^  _BidirectionalIter __first_cut = __first;$/;"	l
std::__fn	stl/ropeimpl.h	/^		char_producer<_CharT>* __fn =$/;"	l
std::__forest	stl/ropeimpl.h	/^    _RopeRep* __forest[_RopeRep::_S_max_rope_depth + 1];$/;"	l
std::__front1	stl/stl_deque.h	/^    iterator __front1 = _M_start;$/;"	l
std::__front2	stl/stl_deque.h	/^    iterator __front2 = __front1;$/;"	l
std::__gcd	stl/stl_algo.h	/^_EuclideanRingElement __gcd(_EuclideanRingElement __m,$/;"	f	namespace:std	signature:(_EuclideanRingElement __m, _EuclideanRingElement __n)
std::__get_c_string	stl/stl_string_fwd.h	/^static const char* __get_c_string(const string&);$/;"	p	namespace:std	signature:(const string&)
std::__get_temporary_buffer	stl/stl_tempbuf.h	/^__get_temporary_buffer(ptrdiff_t __len, _Tp*)$/;"	f	namespace:std	signature:(ptrdiff_t __len, _Tp*)
std::__h	stl/stl_hash_fun.h	/^  unsigned long __h = 0; $/;"	l
std::__half	stl/stl_algo.h	/^  _Distance __half;$/;"	l
std::__i	stl/ropeimpl.h	/^	    int __i;$/;"	l
std::__i	stl/ropeimpl.h	/^	int __i = -1;$/;"	l
std::__i	stl/ropeimpl.h	/^    int __i;  				\/\/ forest[0..__i-1] is empty$/;"	l
std::__i	stl/ropeimpl.h	/^    int __i;$/;"	l
std::__i	stl/ropeimpl.h	/^    size_t __i;$/;"	l
std::__i	stl/stl_algo.h	/^      _ForwardIter __i = __first;$/;"	l
std::__i	stl/stl_algo.h	/^  _ForwardIter __i = __first;$/;"	l
std::__i	stl/stl_algo.h	/^  _ForwardIter __i = lower_bound(__first, __last, __val);$/;"	l
std::__i	stl/stl_algo.h	/^  _ForwardIter __i = lower_bound(__first, __last, __val, __comp);$/;"	l
std::__i	stl/stl_alloc.h	/^            size_t __i;$/;"	l
std::__i	stl/stl_alloc.h	/^    int __i;$/;"	l
std::__i	stl/stl_deque.h	/^  size_type __i;$/;"	l
std::__i	stl/stl_list.h	/^      int __i = 0;$/;"	l
std::__i	stl/stl_list.h	/^  iterator __i = begin();$/;"	l
std::__i	stl/stl_slist.h	/^      int __i = 0;$/;"	l
std::__i	stl/stl_vector.h	/^      iterator __i = copy(__x.begin(), __x.end(), begin());$/;"	l
std::__i1	stl/stl_list.h	/^  const_iterator __i1 = __x.begin();$/;"	l
std::__i1	stl/stl_slist.h	/^  const_iterator __i1 = _SL1.begin();$/;"	l
std::__i2	stl/stl_list.h	/^  const_iterator __i2 = __y.begin();$/;"	l
std::__i2	stl/stl_slist.h	/^  const_iterator __i2 = _SL2.begin();$/;"	l
std::__ii	stl/stl_algo.h	/^    _BidirectionalIter __ii = __i;$/;"	l
std::__index	stl/stl_deque.h	/^  difference_type __index = __pos - _M_start;$/;"	l
std::__inplace_merge_aux	stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*)
std::__inplace_merge_aux	stl/stl_algo.h	/^inline void __inplace_merge_aux(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Tp*, _Distance*, _Compare __comp)
std::__inplace_stable_partition	stl/stl_algo.h	/^_ForwardIter __inplace_stable_partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len)
std::__inplace_stable_sort	stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::__inplace_stable_sort	stl/stl_algo.h	/^void __inplace_stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::__insertee	stl/ropeimpl.h	/^    _RopeRep* __insertee;   		\/\/ included in refcount$/;"	l
std::__insertion_sort	stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::__insertion_sort	stl/stl_algo.h	/^void __insertion_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::__introsort_loop	stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit)
std::__introsort_loop	stl/stl_algo.h	/^void __introsort_loop(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Size __depth_limit, _Compare __comp)
std::__is_heap	stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _Distance __n)$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _Distance __n)
std::__is_heap	stl/stl_algo.h	/^bool __is_heap(_RandomAccessIter __first, _StrictWeakOrdering __comp,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _StrictWeakOrdering __comp, _Distance __n)
std::__is_simple	stl/ropeimpl.h	/^    bool __is_simple = _Rope_is_simple((_CharT*)0);$/;"	l
std::__iter	stl/stl_iterator.h	/^  typedef typename _Container::iterator __iter;$/;"	t
std::__iter_swap	stl/stl_algobase.h	/^inline void __iter_swap(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*) {$/;"	f	namespace:std	signature:(_ForwardIter1 __a, _ForwardIter2 __b, _Tp*)
std::__iterator_category	stl/stl_iterator_base.h	/^__iterator_category(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
std::__j	stl/ropeimpl.h	/^	int __j = __curr_depth + 1 - _S_path_cache_len;$/;"	l
std::__j	stl/stl_algo.h	/^      _BidirectionalIter __j = __last;$/;"	l
std::__j	stl/stl_tree.h	/^  const_iterator __j = const_iterator(__y);   $/;"	l
std::__j	stl/stl_tree.h	/^  iterator __j = iterator(__y);   $/;"	l
std::__k	stl/stl_algo.h	/^  _Distance __k = __middle - __first;$/;"	l
std::__k	stl/stl_algo.h	/^  _Size __k;$/;"	l
std::__kind	stl/ropeimpl.h	/^	char* __kind;$/;"	l
std::__l	stl/ropeimpl.h	/^		_RopeLeaf* __l = (_RopeLeaf*)__base;$/;"	l
std::__l	stl/ropeimpl.h	/^		_RopeLeaf* __l = (_RopeLeaf*)__r;$/;"	l
std::__l	stl/ropeimpl.h	/^	        _Rope_RopeLeaf<_CharT,_Alloc>* __l$/;"	l
std::__l	stl/ropeimpl.h	/^	_RopeLeaf* __l = (_RopeLeaf*) __left;$/;"	l
std::__l	stl/stl_algo.h	/^  _Distance __l = __n - __k;$/;"	l
std::__l_bucket	stl/stl_hashtable.h	/^  size_type __l_bucket = __last._M_cur ? $/;"	l
std::__last	stl/stl_algobase.h	/^  _RAIter __last = __first + __count;$/;"	l
std::__last	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	l
std::__last	stl/stl_hashtable.h	/^  const unsigned long* __last = __stl_prime_list + (int)__stl_num_primes;$/;"	l
std::__last	stl/stl_list.h	/^  iterator __last = end();$/;"	l
std::__last	stl/stl_uninitialized.h	/^  _RandomAccessIter __last = __first + __count;$/;"	l
std::__last	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	l
std::__last1	stl/stl_list.h	/^    iterator __last1 = end();$/;"	l
std::__last1	stl/stl_list.h	/^  iterator __last1 = end();$/;"	l
std::__last2	stl/stl_list.h	/^    const_iterator __last2 = __x.end();$/;"	l
std::__last2	stl/stl_list.h	/^  iterator __last2 = __x.end();$/;"	l
std::__lazy_threshold	stl/ropeimpl.h	/^    const size_t __lazy_threshold = 128;$/;"	l
std::__leaf	stl/ropeimpl.h	/^    const _RopeRep* __leaf = __x._M_path_end[__x._M_leaf_index];$/;"	l
std::__leaf	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) _M_o << __leaf[__i];$/;"	l
std::__leaf_end	stl/ropeimpl.h	/^		size_t __leaf_end = __leaf_pos + __leaf->_M_size;$/;"	l
std::__leaf_pos	stl/ropeimpl.h	/^    size_t __leaf_pos = __x._M_leaf_pos;$/;"	l
std::__left	stl/ropeimpl.h	/^		_RopeRep* __left =  __conc->_M_left;$/;"	l
std::__left	stl/ropeimpl.h	/^		_RopeRep* __left = __c->_M_left;$/;"	l
std::__left	stl/ropeimpl.h	/^	  _RopeRep* __left = ((_RopeConcatenation*)__r)->_M_left;$/;"	l
std::__left	stl/ropeimpl.h	/^	_RopeRep* __left = __c->_M_left;$/;"	l
std::__left	stl/ropeimpl.h	/^    bool __left = bool(__o.flags() & ios::left);$/;"	l
std::__left	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
std::__left_end	stl/ropeimpl.h	/^		    size_t __left_end = min(__left_len, __end);$/;"	l
std::__left_len	stl/ropeimpl.h	/^		size_t __left_len = __left->_M_size;$/;"	l
std::__left_len	stl/ropeimpl.h	/^    size_t __left_len;$/;"	l
std::__leftleft	stl/ropeimpl.h	/^	    _RopeRep* __leftleft = ((_RopeConcatenation*)__left)->_M_left;$/;"	l
std::__leftright	stl/ropeimpl.h	/^	  _RopeLeaf* __leftright =$/;"	l
std::__len	stl/ropeimpl.h	/^		size_t __len = _S_iterator_buf_len;$/;"	l
std::__len	stl/ropeimpl.h	/^		size_t __len = __end - __begin;$/;"	l
std::__len	stl/ropeimpl.h	/^    size_t __len = __current_node->_M_size;$/;"	l
std::__len	stl/stl_algo.h	/^  _Distance __len = (__last - __first + 1) \/ 2;$/;"	l
std::__len	stl/stl_algo.h	/^  _Distance __len = 0;$/;"	l
std::__len	stl/stl_algo.h	/^  _Distance __len = __last - __first;$/;"	l
std::__len	stl/stl_list.h	/^  size_type __len = 0;$/;"	l
std::__len	stl/stl_tree.h	/^  int __len = __black_count(_M_leftmost(), _M_root());$/;"	l
std::__len	stl/stl_vector.h	/^      const size_type __len = __old_size + max(__old_size, __n);$/;"	l
std::__len	stl/stl_vector.h	/^    const size_type __len = __old_size != 0 ? 2 * __old_size : 1;$/;"	l
std::__len	stl/stl_vector.h	/^  size_type __len = 0;$/;"	l
std::__len1	stl/stl_algo.h	/^  _Distance __len1 = 0;$/;"	l
std::__len1	stl/stl_algobase.h	/^  const ptrdiff_t __len1 = __last1 - __first1;$/;"	l
std::__len1	stl/stl_algobase.h	/^  const size_t __len1 = __last1 - __first1;$/;"	l
std::__len11	stl/stl_algo.h	/^    _Distance __len11 = 0;$/;"	l
std::__len11	stl/stl_algo.h	/^  _Distance __len11 = 0;$/;"	l
std::__len2	stl/stl_algo.h	/^  _Distance __len2 = 0;$/;"	l
std::__len2	stl/stl_algobase.h	/^  const ptrdiff_t __len2 = __last2 - __first2;$/;"	l
std::__len2	stl/stl_algobase.h	/^  const size_t __len2 = __last2 - __first2;$/;"	l
std::__len22	stl/stl_algo.h	/^    _Distance __len22 = 0;$/;"	l
std::__len22	stl/stl_algo.h	/^  _Distance __len22 = 0;$/;"	l
std::__lend	stl/ropeimpl.h	/^	const_iterator __lend(__left, __left_len);$/;"	p	signature:(__left, __left_len)
std::__length	stl/stl_deque.h	/^  size_type __length = size();$/;"	l
std::__length	stl/stl_deque.h	/^  size_type __length = this->size();$/;"	l
std::__lexicographical_compare_3way	stl/stl_algobase.h	/^__lexicographical_compare_3way(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
std::__lexicographical_compare_3way	stl/stl_algobase.h	/^__lexicographical_compare_3way(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
std::__lexicographical_compare_3way	stl/stl_algobase.h	/^int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
std::__lg	stl/stl_algo.h	/^inline _Size __lg(_Size __n) {$/;"	f	namespace:std	signature:(_Size __n)
std::__linear_insert	stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
std::__linear_insert	stl/stl_algo.h	/^inline void __linear_insert(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
std::__lower_bound	stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
std::__lower_bound	stl/stl_algo.h	/^_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
std::__lstart	stl/ropeimpl.h	/^	const_iterator __lstart(__left, 0);$/;"	p	signature:(__left, 0)
std::__m	stl/stl_algo.h	/^  _Distance __m = 0;$/;"	l
std::__m	stl/stl_algo.h	/^  _Distance __m = min(__n, __remaining);$/;"	l
std::__make_heap	stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Tp*, _Distance*)
std::__make_heap	stl/stl_heap.h	/^__make_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Distance*)
std::__malloc_alloc_oom_handler	stl/stl_alloc.h	/^    void (* __malloc_alloc_oom_handler)() = 0;$/;"	m	namespace:std
std::__malloc_alloc_oom_handler	stl/stl_alloc.h	/^void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;$/;"	m	namespace:std
std::__malloc_alloc_template	stl/stl_alloc.h	/^class __malloc_alloc_template {$/;"	c	namespace:std
std::__malloc_alloc_template::_S_oom_malloc	stl/stl_alloc.h	/^  static void* _S_oom_malloc(size_t);$/;"	p	class:std::__malloc_alloc_template	access:private	signature:(size_t)
std::__malloc_alloc_template::_S_oom_malloc	stl/stl_alloc.h	/^__malloc_alloc_template<__inst>::_S_oom_malloc(size_t __n)$/;"	f	class:std::__malloc_alloc_template	signature:(size_t __n)
std::__malloc_alloc_template::_S_oom_realloc	stl/stl_alloc.h	/^  static void* _S_oom_realloc(void*, size_t);$/;"	p	class:std::__malloc_alloc_template	access:private	signature:(void*, size_t)
std::__malloc_alloc_template::_S_oom_realloc	stl/stl_alloc.h	/^void* __malloc_alloc_template<__inst>::_S_oom_realloc(void* __p, size_t __n)$/;"	f	class:std::__malloc_alloc_template	signature:(void* __p, size_t __n)
std::__malloc_alloc_template::__malloc_alloc_oom_handler	stl/stl_alloc.h	/^  static void (* __malloc_alloc_oom_handler)();$/;"	m	class:std::__malloc_alloc_template	access:private
std::__malloc_alloc_template::__result	stl/stl_alloc.h	/^    void* __result = malloc(__n);$/;"	l
std::__malloc_alloc_template::__result	stl/stl_alloc.h	/^    void* __result = realloc(__p, __new_sz);$/;"	l
std::__malloc_alloc_template::__set_malloc_handler	stl/stl_alloc.h	/^  static void (* __set_malloc_handler(void (*__f)()))()$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void (*__f)())
std::__malloc_alloc_template::allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(size_t __n)
std::__malloc_alloc_template::deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t \/* __n *\/)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void* __p, size_t )
std::__malloc_alloc_template::reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t \/* old_sz *\/, size_t __new_sz)$/;"	f	class:std::__malloc_alloc_template	access:public	signature:(void* __p, size_t , size_t __new_sz)
std::__max_len	stl/ropeimpl.h	/^	    const int __max_len = 40;$/;"	l
std::__median	stl/stl_algo.h	/^__median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
std::__median	stl/stl_algo.h	/^inline const _Tp& __median(const _Tp& __a, const _Tp& __b, const _Tp& __c) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, const _Tp& __c)
std::__merge_adaptive	stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first, $/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
std::__merge_adaptive	stl/stl_algo.h	/^void __merge_adaptive(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Pointer __buffer, _Distance __buffer_size)
std::__merge_backward	stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result)
std::__merge_backward	stl/stl_algo.h	/^_BidirectionalIter3 __merge_backward(_BidirectionalIter1 __first1,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1, _BidirectionalIter2 __first2, _BidirectionalIter2 __last2, _BidirectionalIter3 __result, _Compare __comp)
std::__merge_sort_loop	stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size)
std::__merge_sort_loop	stl/stl_algo.h	/^void __merge_sort_loop(_RandomAccessIter1 __first,$/;"	f	namespace:std	signature:(_RandomAccessIter1 __first, _RandomAccessIter1 __last, _RandomAccessIter2 __result, _Distance __step_size, _Compare __comp)
std::__merge_sort_with_buffer	stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*)
std::__merge_sort_with_buffer	stl/stl_algo.h	/^void __merge_sort_with_buffer(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance*, _Compare __comp)
std::__merge_without_buffer	stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2)
std::__merge_without_buffer	stl/stl_algo.h	/^void __merge_without_buffer(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance __len1, _Distance __len2, _Compare __comp)
std::__mid	stl/stl_deque.h	/^        _ForwardIterator __mid = __first;$/;"	l
std::__mid	stl/stl_deque.h	/^        const value_type* __mid = $/;"	l
std::__mid	stl/stl_deque.h	/^        const value_type* __mid = __first + __elemsafter;$/;"	l
std::__mid	stl/stl_deque.h	/^        const_iterator __mid = __first + (__n - __elemsbefore);$/;"	l
std::__mid	stl/stl_deque.h	/^        const_iterator __mid = __first + __elemsafter;$/;"	l
std::__mid	stl/stl_deque.h	/^      _ForwardIterator __mid = __first;$/;"	l
std::__mid	stl/stl_uninitialized.h	/^  _ForwardIter __mid = uninitialized_copy(__first1, __last1, __result);$/;"	l
std::__mid	stl/stl_vector.h	/^        _ForwardIterator __mid = __first;$/;"	l
std::__mid	stl/stl_vector.h	/^    _ForwardIter __mid = __first;$/;"	l
std::__mid2	stl/stl_uninitialized.h	/^  _ForwardIter __mid2 = uninitialized_copy(__first1, __last1, __first2);$/;"	l
std::__middle	stl/stl_algo.h	/^    _ForwardIter __middle = __first;$/;"	l
std::__middle	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
std::__middle	stl/stl_algo.h	/^  _ForwardIter __middle;$/;"	l
std::__middle	stl/stl_algo.h	/^  _RandomAccessIter __middle = __first + (__last - __first) \/ 2;$/;"	l
std::__middle	stl/stl_algo.h	/^  _RandomAccessIter __middle = __first + __len;$/;"	l
std::__mutable_reference_at	stl/stl_rope.h	/^inline crope::reference __mutable_reference_at(crope& __c, size_t __i)$/;"	f	namespace:std	signature:(crope& __c, size_t __i)
std::__mutable_reference_at	stl/stl_rope.h	/^inline wrope::reference __mutable_reference_at(wrope& __c, size_t __i)$/;"	f	namespace:std	signature:(wrope& __c, size_t __i)
std::__my_free_list	stl/stl_alloc.h	/^            _Obj* __STL_VOLATILE* __my_free_list =$/;"	l
std::__my_free_list	stl/stl_alloc.h	/^            _Obj* __STL_VOLATILE* __my_free_list;$/;"	l
std::__my_free_list	stl/stl_alloc.h	/^    _Obj* __STL_VOLATILE* __my_free_list;$/;"	l
std::__n	stl/stl_algo.h	/^      _Integer __n = __count - 1;$/;"	l
std::__n	stl/stl_algo.h	/^  _Distance __n = __last   - __first;$/;"	l
std::__n	stl/stl_algo.h	/^  typename iterator_traits<_InputIter>::difference_type __n = 0;$/;"	l
std::__n	stl/stl_deque.h	/^    difference_type __n = __last - __first;$/;"	l
std::__n	stl/stl_deque.h	/^  size_type __n = 0;$/;"	l
std::__n	stl/stl_deque.h	/^  size_type __n = __last - __first;$/;"	l
std::__n	stl/stl_hashtable.h	/^    const size_type __n = _M_bkt_num(__p->_M_val);$/;"	l
std::__n	stl/stl_hashtable.h	/^    const size_type __n = _M_next_size(__num_elements_hint);$/;"	l
std::__n	stl/stl_hashtable.h	/^  const size_type __n = _M_bkt_num(__obj);$/;"	l
std::__n	stl/stl_hashtable.h	/^  const size_type __n = _M_bkt_num_key(__key);$/;"	l
std::__n	stl/stl_hashtable.h	/^  size_type __n = _M_bkt_num(__obj);$/;"	l
std::__n	stl/stl_iterator_base.h	/^  typename iterator_traits<_InputIterator>::difference_type __n = 0;$/;"	l
std::__n	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	l
std::__n	stl/stl_tree.h	/^  size_type __n = 0;$/;"	l
std::__n	stl/stl_vector.h	/^    size_type __n = 0;$/;"	l
std::__n1	stl/stl_slist.h	/^    _Node* __n1 = (_Node*) this->_M_head._M_next;$/;"	l
std::__n1	stl/stl_slist.h	/^  _Node_base* __n1 = &this->_M_head;$/;"	l
std::__n2	stl/stl_slist.h	/^    const _Node* __n2 = (const _Node*) __x._M_head._M_next;$/;"	l
std::__new_bucket	stl/stl_hashtable.h	/^            size_type __new_bucket = _M_bkt_num(__first->_M_val, __n);$/;"	l
std::__new_data	stl/ropeimpl.h	/^    _CharT* __new_data = (_CharT*)$/;"	l
std::__new_finish	stl/stl_deque.h	/^      iterator __new_finish = _M_finish - __n;$/;"	l
std::__new_finish	stl/stl_deque.h	/^    iterator __new_finish = _M_reserve_elements_at_back(__n);$/;"	l
std::__new_finish	stl/stl_vector.h	/^      iterator __new_finish = __new_start;$/;"	l
std::__new_finish	stl/stl_vector.h	/^    iterator __new_finish = __new_start;$/;"	l
std::__new_finish	stl/stl_vector.h	/^    iterator __new_finish = copy(__first, __last, _M_start);$/;"	l
std::__new_map	stl/stl_deque.h	/^    _Map_pointer __new_map = _M_allocate_map(__new_map_size);$/;"	l
std::__new_map_size	stl/stl_deque.h	/^    size_type __new_map_size = $/;"	l
std::__new_middle	stl/stl_algo.h	/^    _BidirectionalIter __new_middle =$/;"	l
std::__new_middle	stl/stl_algo.h	/^  _BidirectionalIter __new_middle$/;"	l
std::__new_middle	stl/stl_algo.h	/^  _ForwardIter __new_middle = __first;$/;"	l
std::__new_nodes	stl/stl_deque.h	/^  size_type __new_nodes$/;"	l
std::__new_nstart	stl/stl_deque.h	/^  _Map_pointer __new_nstart;$/;"	l
std::__new_num_nodes	stl/stl_deque.h	/^  size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;$/;"	l
std::__new_result	stl/stl_algo.h	/^      _ForwardIter1 __new_result$/;"	l
std::__new_right	stl/ropeimpl.h	/^	  _RopeRep* __new_right = $/;"	l
std::__new_start	stl/stl_deque.h	/^      iterator __new_start = _M_start + __n;$/;"	l
std::__new_start	stl/stl_deque.h	/^    iterator __new_start = _M_reserve_elements_at_front(__n);$/;"	l
std::__new_start	stl/stl_vector.h	/^      iterator __new_start = _M_allocate(__len);$/;"	l
std::__new_start	stl/stl_vector.h	/^    iterator __new_start = _M_allocate(__len);$/;"	l
std::__next	stl/stl_algo.h	/^  _RandomAccessIter __next = __last;$/;"	l
std::__next	stl/stl_hashtable.h	/^      _Node* __next = __cur->_M_next;$/;"	l
std::__next	stl/stl_hashtable.h	/^    _Node* __next = __cur->_M_next;$/;"	l
std::__next	stl/stl_hashtable.h	/^    _Node* __next;$/;"	l
std::__next	stl/stl_list.h	/^      iterator __next = __first2;$/;"	l
std::__next	stl/stl_list.h	/^    iterator __next = __first;$/;"	l
std::__next	stl/stl_slist.h	/^    _Slist_node_base* __next = __node->_M_next;$/;"	l
std::__next_obj	stl/stl_alloc.h	/^    _Obj* __next_obj;$/;"	l
std::__nfinish	stl/stl_deque.h	/^  _Tp** __nfinish = __nstart + __num_nodes;$/;"	l
std::__nobjs	stl/stl_alloc.h	/^    int __nobjs = 20;$/;"	l
std::__node	stl/stl_slist.h	/^  _Node* __node = (_Node*) this->_M_head._M_next;$/;"	l
std::__node_start_pos	stl/ropeimpl.h	/^    size_t __node_start_pos = __x._M_leaf_pos;$/;"	l
std::__nright	stl/ropeimpl.h	/^	  _RopeRep* __nright = $/;"	l
std::__nright	stl/ropeimpl.h	/^    _RopeRep* __nright =$/;"	l
std::__nstart	stl/stl_deque.h	/^  _Tp** __nstart = _M_map + (_M_map_size - __num_nodes) \/ 2;$/;"	l
std::__nth_element	stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*)
std::__nth_element	stl/stl_algo.h	/^void __nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Tp*, _Compare __comp)
std::__num_nodes	stl/stl_deque.h	/^  size_t __num_nodes = $/;"	l
std::__old	stl/ropeimpl.h	/^		_RopeSubstring* __old = (_RopeSubstring*)__base;$/;"	l
std::__old	stl/ropeimpl.h	/^	      _Self_destruct_ptr __old(__insertee);$/;"	p	signature:(__insertee)
std::__old	stl/ropeimpl.h	/^	      _Self_destruct_ptr __old(__too_tiny);$/;"	p	signature:(__too_tiny)
std::__old	stl/ropeimpl.h	/^	  _Self_destruct_ptr __old(__result);$/;"	p	signature:(__result)
std::__old	stl/ropeimpl.h	/^	  _Self_destruct_ptr __old(__too_tiny);$/;"	p	signature:(__too_tiny)
std::__old	stl/ropeimpl.h	/^    _RopeRep* __old = _M_root->_M_tree_ptr;$/;"	l
std::__old	stl/stl_hashtable.h	/^  const _Node* __old = _M_cur;$/;"	l
std::__old_c_string	stl/ropeimpl.h	/^    __GC_CONST _CharT* __old_c_string = _M_tree_ptr->_M_c_string;$/;"	l
std::__old_finish	stl/stl_deque.h	/^    iterator __old_finish = _M_finish;$/;"	l
std::__old_finish	stl/stl_vector.h	/^      iterator __old_finish = _M_finish;$/;"	l
std::__old_len	stl/ropeimpl.h	/^    size_t __old_len = __r->_M_size;$/;"	l
std::__old_n	stl/stl_hashtable.h	/^  const size_type __old_n = _M_buckets.size();$/;"	l
std::__old_num_nodes	stl/stl_deque.h	/^  size_type __old_num_nodes = _M_finish._M_node - _M_start._M_node + 1;$/;"	l
std::__old_size	stl/stl_vector.h	/^      const size_type __old_size = size();        $/;"	l
std::__old_size	stl/stl_vector.h	/^      const size_type __old_size = size();$/;"	l
std::__old_size	stl/stl_vector.h	/^    const size_type __old_size = size();$/;"	l
std::__old_start	stl/stl_deque.h	/^    iterator __old_start = _M_start;$/;"	l
std::__orig_size	stl/ropeimpl.h	/^    size_t __orig_size = __r->_M_size;$/;"	l
std::__p	stl/ropeimpl.h	/^    const _CharT* __p = __s;$/;"	l
std::__p	stl/stl_algo.h	/^    _RandomAccessIter __p = __first;$/;"	l
std::__p	stl/stl_algo.h	/^  _ForwardIter2 __p1, __p;$/;"	l
std::__p	stl/stl_alloc.h	/^	    _Obj* __p;$/;"	l
std::__p	stl/stl_hashtable.h	/^  _Node* __p = __it._M_cur;$/;"	l
std::__p	stl/stl_tree.h	/^  pair<const_iterator, const_iterator> __p = equal_range(__k);$/;"	l
std::__p	stl/stl_tree.h	/^  pair<iterator,iterator> __p = equal_range(__x);$/;"	l
std::__p1	stl/stl_algo.h	/^  _ForwardIter2 __p1, __p;$/;"	l
std::__p1	stl/stl_slist.h	/^    _Node_base* __p1 = &this->_M_head;$/;"	l
std::__pad_len	stl/ropeimpl.h	/^    size_t __pad_len;$/;"	l
std::__parent	stl/stl_algo.h	/^  _Distance __parent = 0;$/;"	l
std::__parent	stl/stl_heap.h	/^  _Distance __parent = (__holeIndex - 1) \/ 2;$/;"	l
std::__parent	stl/stl_heap.h	/^  _Distance __parent = (__len - 2)\/2;$/;"	l
std::__part1	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __part1 = $/;"	l
std::__part2	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __part2 = $/;"	l
std::__partial_sort	stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*)
std::__partial_sort	stl/stl_algo.h	/^void __partial_sort(_RandomAccessIter __first, _RandomAccessIter __middle,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Tp*, _Compare __comp)
std::__partial_sort_copy	stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp, _Distance*, _Tp*)
std::__partial_sort_copy	stl/stl_algo.h	/^_RandomAccessIter __partial_sort_copy(_InputIter __first,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Distance*, _Tp*)
std::__partial_sum	stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)
std::__partial_sum	stl/stl_numeric.h	/^__partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Tp*)
std::__partition	stl/stl_algo.h	/^_BidirectionalIter __partition(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Predicate __pred, bidirectional_iterator_tag)
std::__partition	stl/stl_algo.h	/^_ForwardIter __partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, forward_iterator_tag)
std::__path	stl/ropeimpl.h	/^    const _RopeRep* __path[_RopeRep::_S_max_rope_depth+1];$/;"	l
std::__pop_heap	stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Compare __comp, _Distance*)
std::__pop_heap	stl/stl_heap.h	/^__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Tp __value, _Distance*)
std::__pop_heap_aux	stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*)
std::__pop_heap_aux	stl/stl_heap.h	/^__pop_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Tp*, _Compare __comp)
std::__pos	stl/ropeimpl.h	/^    size_t __pos = __x._M_current_pos;$/;"	l
std::__pos1	stl/stl_deque.h	/^    iterator __pos1 = __pos;$/;"	l
std::__power	stl/stl_numeric.h	/^_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
std::__power	stl/stl_numeric.h	/^inline _Tp __power(_Tp __x, _Integer __n)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n)
std::__prefix	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __prefix = __r.substr(0, __first.index());$/;"	l
std::__prev	stl/stl_slist.h	/^  _Node_base* __prev = &this->_M_head;$/;"	l
std::__ptr	stl/ropeimpl.h	/^	_CharT* __ptr = _My_rope::_S_fetch_ptr(__old, _M_pos);$/;"	l
std::__push_heap	stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare __comp)
std::__push_heap	stl/stl_heap.h	/^__push_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value)
std::__push_heap_aux	stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _Distance*, _Tp*)
std::__push_heap_aux	stl/stl_heap.h	/^__push_heap_aux(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Distance*, _Tp*)
std::__r	stl/ropeimpl.h	/^	    _RopeLeaf* __r = (_RopeLeaf*) __right;$/;"	l
std::__r	stl/ropeimpl.h	/^  rope<_CharT,_Alloc>& __r(__first.container());$/;"	p	signature:(__first.container())
std::__random_number	stl/stl_algo.h	/^inline _Distance __random_number(_Distance __n) {$/;"	f	namespace:std	signature:(_Distance __n)
std::__random_sample	stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, _RandomNumberGenerator& __rand, const _Distance __n)
std::__random_sample	stl/stl_algo.h	/^_RandomAccessIter __random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out, const _Distance __n)
std::__remainder	stl/ropeimpl.h	/^    _RopeRep* __remainder;$/;"	l
std::__remainder_rope	stl/ropeimpl.h	/^    rope<_CharT,_Alloc> __remainder_rope;$/;"	l
std::__remaining	stl/stl_algo.h	/^  _Distance __remaining = 0;$/;"	l
std::__rend	stl/ropeimpl.h	/^	    const_iterator __rend(__right, __right_len);$/;"	p	signature:(__right, __right_len)
std::__rest	stl/ropeimpl.h	/^		_CharT* __rest = _S_flatten(__left, __buffer);$/;"	l
std::__rest	stl/ropeimpl.h	/^	    _RopeRep* __rest = _S_leaf_concat_char_iter(__leftright,$/;"	l
std::__rest	stl/ropeimpl.h	/^    size_t __rest;$/;"	l
std::__rest_buffer	stl/ropeimpl.h	/^    _CharT* __rest_buffer;$/;"	l
std::__result	stl/ropeimpl.h	/^		    _RopeSubstring* __result =$/;"	l
std::__result	stl/ropeimpl.h	/^		_CharT __result;$/;"	l
std::__result	stl/ropeimpl.h	/^		_RopeLeaf* __result;$/;"	l
std::__result	stl/ropeimpl.h	/^		_RopeRep* __result;$/;"	l
std::__result	stl/ropeimpl.h	/^		bool __result;$/;"	l
std::__result	stl/ropeimpl.h	/^	_RopeLeaf* __result = _S_leaf_concat_char_iter(__r, __iter, __len);$/;"	l
std::__result	stl/ropeimpl.h	/^    _CharT* __result = _Data_allocate(_S_rounded_up_size(__s));$/;"	l
std::__result	stl/ropeimpl.h	/^    _CharT* __result = _Data_allocate(__s + 1);$/;"	l
std::__result	stl/ropeimpl.h	/^    _RopeConcatenation* __result =$/;"	l
std::__result	stl/ropeimpl.h	/^    _RopeLeaf* __result;$/;"	l
std::__result	stl/ropeimpl.h	/^    _RopeRep* __result = 0;$/;"	l
std::__result	stl/ropeimpl.h	/^    _RopeRep* __result =$/;"	l
std::__result	stl/ropeimpl.h	/^    _RopeRep* __result;$/;"	l
std::__result	stl/ropeimpl.h	/^    rope<_CharT,_Alloc> __result;$/;"	l
std::__result	stl/stl_algo.h	/^    _BidirectionalIter1 __result = __rresult.base();$/;"	l
std::__result	stl/stl_algo.h	/^    _ForwardIter1 __result = __last1;$/;"	l
std::__result	stl/stl_algo.h	/^  _RandomAccessIter __result = __first + (__last - __middle);$/;"	l
std::__result	stl/stl_algobase.h	/^  const int __result = memcmp(__first1, __first2, min(__len1, __len2));$/;"	l
std::__result	stl/stl_alloc.h	/^    _Obj* __result;$/;"	l
std::__result	stl/stl_alloc.h	/^    char* __result;$/;"	l
std::__result	stl/stl_alloc.h	/^    void* __result;$/;"	l
std::__result	stl/stl_numeric.h	/^    _Tp __result = __x;$/;"	l
std::__result	stl/stl_slist.h	/^  _Slist_node_base* __result = __node;$/;"	l
std::__result	stl/stl_slist.h	/^  size_t __result = 0;$/;"	l
std::__result	stl/stl_threads.h	/^        unsigned long __result = *__p;$/;"	l
std::__result1	stl/stl_algo.h	/^    _ForwardIter __result1 = __first;$/;"	l
std::__result2	stl/stl_algo.h	/^    _Pointer __result2 = __buffer;$/;"	l
std::__result_len	stl/ropeimpl.h	/^		size_t __result_len;$/;"	l
std::__result_pos	stl/ropeimpl.h	/^    size_type __result_pos = __start + __c._M_count;$/;"	l
std::__reverse	stl/stl_algo.h	/^void __reverse(_BidirectionalIter __first, _BidirectionalIter __last, $/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, bidirectional_iterator_tag)
std::__reverse	stl/stl_algo.h	/^void __reverse(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, random_access_iterator_tag)
std::__right	stl/ropeimpl.h	/^		    _RopeRep* __right =  __conc->_M_right;$/;"	l
std::__right	stl/ropeimpl.h	/^		_RopeRep* __right = __c->_M_right;$/;"	l
std::__right	stl/ropeimpl.h	/^	_RopeLeaf* __right = $/;"	l
std::__right	stl/ropeimpl.h	/^	_RopeLeaf* __right = (_RopeLeaf*)(((_RopeConcatenation*)__r)->_M_right);$/;"	l
std::__right	stl/ropeimpl.h	/^	_RopeRep* __right = __c->_M_right;$/;"	l
std::__right	stl/ropeimpl.h	/^    _RopeRep* __right =$/;"	l
std::__right	stl/stl_algo.h	/^  _ForwardIter __middle, __left, __right;$/;"	l
std::__right_len	stl/ropeimpl.h	/^    size_t __right_len;$/;"	l
std::__right_start	stl/ropeimpl.h	/^		    size_t __right_start = max(__left_len, __begin);$/;"	l
std::__rlast1	stl/stl_algo.h	/^  _RevIter1 __rlast1(__first1);$/;"	p	signature:(__first1)
std::__rlast2	stl/stl_algo.h	/^  _RevIter2 __rlast2(__first2);$/;"	p	signature:(__first2)
std::__rlen	stl/stl_rope.h	/^    size_t __rlen = rope<_CharT,_Alloc>::_S_char_ptr_len(__right);$/;"	l
std::__rope_len	stl/ropeimpl.h	/^    size_t __rope_len = __r.size();$/;"	l
std::__rotate	stl/stl_algo.h	/^_BidirectionalIter __rotate(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Distance*, bidirectional_iterator_tag)
std::__rotate	stl/stl_algo.h	/^_ForwardIter __rotate(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _Distance*, forward_iterator_tag)
std::__rotate	stl/stl_algo.h	/^_RandomAccessIter __rotate(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Distance *, _Tp *)
std::__rotate_adaptive	stl/stl_algo.h	/^_BidirectionalIter1 __rotate_adaptive(_BidirectionalIter1 __first,$/;"	f	namespace:std	signature:(_BidirectionalIter1 __first, _BidirectionalIter1 __middle, _BidirectionalIter1 __last, _Distance __len1, _Distance __len2, _BidirectionalIter2 __buffer, _Distance __buffer_size)
std::__rresult	stl/stl_algo.h	/^  _RevIter1 __rresult = search(_RevIter1(__last1), __rlast1,$/;"	l
std::__rstart	stl/ropeimpl.h	/^	    const_iterator __rstart(__right, 0);$/;"	p	signature:(__right, 0)
std::__s	stl/ropeimpl.h	/^    size_t __s = __r->_M_size;$/;"	l
std::__s	stl/ropeimpl.h	/^    size_t __s = size();$/;"	l
std::__secondChild	stl/stl_heap.h	/^  _Distance __secondChild = 2 * __holeIndex + 2;$/;"	l
std::__second_cut	stl/stl_algo.h	/^    _BidirectionalIter __second_cut = __middle;$/;"	l
std::__second_cut	stl/stl_algo.h	/^  _BidirectionalIter __second_cut = __middle;$/;"	l
std::__section	stl/ropeimpl.h	/^		    const _CharT* __section = __l->_M_data + __start;$/;"	l
std::__section	stl/ropeimpl.h	/^		_CharT* __section;$/;"	l
std::__size	stl/ropeimpl.h	/^	size_t __size = _M_size + 1;$/;"	l
std::__slist_make_link	stl/stl_slist.h	/^__slist_make_link(_Slist_node_base* __prev_node,$/;"	f	namespace:std	signature:(_Slist_node_base* __prev_node, _Slist_node_base* __new_node)
std::__slist_previous	stl/stl_slist.h	/^__slist_previous(_Slist_node_base* __head,$/;"	f	namespace:std	signature:(_Slist_node_base* __head, const _Slist_node_base* __node)
std::__slist_previous	stl/stl_slist.h	/^__slist_previous(const _Slist_node_base* __head,$/;"	f	namespace:std	signature:(const _Slist_node_base* __head, const _Slist_node_base* __node)
std::__slist_reverse	stl/stl_slist.h	/^inline _Slist_node_base* __slist_reverse(_Slist_node_base* __node)$/;"	f	namespace:std	signature:(_Slist_node_base* __node)
std::__slist_size	stl/stl_slist.h	/^inline size_t __slist_size(_Slist_node_base* __node)$/;"	f	namespace:std	signature:(_Slist_node_base* __node)
std::__slist_splice_after	stl/stl_slist.h	/^__slist_splice_after(_Slist_node_base* __pos, _Slist_node_base* __head)$/;"	f	namespace:std	signature:(_Slist_node_base* __pos, _Slist_node_base* __head)
std::__slist_splice_after	stl/stl_slist.h	/^inline void __slist_splice_after(_Slist_node_base* __pos,$/;"	f	namespace:std	signature:(_Slist_node_base* __pos, _Slist_node_base* __before_first, _Slist_node_base* __before_last)
std::__ss	stl/ropeimpl.h	/^	        _Rope_RopeSubstring<_CharT,_Alloc>* __ss =$/;"	l
std::__stable_partition_adaptive	stl/stl_algo.h	/^_ForwardIter __stable_partition_adaptive(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Distance __len, _Pointer __buffer, _Distance __buffer_size)
std::__stable_partition_aux	stl/stl_algo.h	/^__stable_partition_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, _Tp*, _Distance*)
std::__stable_sort_adaptive	stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size)
std::__stable_sort_adaptive	stl/stl_algo.h	/^void __stable_sort_adaptive(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Pointer __buffer, _Distance __buffer_size, _Compare __comp)
std::__stable_sort_aux	stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*)
std::__stable_sort_aux	stl/stl_algo.h	/^inline void __stable_sort_aux(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Distance*, _Compare __comp)
std::__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + __n;$/;"	l
std::__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + difference_type(__n); $/;"	l
std::__start_n	stl/stl_deque.h	/^        iterator __start_n = _M_start + difference_type(__n);$/;"	l
std::__step_size	stl/stl_algo.h	/^  _Distance __step_size = __stl_chunk_size;$/;"	l
std::__stl_chunk_size	stl/stl_algo.h	/^const int __stl_chunk_size = 7;$/;"	m	namespace:std
std::__stl_hash_string	stl/stl_hash_fun.h	/^inline size_t __stl_hash_string(const char* __s)$/;"	f	namespace:std	signature:(const char* __s)
std::__stl_next_prime	stl/stl_hashtable.h	/^inline unsigned long __stl_next_prime(unsigned long __n)$/;"	f	namespace:std	signature:(unsigned long __n)
std::__stl_num_primes	stl/stl_hashtable.h	/^enum { __stl_num_primes = 28 };$/;"	e	enum:std::__anon17
std::__stl_prime_list	stl/stl_hashtable.h	/^static const unsigned long __stl_prime_list[__stl_num_primes] =$/;"	m	namespace:std
std::__stl_threshold	stl/stl_algo.h	/^const int __stl_threshold = 16;$/;"	m	namespace:std
std::__stl_throw_length_error	stl/stl_range_errors.h	/^void __stl_throw_length_error(const char* __msg);$/;"	p	namespace:std	signature:(const char* __msg)
std::__stl_throw_range_error	stl/stl_range_errors.h	/^void __stl_throw_range_error(const char* __msg);$/;"	p	namespace:std	signature:(const char* __msg)
std::__suffix	stl/ropeimpl.h	/^  rope<_CharT,_Alloc> __suffix = $/;"	l
std::__t	stl/stl_algo.h	/^    _EuclideanRingElement __t = __m % __n;$/;"	l
std::__t	stl/stl_algo.h	/^  _Distance __t = __n;$/;"	l
std::__t_copy	stl/stl_deque.h	/^  value_type __t_copy = __t;$/;"	l
std::__tmp	stl/stl_algo.h	/^    _Tp __tmp = *__first;$/;"	l
std::__tmp	stl/stl_algobase.h	/^  _Tp __tmp = *__a;$/;"	l
std::__tmp	stl/stl_algobase.h	/^  _Tp __tmp = __a;$/;"	l
std::__tmp	stl/stl_algobase.h	/^  char __tmp = __c;$/;"	l
std::__tmp	stl/stl_algobase.h	/^  signed char __tmp = __c;$/;"	l
std::__tmp	stl/stl_algobase.h	/^  unsigned char __tmp = __c;$/;"	l
std::__tmp	stl/stl_bvector.h	/^  bool __tmp = __x;$/;"	l
std::__tmp	stl/stl_hashtable.h	/^      _Node* __tmp = _M_new_node(__obj);$/;"	l
std::__tmp	stl/stl_hashtable.h	/^      vector<_Node*, _All> __tmp(__n, (_Node*)(0),$/;"	p	signature:(__n, (_Node*)(0), _M_buckets.get_allocator())
std::__tmp	stl/stl_hashtable.h	/^  _Node* __tmp = _M_new_node(__obj);$/;"	l
std::__tmp	stl/stl_hashtable.h	/^  const_iterator __tmp = *this;$/;"	l
std::__tmp	stl/stl_hashtable.h	/^  iterator __tmp = *this;$/;"	l
std::__tmp	stl/stl_list.h	/^    _List_node<_Tp>* __tmp = __cur;$/;"	l
std::__tmp	stl/stl_list.h	/^  _List_node_base* __tmp = __p;$/;"	l
std::__tmp	stl/stl_numeric.h	/^    _Tp __tmp = *__first;$/;"	l
std::__tmp	stl/stl_rope.h	/^        _CharT __tmp = __a;$/;"	l
std::__tmp	stl/stl_slist.h	/^    _Slist_node<_Tp>* __tmp = __cur;$/;"	l
std::__tmp	stl/stl_tempbuf.h	/^    _Tp* __tmp = (_Tp*) malloc((size_t)__len * sizeof(_Tp));$/;"	l
std::__tmp	stl/stl_vector.h	/^      iterator __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());$/;"	l
std::__tmp	stl/stl_vector.h	/^    iterator __tmp = _M_allocate_and_copy(__len, __first, __last);$/;"	l
std::__tmp	stl/stl_vector.h	/^    vector<_Tp, _Alloc> __tmp(__n, __val, get_allocator());$/;"	p	signature:(__n, __val, get_allocator())
std::__too_big	stl/ropeimpl.h	/^	    bool __too_big = __r->_M_size > __prefix->_M_size;$/;"	l
std::__too_tiny	stl/ropeimpl.h	/^    _RopeRep* __too_tiny = 0;    	\/\/ included in refcount$/;"	l
std::__top	stl/stl_tree.h	/^  _Link_type __top = _M_clone_node(__x);$/;"	l
std::__topIndex	stl/stl_heap.h	/^  _Distance __topIndex = __holeIndex;$/;"	l
std::__total_bytes	stl/stl_alloc.h	/^    size_t __total_bytes = __size * __nobjs;$/;"	l
std::__trip_count	stl/stl_algo.h	/^  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count$/;"	l
std::__two_step	stl/stl_algo.h	/^  _Distance __two_step = 2 * __step_size;$/;"	l
std::__unguarded_insertion_sort	stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::__unguarded_insertion_sort	stl/stl_algo.h	/^inline void __unguarded_insertion_sort(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::__unguarded_insertion_sort_aux	stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*)
std::__unguarded_insertion_sort_aux	stl/stl_algo.h	/^void __unguarded_insertion_sort_aux(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp*, _Compare __comp)
std::__unguarded_linear_insert	stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val) {$/;"	f	namespace:std	signature:(_RandomAccessIter __last, _Tp __val)
std::__unguarded_linear_insert	stl/stl_algo.h	/^void __unguarded_linear_insert(_RandomAccessIter __last, _Tp __val, $/;"	f	namespace:std	signature:(_RandomAccessIter __last, _Tp __val, _Compare __comp)
std::__unguarded_partition	stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot)
std::__unguarded_partition	stl/stl_algo.h	/^_RandomAccessIter __unguarded_partition(_RandomAccessIter __first, $/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Tp __pivot, _Compare __comp)
std::__uninitialized_copy	stl/stl_uninitialized.h	/^__uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _Tp*)
std::__uninitialized_copy_aux	stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __false_type)
std::__uninitialized_copy_aux	stl/stl_uninitialized.h	/^__uninitialized_copy_aux(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, __true_type)
std::__uninitialized_copy_copy	stl/stl_uninitialized.h	/^__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _ForwardIter __result)
std::__uninitialized_copy_fill	stl/stl_uninitialized.h	/^__uninitialized_copy_fill(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, const _Tp& __x)
std::__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
std::__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result, input_iterator_tag)
std::__uninitialized_copy_n	stl/stl_uninitialized.h	/^__uninitialized_copy_n(_RandomAccessIter __first, _Size __count,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _Size __count, _ForwardIter __result, random_access_iterator_tag)
std::__uninitialized_fill	stl/stl_uninitialized.h	/^inline void __uninitialized_fill(_ForwardIter __first, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, _Tp1*)
std::__uninitialized_fill_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __false_type)
std::__uninitialized_fill_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_aux(_ForwardIter __first, _ForwardIter __last, $/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, __true_type)
std::__uninitialized_fill_copy	stl/stl_uninitialized.h	/^__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid,$/;"	f	namespace:std	signature:(_ForwardIter __result, _ForwardIter __mid, const _Tp& __x, _InputIter __first, _InputIter __last)
std::__uninitialized_fill_n	stl/stl_uninitialized.h	/^__uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, _Tp1*)
std::__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __false_type)
std::__uninitialized_fill_n_aux	stl/stl_uninitialized.h	/^__uninitialized_fill_n_aux(_ForwardIter __first, _Size __n,$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x, __true_type)
std::__unique_copy	stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, _BinaryPredicate __binary_pred, forward_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^_ForwardIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result, forward_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, _Tp*)
std::__unique_copy	stl/stl_algo.h	/^_OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Tp*)
std::__unique_copy	stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred, output_iterator_tag)
std::__unique_copy	stl/stl_algo.h	/^inline _OutputIter __unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, output_iterator_tag)
std::__upper_bound	stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp, _Distance*)
std::__upper_bound	stl/stl_algo.h	/^_ForwardIter __upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Distance*)
std::__val	stl/stl_algo.h	/^  _Tp __val = *__last;$/;"	l
std::__val	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	l
std::__val	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	l
std::__value	stl/stl_algo.h	/^  _Tp __value = *__first;$/;"	l
std::__value	stl/stl_numeric.h	/^  _Tp __value = *__first;$/;"	l
std::__value_type	stl/stl_iterator_base.h	/^__value_type(const _Iter&)$/;"	f	namespace:std	signature:(const _Iter&)
std::__w	stl/ropeimpl.h	/^    size_t __w = __o.width();$/;"	l
std::__w	stl/stl_tree.h	/^        _Rb_tree_node_base* __w = __x_parent->_M_left;$/;"	l
std::__w	stl/stl_tree.h	/^        _Rb_tree_node_base* __w = __x_parent->_M_right;$/;"	l
std::__x	stl/stl_list.h	/^    insert(end(), __new_size - __len, __x);$/;"	l
std::__x	stl/stl_tree.h	/^    _Link_type __x = (_Link_type) __it._M_node;$/;"	l
std::__x	stl/stl_tree.h	/^  _Link_type __x = (_Link_type) __x_;$/;"	l
std::__x	stl/stl_tree.h	/^  _Link_type __x = _M_root();      \/\/ Current node. $/;"	l
std::__x	stl/stl_tree.h	/^  _Link_type __x = _M_root(); \/* Current node. *\/$/;"	l
std::__x	stl/stl_tree.h	/^  _Link_type __x = _M_root();$/;"	l
std::__x	stl/stl_tree.h	/^  _Rb_tree_node_base* __x = 0;$/;"	l
std::__x_copy	stl/stl_deque.h	/^  value_type __x_copy = __x;$/;"	l
std::__x_copy	stl/stl_vector.h	/^      _Tp __x_copy = __x;$/;"	l
std::__x_copy	stl/stl_vector.h	/^    _Tp __x_copy = __x;$/;"	l
std::__x_parent	stl/stl_tree.h	/^  _Rb_tree_node_base* __x_parent = 0;$/;"	l
std::__xlen	stl/stl_vector.h	/^    const size_type __xlen = __x.size();$/;"	l
std::__y	stl/stl_tree.h	/^      _Link_type __y = _M_clone_node(__x);$/;"	l
std::__y	stl/stl_tree.h	/^      _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_left;$/;"	l
std::__y	stl/stl_tree.h	/^      _Rb_tree_node_base* __y = __x->_M_parent->_M_parent->_M_right;$/;"	l
std::__y	stl/stl_tree.h	/^    _Link_type __y = _S_left(__x);$/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = $/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = (_Link_type) __y_;$/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = _M_header;      \/\/ Last node which is not less than __k. $/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = _M_header; \/* Last node which is greater than __k. *\/$/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = _M_header; \/* Last node which is not less than __k. *\/$/;"	l
std::__y	stl/stl_tree.h	/^  _Link_type __y = _M_header;$/;"	l
std::__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __x->_M_left;$/;"	l
std::__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __x->_M_right;$/;"	l
std::__y	stl/stl_tree.h	/^  _Rb_tree_node_base* __y = __z;$/;"	l
std::__z	stl/stl_tree.h	/^  _Link_type __z;$/;"	l
std::accumulate	stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init)
std::accumulate	stl/stl_numeric.h	/^_Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)
std::address	stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	namespace:std	signature:(const_reference __x) const
std::adjacent_difference	stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
std::adjacent_difference	stl/stl_numeric.h	/^adjacent_difference(_InputIterator __first,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::adjacent_find	stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
std::adjacent_find	stl/stl_algo.h	/^_ForwardIter adjacent_find(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
std::advance	stl/stl_iterator_base.h	/^inline void advance(_InputIterator& __i, _Distance __n) {$/;"	f	namespace:std	signature:(_InputIterator& __i, _Distance __n)
std::alloc	stl/stl_alloc.h	/^typedef __default_alloc_template<__NODE_ALLOCATOR_THREADS, 0> alloc;$/;"	t	namespace:std
std::alloc	stl/stl_alloc.h	/^typedef malloc_alloc alloc;$/;"	t	namespace:std
std::alloc::deallocate	stl/ropeimpl.h	/^                  alloc::deallocate(__buffer, __len * sizeof(_CharT));$/;"	p	class:std::alloc	signature:(__buffer, __len * sizeof(_CharT))
std::allocate	stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	namespace:std	signature:(size_type __n, const void* = 0)
std::allocator	stl/stl_alloc.h	/^class allocator {$/;"	c	namespace:std
std::allocator	stl/stl_alloc.h	/^class allocator<void> {$/;"	c	namespace:std
std::allocator::_Alloc	stl/stl_alloc.h	/^  typedef alloc _Alloc;          \/\/ The underlying allocator.$/;"	t	class:std::allocator	access:private
std::allocator::_Alloc::deallocate	stl/stl_alloc.h	/^    { _Alloc::deallocate(__p, __n * sizeof(_Tp)); }$/;"	p	class:std::allocator::_Alloc	signature:(__p, __n * sizeof(_Tp))
std::allocator::_Tp	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	p	signature:(__val)
std::allocator::address	stl/stl_alloc.h	/^  const_pointer address(const_reference __x) const { return &__x; }$/;"	f	class:std::allocator	access:public	signature:(const_reference __x) const
std::allocator::address	stl/stl_alloc.h	/^  pointer address(reference __x) const { return &__x; }$/;"	f	class:std::allocator	access:public	signature:(reference __x) const
std::allocator::allocate	stl/stl_alloc.h	/^  _Tp* allocate(size_type __n, const void* = 0) {$/;"	f	class:std::allocator	access:public	signature:(size_type __n, const void* = 0)
std::allocator::const_pointer	stl/stl_alloc.h	/^  typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	access:public
std::allocator::const_pointer	stl/stl_alloc.h	/^  typedef const void* const_pointer;$/;"	t	class:std::allocator	access:public
std::allocator::const_reference	stl/stl_alloc.h	/^  typedef const _Tp& const_reference;$/;"	t	class:std::allocator	access:public
std::allocator::construct	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	class:std::allocator	access:public	signature:(pointer __p, const _Tp& __val)
std::allocator::deallocate	stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	class:std::allocator	access:public	signature:(pointer __p, size_type __n)
std::allocator::destroy	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:std::allocator	access:public	signature:(pointer __p)
std::allocator::difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	access:public
std::allocator::difference_type	stl/stl_alloc.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	access:public
std::allocator::pointer	stl/stl_alloc.h	/^  typedef _Tp*       pointer;$/;"	t	class:std::allocator	access:public
std::allocator::pointer	stl/stl_alloc.h	/^  typedef void*       pointer;$/;"	t	class:std::allocator	access:public
std::allocator::rebind	stl/stl_alloc.h	/^  template <class _Tp1> struct rebind {$/;"	s	class:std::allocator	access:public
std::allocator::rebind::other	stl/stl_alloc.h	/^    typedef allocator<_Tp1> other;$/;"	t	struct:std::allocator::rebind	access:public
std::allocator::reference	stl/stl_alloc.h	/^  typedef _Tp&       reference;$/;"	t	class:std::allocator	access:public
std::allocator::size_type	stl/stl_alloc.h	/^  typedef size_t      size_type;$/;"	t	class:std::allocator	access:public
std::allocator::size_type	stl/stl_alloc.h	/^  typedef size_t     size_type;$/;"	t	class:std::allocator	access:public
std::allocator::value_type	stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	class:std::allocator	access:public
std::allocator::value_type	stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:std::allocator	access:public
std::allocator::~_Tp	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	p	signature:()
std::append	stl/stl_rope.h	/^    __left.append(__right);$/;"	p	signature:(__right)
std::back	stl/stl_deque.h	/^    push_back(back());$/;"	p	signature:()
std::back_insert_iterator	stl/stl_iterator.h	/^class back_insert_iterator {$/;"	c	namespace:std
std::back_insert_iterator::back_insert_iterator	stl/stl_iterator.h	/^  explicit back_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::back_insert_iterator	access:public	signature:(_Container& __x)
std::back_insert_iterator::container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::back_insert_iterator	access:protected
std::back_insert_iterator::container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::operator *	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
std::back_insert_iterator::operator ++	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
std::back_insert_iterator::operator ++	stl/stl_iterator.h	/^  back_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::back_insert_iterator	access:public	signature:(int)
std::back_insert_iterator::operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::back_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::back_insert_iterator::pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::push_back	stl/stl_iterator.h	/^    container->push_back(__value);$/;"	p	signature:(__value)
std::back_insert_iterator::reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::back_insert_iterator	access:public
std::back_insert_iterator::value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::back_insert_iterator	access:public
std::back_inserter	stl/stl_iterator.h	/^inline back_insert_iterator<_Container> back_inserter(_Container& __x) {$/;"	f	namespace:std	signature:(_Container& __x)
std::begin	stl/stl_vector.h	/^    destroy(begin(), end());$/;"	p	signature:()
std::begin	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	p	signature:()
std::bidirectional_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct bidirectional_iterator {$/;"	s	namespace:std
std::bidirectional_iterator::difference_type	stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:std::bidirectional_iterator	access:public
std::bidirectional_iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	struct:std::bidirectional_iterator	access:public
std::bidirectional_iterator::pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:std::bidirectional_iterator	access:public
std::bidirectional_iterator::reference	stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:std::bidirectional_iterator	access:public
std::bidirectional_iterator::value_type	stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:std::bidirectional_iterator	access:public
std::bidirectional_iterator_tag	stl/stl_iterator_base.h	/^struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	s	namespace:std	inherits:forward_iterator_tag
std::binary_compose	stl/stl_function.h	/^class binary_compose$/;"	c	namespace:std	inherits:unary_function
std::binary_compose::_M_fn1	stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:std::binary_compose	access:protected
std::binary_compose::_M_fn2	stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:std::binary_compose	access:protected
std::binary_compose::_M_fn3	stl/stl_function.h	/^  _Operation3 _M_fn3;$/;"	m	class:std::binary_compose	access:protected
std::binary_compose::binary_compose	stl/stl_function.h	/^  binary_compose(const _Operation1& __x, const _Operation2& __y, $/;"	f	class:std::binary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y, const _Operation3& __z)
std::binary_compose::operator ()	stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:std::binary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
std::binary_function	stl/stl_function.h	/^struct binary_function {$/;"	s	namespace:std
std::binary_function::first_argument_type	stl/stl_function.h	/^  typedef _Arg1 first_argument_type;$/;"	t	struct:std::binary_function	access:public
std::binary_function::result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::binary_function	access:public
std::binary_function::second_argument_type	stl/stl_function.h	/^  typedef _Arg2 second_argument_type;$/;"	t	struct:std::binary_function	access:public
std::binary_negate	stl/stl_function.h	/^class binary_negate $/;"	c	namespace:std	inherits:binary_function
std::binary_negate::_M_pred	stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:std::binary_negate	access:protected
std::binary_negate::binary_negate	stl/stl_function.h	/^  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::binary_negate	access:public	signature:(const _Predicate& __x)
std::binary_negate::operator ()	stl/stl_function.h	/^  bool operator()(const typename _Predicate::first_argument_type& __x, $/;"	f	class:std::binary_negate	access:public	signature:(const typename _Predicate::first_argument_type& __x, const typename _Predicate::second_argument_type& __y) const
std::binary_search	stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
std::binary_search	stl/stl_algo.h	/^bool binary_search(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
std::bind1st	stl/stl_function.h	/^bind1st(const _Operation& __fn, const _Tp& __x) $/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
std::bind2nd	stl/stl_function.h	/^bind2nd(const _Operation& __fn, const _Tp& __x) $/;"	f	namespace:std	signature:(const _Operation& __fn, const _Tp& __x)
std::binder1st	stl/stl_function.h	/^class binder1st$/;"	c	namespace:std	inherits:unary_function
std::binder1st::binder1st	stl/stl_function.h	/^  binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation& __x, const typename _Operation::first_argument_type& __y)
std::binder1st::op	stl/stl_function.h	/^  _Operation op;$/;"	m	class:std::binder1st	access:protected
std::binder1st::operator ()	stl/stl_function.h	/^  operator()(const typename _Operation::second_argument_type& __x) const {$/;"	f	class:std::binder1st	access:public	signature:(const typename _Operation::second_argument_type& __x) const
std::binder1st::value	stl/stl_function.h	/^  typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	access:protected
std::binder2nd	stl/stl_function.h	/^class binder2nd$/;"	c	namespace:std	inherits:unary_function
std::binder2nd::binder2nd	stl/stl_function.h	/^  binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation& __x, const typename _Operation::second_argument_type& __y)
std::binder2nd::op	stl/stl_function.h	/^  _Operation op;$/;"	m	class:std::binder2nd	access:protected
std::binder2nd::operator ()	stl/stl_function.h	/^  operator()(const typename _Operation::first_argument_type& __x) const {$/;"	f	class:std::binder2nd	access:public	signature:(const typename _Operation::first_argument_type& __x) const
std::binder2nd::value	stl/stl_function.h	/^  typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	access:protected
std::bit_vector	stl/stl_bvector.h	/^typedef vector<bool, alloc> bit_vector;$/;"	t	namespace:std
std::buf	stl/stl_algo.h	/^  _Temporary_buffer<_RandomAccessIter, _Tp> buf(__first, __last);$/;"	p	signature:(__first, __last)
std::char_producer	stl/stl_rope.h	/^class char_producer {$/;"	c	namespace:std
std::char_producer::operator ()	stl/stl_rope.h	/^        virtual void operator()(size_t __start_pos, size_t __len, $/;"	p	class:std::char_producer	access:public	signature:(size_t __start_pos, size_t __len, _CharT* __buffer)
std::char_producer::~char_producer	stl/stl_rope.h	/^        virtual ~char_producer() {};$/;"	f	class:std::char_producer	access:public	signature:()
std::char_traits	stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<char> $/;"	c	namespace:std	inherits:__char_traits_base
std::char_traits	stl/char_traits.h	/^__STL_TEMPLATE_NULL class char_traits<wchar_t>$/;"	c	namespace:std	inherits:__char_traits_base
std::char_traits	stl/char_traits.h	/^template <class _CharT> class char_traits$/;"	c	namespace:std	inherits:__char_traits_base
std::char_traits::assign	stl/char_traits.h	/^  static char* assign(char* __s, size_t __n, char __c)$/;"	f	class:std::char_traits	access:public	signature:(char* __s, size_t __n, char __c)
std::char_traits::assign	stl/char_traits.h	/^  static void assign(char& __c1, const char& __c2) { __c1 = __c2; }$/;"	f	class:std::char_traits	access:public	signature:(char& __c1, const char& __c2)
std::char_traits::compare	stl/char_traits.h	/^  static int compare(const char* __s1, const char* __s2, size_t __n) $/;"	f	class:std::char_traits	access:public	signature:(const char* __s1, const char* __s2, size_t __n)
std::char_traits::length	stl/char_traits.h	/^  static size_t length(const char* __s) { return strlen(__s); }$/;"	f	class:std::char_traits	access:public	signature:(const char* __s)
std::char_traits::to_char_type	stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:std::char_traits	access:public	signature:(const int_type& __c)
std::char_traits::to_int_type	stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:std::char_traits	access:public	signature:(const char_type& __c)
std::clear	stl/stl_deque.h	/^  __STL_UNWIND(clear());$/;"	p	signature:()
std::clear	stl/stl_hashtable.h	/^  _M_buckets.clear();$/;"	p	signature:()
std::clear	stl/stl_hashtable.h	/^  __STL_UNWIND(clear());$/;"	p	signature:()
std::compose1	stl/stl_function.h	/^compose1(const _Operation1& __fn1, const _Operation2& __fn2)$/;"	f	namespace:std	signature:(const _Operation1& __fn1, const _Operation2& __fn2)
std::compose2	stl/stl_function.h	/^compose2(const _Operation1& __fn1, const _Operation2& __fn2, $/;"	f	namespace:std	signature:(const _Operation1& __fn1, const _Operation2& __fn2, const _Operation3& __fn3)
std::const_cast	stl/stl_hashtable.h	/^                 const_cast<hashtable*>(__last._M_ht)));$/;"	p	signature:(__last._M_ht)
std::const_cast	stl/stl_hashtable.h	/^        iterator(const_cast<_Node*>(__last._M_cur),$/;"	p	signature:(__last._M_cur)
std::const_iterator	stl/stl_list.h	/^  typedef typename list<_Tp,_Alloc>::const_iterator const_iterator;$/;"	t
std::const_iterator	stl/stl_slist.h	/^  typedef typename slist<_Tp,_Alloc>::const_iterator const_iterator;$/;"	t
std::const_mem_fun1_ref_t	stl/stl_function.h	/^class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_ref_t	stl/stl_function.h	/^class const_mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
std::const_mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_ref_t	access:private
std::const_mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	p	signature:(__x)
std::const_mem_fun1_ref_t::_Ret	stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun1_ref_t::const_mem_fun1_ref_t	stl/stl_function.h	/^  explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
std::const_mem_fun1_ref_t::operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
std::const_mem_fun1_ref_t::operator ()	stl/stl_function.h	/^  void operator()(const _Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(const _Tp& __r, _Arg __x) const
std::const_mem_fun1_t	stl/stl_function.h	/^class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_t	stl/stl_function.h	/^class const_mem_fun1_t<void, _Tp, _Arg> $/;"	c	namespace:std	inherits:binary_function
std::const_mem_fun1_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
std::const_mem_fun1_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg) const;$/;"	m	class:std::const_mem_fun1_t	access:private
std::const_mem_fun1_t::_M_f	stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	p	signature:(__x)
std::const_mem_fun1_t::_Ret	stl/stl_function.h	/^  explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun1_t::const_mem_fun1_t	stl/stl_function.h	/^  explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg) const)
std::const_mem_fun1_t::operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
std::const_mem_fun1_t::operator ()	stl/stl_function.h	/^  void operator()(const _Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(const _Tp* __p, _Arg __x) const
std::const_mem_fun_ref_t	stl/stl_function.h	/^class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_ref_t	stl/stl_function.h	/^class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_ref_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
std::const_mem_fun_ref_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_ref_t	access:private
std::const_mem_fun_ref_t::_M_f	stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	p	signature:()
std::const_mem_fun_ref_t::_Ret	stl/stl_function.h	/^  explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun_ref_t::const_mem_fun_ref_t	stl/stl_function.h	/^  explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)() const)
std::const_mem_fun_ref_t::operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
std::const_mem_fun_ref_t::operator ()	stl/stl_function.h	/^  void operator()(const _Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(const _Tp& __r) const
std::const_mem_fun_t	stl/stl_function.h	/^class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_t	stl/stl_function.h	/^class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {$/;"	c	namespace:std	inherits:unary_function
std::const_mem_fun_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
std::const_mem_fun_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)() const;$/;"	m	class:std::const_mem_fun_t	access:private
std::const_mem_fun_t::_M_f	stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	p	signature:()
std::const_mem_fun_t::_Ret	stl/stl_function.h	/^  explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Tp::*__pf) const
std::const_mem_fun_t::const_mem_fun_t	stl/stl_function.h	/^  explicit const_mem_fun_t(void (_Tp::*__pf)() const) : _M_f(__pf) {}$/;"	f	class:std::const_mem_fun_t	access:public	signature:(void (_Tp::*__pf)() const)
std::const_mem_fun_t::operator ()	stl/stl_function.h	/^  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
std::const_mem_fun_t::operator ()	stl/stl_function.h	/^  void operator()(const _Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:std::const_mem_fun_t	access:public	signature:(const _Tp* __p) const
std::constant0	stl/stl_function.h	/^inline constant_void_fun<_Result> constant0(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
std::constant1	stl/stl_function.h	/^inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
std::constant2	stl/stl_function.h	/^constant2(const _Result& __val)$/;"	f	namespace:std	signature:(const _Result& __val)
std::constant_binary_fun	stl/stl_function.h	/^struct constant_binary_fun$/;"	s	namespace:std	inherits:_Constant_binary_fun
std::constant_binary_fun::constant_binary_fun	stl/stl_function.h	/^  constant_binary_fun(const _Result& __v)$/;"	f	struct:std::constant_binary_fun	access:public	signature:(const _Result& __v)
std::constant_unary_fun	stl/stl_function.h	/^struct constant_unary_fun : public _Constant_unary_fun<_Result, _Argument>$/;"	s	namespace:std	inherits:_Constant_unary_fun
std::constant_unary_fun::constant_unary_fun	stl/stl_function.h	/^  constant_unary_fun(const _Result& __v)$/;"	f	struct:std::constant_unary_fun	access:public	signature:(const _Result& __v)
std::constant_void_fun	stl/stl_function.h	/^struct constant_void_fun : public _Constant_void_fun<_Result> {$/;"	s	namespace:std	inherits:_Constant_void_fun
std::constant_void_fun::constant_void_fun	stl/stl_function.h	/^  constant_void_fun(const _Result& __v) : _Constant_void_fun<_Result>(__v) {}$/;"	f	struct:std::constant_void_fun	access:public	signature:(const _Result& __v)
std::construct	stl/stl_alloc.h	/^  void construct(pointer __p, const _Tp& __val) { new(__p) _Tp(__val); }$/;"	f	namespace:std	signature:(pointer __p, const _Tp& __val)
std::construct	stl/stl_construct.h	/^inline void construct(_T1* __p) {$/;"	f	namespace:std	signature:(_T1* __p)
std::construct	stl/stl_construct.h	/^inline void construct(_T1* __p, const _T2& __value) {$/;"	f	namespace:std	signature:(_T1* __p, const _T2& __value)
std::copy	stl/stl_algobase.h	/^inline _OutputIter copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
std::copy_backward	stl/stl_algobase.h	/^inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) {$/;"	f	namespace:std	signature:(_BI1 __first, _BI1 __last, _BI2 __result)
std::copy_n	stl/stl_algobase.h	/^copy_n(_InputIter __first, _Size __count, _OutputIter __result) {$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _OutputIter __result)
std::count	stl/stl_algo.h	/^count(_InputIter __first, _InputIter __last, const _Tp& __value) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __value)
std::count	stl/stl_algo.h	/^void count(_InputIter __first, _InputIter __last, const _Tp& __value,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __value, _Size& __n)
std::count_if	stl/stl_algo.h	/^count_if(_InputIter __first, _InputIter __last, _Predicate __pred) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
std::count_if	stl/stl_algo.h	/^void count_if(_InputIter __first, _InputIter __last, _Predicate __pred,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, _Size& __n)
std::crope	stl/stl_rope.h	/^typedef rope<char> crope;$/;"	t	namespace:std
std::deallocate	stl/ropeimpl.h	/^        __a.deallocate($/;"	p	signature:( __s, _Rope_RopeLeaf<_CharT,_Alloc>::_S_rounded_up_size(__n))
std::deallocate	stl/stl_alloc.h	/^    { __underlying_alloc.deallocate(__p, __n * sizeof(_Tp)); }$/;"	p	signature:(__p, __n * sizeof(_Tp))
std::deallocate	stl/stl_alloc.h	/^  void deallocate(pointer __p, size_type __n)$/;"	f	namespace:std	signature:(pointer __p, size_type __n)
std::debug_alloc	stl/stl_alloc.h	/^class debug_alloc {$/;"	c	namespace:std
std::debug_alloc::_Alloc::deallocate	stl/stl_alloc.h	/^    _Alloc::deallocate(__real_p, __n + (int) _S_extra);$/;"	p	class:std::debug_alloc::_Alloc	signature:(__real_p, __n + (int) _S_extra)
std::debug_alloc::_S_extra	stl/stl_alloc.h	/^  enum {_S_extra = 8};  \/\/ Size of space used to store size.  Note$/;"	e	enum:std::debug_alloc::__anon8
std::debug_alloc::__real_p	stl/stl_alloc.h	/^    char* __real_p = (char*)__p - (int) _S_extra;$/;"	l
std::debug_alloc::__result	stl/stl_alloc.h	/^    char* __result = (char*)$/;"	l
std::debug_alloc::__result	stl/stl_alloc.h	/^    char* __result = (char*)_Alloc::allocate(__n + (int) _S_extra);$/;"	l
std::debug_alloc::allocate	stl/stl_alloc.h	/^  static void* allocate(size_t __n)$/;"	f	class:std::debug_alloc	access:public	signature:(size_t __n)
std::debug_alloc::deallocate	stl/stl_alloc.h	/^  static void deallocate(void* __p, size_t __n)$/;"	f	class:std::debug_alloc	access:public	signature:(void* __p, size_t __n)
std::debug_alloc::reallocate	stl/stl_alloc.h	/^  static void* reallocate(void* __p, size_t __old_sz, size_t __new_sz)$/;"	f	class:std::debug_alloc	access:public	signature:(void* __p, size_t __old_sz, size_t __new_sz)
std::deque	stl/stl_deque.h	/^class deque : protected _Deque_base<_Tp, _Alloc> {$/;"	c	namespace:std	inherits:_Deque_base
std::deque::_Base	stl/stl_deque.h	/^  typedef _Deque_base<_Tp, _Alloc> _Base;$/;"	t	class:std::deque	access:private
std::deque::_Integral	stl/stl_deque.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
std::deque::_M_assign_aux	stl/stl_deque.h	/^  ::_M_assign_aux(_InputIter __first, _InputIter __last, input_iterator_tag)$/;"	f	class:std::deque	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
std::deque::_M_assign_aux	stl/stl_deque.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	class:std::deque	access:private	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::deque::_M_assign_aux	stl/stl_deque.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:private	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::deque::_M_assign_dispatch	stl/stl_deque.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:private	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::deque::_M_assign_dispatch	stl/stl_deque.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::deque	access:private	signature:(_Integer __n, _Integer __val, __true_type)
std::deque::_M_fill_assign	stl/stl_deque.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::deque	access:public	signature:(size_type __n, const _Tp& __val)
std::deque::_M_fill_initialize	stl/stl_deque.h	/^  void _M_fill_initialize(const value_type& __value);$/;"	p	class:std::deque	access:protected	signature:(const value_type& __value)
std::deque::_M_fill_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_fill_initialize(const value_type& __value) {$/;"	f	class:std::deque	signature:(const value_type& __value)
std::deque::_M_fill_insert	stl/stl_deque.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const value_type& __x); $/;"	p	class:std::deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_fill_insert	stl/stl_deque.h	/^void deque<_Tp, _Alloc>::_M_fill_insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_finish	stl/stl_deque.h	/^        erase(copy(__x.begin(), __x.end(), _M_start), _M_finish);$/;"	l
std::deque::_M_initialize_dispatch	stl/stl_deque.h	/^  void _M_initialize_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:std::deque	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
std::deque::_M_initialize_dispatch	stl/stl_deque.h	/^  void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type) {$/;"	f	class:std::deque	access:public	signature:(_Integer __n, _Integer __x, __true_type)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  iterator _M_insert_aux(iterator __pos, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type& __x)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, $/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_insert_aux	stl/stl_deque.h	/^  void _M_insert_aux(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos)$/;"	f	class:std::deque	signature:(iterator __pos)
std::deque::_M_insert_aux	stl/stl_deque.h	/^deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos, const value_type& __x)$/;"	f	class:std::deque	signature:(iterator __pos, const value_type& __x)
std::deque::_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const value_type* __first, const value_type* __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const_iterator __first, const_iterator __last, size_type __n)
std::deque::_M_insert_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_insert_aux(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::_M_insert_dispatch	stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
std::deque::_M_insert_dispatch	stl/stl_deque.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::deque::_M_new_elements_at_back	stl/stl_deque.h	/^  void _M_new_elements_at_back(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
std::deque::_M_new_elements_at_back	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_back(size_type __new_elems)$/;"	f	class:std::deque	signature:(size_type __new_elems)
std::deque::_M_new_elements_at_front	stl/stl_deque.h	/^  void _M_new_elements_at_front(size_type __new_elements);$/;"	p	class:std::deque	access:protected	signature:(size_type __new_elements)
std::deque::_M_new_elements_at_front	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_new_elements_at_front(size_type __new_elems)$/;"	f	class:std::deque	signature:(size_type __new_elems)
std::deque::_M_pop_back_aux	stl/stl_deque.h	/^  void _M_pop_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_pop_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_back_aux()$/;"	f	class:std::deque	signature:()
std::deque::_M_pop_front_aux	stl/stl_deque.h	/^  void _M_pop_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_pop_front_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_pop_front_aux()$/;"	f	class:std::deque	signature:()
std::deque::_M_push_back_aux	stl/stl_deque.h	/^  void _M_push_back_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_push_back_aux	stl/stl_deque.h	/^  void _M_push_back_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
std::deque::_M_push_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux()$/;"	f	class:std::deque	signature:()
std::deque::_M_push_back_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_back_aux(const value_type& __t)$/;"	f	class:std::deque	signature:(const value_type& __t)
std::deque::_M_push_front_aux	stl/stl_deque.h	/^  void _M_push_front_aux();$/;"	p	class:std::deque	access:protected	signature:()
std::deque::_M_push_front_aux	stl/stl_deque.h	/^  void _M_push_front_aux(const value_type&);$/;"	p	class:std::deque	access:protected	signature:(const value_type&)
std::deque::_M_push_front_aux	stl/stl_deque.h	/^void  deque<_Tp,_Alloc>::_M_push_front_aux(const value_type& __t)$/;"	f	class:std::deque	signature:(const value_type& __t)
std::deque::_M_push_front_aux	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_push_front_aux()$/;"	f	class:std::deque	signature:()
std::deque::_M_range_check	stl/stl_deque.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
std::deque::_M_range_initialize	stl/stl_deque.h	/^  void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::deque::_M_range_initialize	stl/stl_deque.h	/^  void _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::deque::_M_range_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::deque	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::deque::_M_range_initialize	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_range_initialize(_InputIterator __first,$/;"	f	class:std::deque	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::deque::_M_reallocate_map	stl/stl_deque.h	/^  void _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	p	class:std::deque	access:protected	signature:(size_type __nodes_to_add, bool __add_at_front)
std::deque::_M_reallocate_map	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::_M_reallocate_map(size_type __nodes_to_add,$/;"	f	class:std::deque	signature:(size_type __nodes_to_add, bool __add_at_front)
std::deque::_M_reserve_elements_at_back	stl/stl_deque.h	/^  iterator _M_reserve_elements_at_back(size_type __n) {$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
std::deque::_M_reserve_elements_at_front	stl/stl_deque.h	/^  iterator _M_reserve_elements_at_front(size_type __n) {$/;"	f	class:std::deque	access:protected	signature:(size_type __n)
std::deque::_M_reserve_map_at_back	stl/stl_deque.h	/^  void _M_reserve_map_at_back (size_type __nodes_to_add = 1) {$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
std::deque::_M_reserve_map_at_front	stl/stl_deque.h	/^  void _M_reserve_map_at_front (size_type __nodes_to_add = 1) {$/;"	f	class:std::deque	access:protected	signature:(size_type __nodes_to_add = 1)
std::deque::_Map_pointer	stl/stl_deque.h	/^  typedef pointer* _Map_pointer;$/;"	t	class:std::deque	access:protected
std::deque::_S_buffer_size	stl/stl_deque.h	/^  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }$/;"	f	class:std::deque	access:protected	signature:()
std::deque::__STD::swap	stl/stl_deque.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::deque::__STD	signature:(_M_finish, __x._M_finish)
std::deque::__STD::swap	stl/stl_deque.h	/^    __STD::swap(_M_map, __x._M_map);$/;"	p	class:std::deque::__STD	signature:(_M_map, __x._M_map)
std::deque::__STD::swap	stl/stl_deque.h	/^    __STD::swap(_M_map_size, __x._M_map_size);$/;"	p	class:std::deque::__STD	signature:(_M_map_size, __x._M_map_size)
std::deque::__STD::swap	stl/stl_deque.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::deque::__STD	signature:(_M_start, __x._M_start)
std::deque::__STL_CLASS_REQUIRES	stl/stl_deque.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::deque	access:private	signature:(_Tp, _Assignable)
std::deque::__index	stl/stl_deque.h	/^    difference_type __index = __pos - _M_start;$/;"	l
std::deque::__last	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	l
std::deque::__len	stl/stl_deque.h	/^    const size_type __len = size();$/;"	l
std::deque::__len	stl/stl_deque.h	/^    size_type __len = 0;$/;"	l
std::deque::__mid	stl/stl_deque.h	/^        const_iterator __mid = __x.begin() + difference_type(__len);$/;"	l
std::deque::__mid	stl/stl_deque.h	/^      _ForwardIterator __mid = __first;$/;"	l
std::deque::__mid	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	l
std::deque::__next	stl/stl_deque.h	/^    iterator __next = __pos;$/;"	l
std::deque::__tmp	stl/stl_deque.h	/^      iterator __tmp = _M_finish;$/;"	l
std::deque::__tmp	stl/stl_deque.h	/^    const_iterator __tmp = _M_finish;$/;"	l
std::deque::__tmp	stl/stl_deque.h	/^    iterator __tmp = _M_finish;$/;"	l
std::deque::__vacancies	stl/stl_deque.h	/^    size_type __vacancies = (_M_finish._M_last - _M_finish._M_cur) - 1;$/;"	l
std::deque::__vacancies	stl/stl_deque.h	/^    size_type __vacancies = _M_start._M_cur - _M_start._M_first;$/;"	l
std::deque::__val	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	l
std::deque::__val	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	l
std::deque::allocator_type	stl/stl_deque.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::deque	access:public
std::deque::assign	stl/stl_deque.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::deque::assign	stl/stl_deque.h	/^  void assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::deque	access:public	signature:(size_type __n, const _Tp& __val)
std::deque::at	stl/stl_deque.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::deque	access:public	signature:(size_type __n) const
std::deque::at	stl/stl_deque.h	/^  reference at(size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
std::deque::back	stl/stl_deque.h	/^  const_reference back() const {$/;"	f	class:std::deque	access:public	signature:() const
std::deque::back	stl/stl_deque.h	/^  reference back() {$/;"	f	class:std::deque	access:public	signature:()
std::deque::begin	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	p	signature:()
std::deque::begin	stl/stl_deque.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::begin	stl/stl_deque.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::deque	access:public	signature:()
std::deque::clear	stl/stl_deque.h	/^  void clear(); $/;"	p	class:std::deque	access:public	signature:()
std::deque::clear	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::clear()$/;"	f	class:std::deque	signature:()
std::deque::const_iterator	stl/stl_deque.h	/^  typedef typename _Base::const_iterator const_iterator;$/;"	t	class:std::deque	access:public
std::deque::const_pointer	stl/stl_deque.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::deque	access:public
std::deque::const_reference	stl/stl_deque.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::deque	access:public
std::deque::const_reverse_iterator	stl/stl_deque.h	/^          const_reverse_iterator;$/;"	t	class:std::deque	access:public
std::deque::const_reverse_iterator	stl/stl_deque.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::deque	access:public
std::deque::copy	stl/stl_deque.h	/^        erase(copy(__x.begin(), __x.end(), _M_start), _M_finish);$/;"	p	signature:(__x.begin(), __x.end(), _M_start)
std::deque::copy	stl/stl_deque.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:(__first, __last, begin())
std::deque::deque	stl/stl_deque.h	/^  deque(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::deque	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^  deque(const deque& __x) : _Base(__x.get_allocator(), __x.size()) $/;"	f	class:std::deque	access:public	signature:(const deque& __x)
std::deque::deque	stl/stl_deque.h	/^  deque(const value_type* __first, const value_type* __last,$/;"	f	class:std::deque	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^  deque(const_iterator __first, const_iterator __last,$/;"	f	class:std::deque	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^  deque(size_type __n, const value_type& __value,$/;"	f	class:std::deque	access:public	signature:(size_type __n, const value_type& __value, const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^  explicit deque(const allocator_type& __a = allocator_type()) $/;"	f	class:std::deque	access:public	signature:(const allocator_type& __a = allocator_type())
std::deque::deque	stl/stl_deque.h	/^  explicit deque(size_type __n) : _Base(allocator_type(), __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
std::deque::difference_type	stl/stl_deque.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::deque	access:public
std::deque::empty	stl/stl_deque.h	/^  bool empty() const { return _M_finish == _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::end	stl/stl_deque.h	/^      erase(copy(__first, __last, begin()), end());$/;"	p	signature:()
std::deque::end	stl/stl_deque.h	/^      fill(begin(), end(), __val);$/;"	p	signature:()
std::deque::end	stl/stl_deque.h	/^      insert(end(), __mid, __last);$/;"	p	signature:()
std::deque::end	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	p	signature:()
std::deque::end	stl/stl_deque.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::end	stl/stl_deque.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::deque	access:public	signature:()
std::deque::erase	stl/stl_deque.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:std::deque	access:public	signature:(iterator __first, iterator __last)
std::deque::erase	stl/stl_deque.h	/^  iterator erase(iterator __pos) {$/;"	f	class:std::deque	access:public	signature:(iterator __pos)
std::deque::erase	stl/stl_deque.h	/^deque<_Tp,_Alloc>::erase(iterator __first, iterator __last)$/;"	f	class:std::deque	signature:(iterator __first, iterator __last)
std::deque::front	stl/stl_deque.h	/^  const_reference front() const { return *_M_start; }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::front	stl/stl_deque.h	/^  reference front() { return *_M_start; }$/;"	f	class:std::deque	access:public	signature:()
std::deque::get_allocator	stl/stl_deque.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::insert	stl/stl_deque.h	/^  iterator insert(iterator __position)$/;"	f	class:std::deque	access:public	signature:(iterator __position)
std::deque::insert	stl/stl_deque.h	/^  iterator insert(iterator position, const value_type& __x) {$/;"	f	class:std::deque	access:public	signature:(iterator position, const value_type& __x)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::deque	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x)$/;"	f	class:std::deque	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
std::deque::insert	stl/stl_deque.h	/^  void insert(iterator __pos,$/;"	p	class:std::deque	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
std::deque::insert	stl/stl_deque.h	/^deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::deque::insert	stl/stl_deque.h	/^void deque<_Tp, _Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const value_type* __first, const value_type* __last)
std::deque::insert	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
std::deque::insert	stl/stl_deque.h	/^void deque<_Tp,_Alloc>::insert(iterator __pos,$/;"	f	class:std::deque	signature:(iterator __pos, const_iterator __first, const_iterator __last)
std::deque::iterator	stl/stl_deque.h	/^  typedef typename _Base::iterator       iterator;$/;"	t	class:std::deque	access:public
std::deque::max_size	stl/stl_deque.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::operator =	stl/stl_deque.h	/^  deque& operator= (const deque& __x) {$/;"	f	class:std::deque	access:public	signature:(const deque& __x)
std::deque::operator []	stl/stl_deque.h	/^  const_reference operator[](size_type __n) const $/;"	f	class:std::deque	access:public	signature:(size_type __n) const
std::deque::operator []	stl/stl_deque.h	/^  reference operator[](size_type __n)$/;"	f	class:std::deque	access:public	signature:(size_type __n)
std::deque::pointer	stl/stl_deque.h	/^  typedef value_type* pointer;$/;"	t	class:std::deque	access:public
std::deque::pop_back	stl/stl_deque.h	/^  void pop_back() {$/;"	f	class:std::deque	access:public	signature:()
std::deque::pop_front	stl/stl_deque.h	/^  void pop_front() {$/;"	f	class:std::deque	access:public	signature:()
std::deque::push_back	stl/stl_deque.h	/^  void push_back() {$/;"	f	class:std::deque	access:public	signature:()
std::deque::push_back	stl/stl_deque.h	/^  void push_back(const value_type& __t) {$/;"	f	class:std::deque	access:public	signature:(const value_type& __t)
std::deque::push_front	stl/stl_deque.h	/^  void push_front() {$/;"	f	class:std::deque	access:public	signature:()
std::deque::push_front	stl/stl_deque.h	/^  void push_front(const value_type& __t) {$/;"	f	class:std::deque	access:public	signature:(const value_type& __t)
std::deque::rbegin	stl/stl_deque.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:std::deque	access:public	signature:() const
std::deque::rbegin	stl/stl_deque.h	/^  reverse_iterator rbegin() { return reverse_iterator(_M_finish); }$/;"	f	class:std::deque	access:public	signature:()
std::deque::reference	stl/stl_deque.h	/^  typedef value_type& reference;$/;"	t	class:std::deque	access:public
std::deque::rend	stl/stl_deque.h	/^  const_reverse_iterator rend() const $/;"	f	class:std::deque	access:public	signature:() const
std::deque::rend	stl/stl_deque.h	/^  reverse_iterator rend() { return reverse_iterator(_M_start); }$/;"	f	class:std::deque	access:public	signature:()
std::deque::resize	stl/stl_deque.h	/^  void resize(size_type __new_size, const value_type& __x) {$/;"	f	class:std::deque	access:public	signature:(size_type __new_size, const value_type& __x)
std::deque::resize	stl/stl_deque.h	/^  void resize(size_type new_size) { resize(new_size, value_type()); }$/;"	f	class:std::deque	access:public	signature:(size_type new_size)
std::deque::reverse_iterator	stl/stl_deque.h	/^          reverse_iterator; $/;"	t	class:std::deque	access:public
std::deque::reverse_iterator	stl/stl_deque.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::deque	access:public
std::deque::size	stl/stl_deque.h	/^      insert(end(), __n - size(), __val);$/;"	p	signature:()
std::deque::size	stl/stl_deque.h	/^  size_type size() const { return _M_finish - _M_start; }$/;"	f	class:std::deque	access:public	signature:() const
std::deque::size_type	stl/stl_deque.h	/^  typedef size_t size_type;$/;"	t	class:std::deque	access:public
std::deque::swap	stl/stl_deque.h	/^  void swap(deque& __x) {$/;"	f	class:std::deque	access:public	signature:(deque& __x)
std::deque::value_type	stl/stl_deque.h	/^    { _M_fill_initialize(value_type()); }$/;"	p	signature:()
std::deque::value_type	stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	class:std::deque	access:public
std::deque::~deque	stl/stl_deque.h	/^  ~deque() { destroy(_M_start, _M_finish); }$/;"	f	class:std::deque	access:public	signature:()
std::destroy	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	f	namespace:std	signature:(pointer __p)
std::destroy	stl/stl_construct.h	/^inline void destroy(_ForwardIterator __first, _ForwardIterator __last) {$/;"	f	namespace:std	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::destroy	stl/stl_construct.h	/^inline void destroy(_Tp* __pointer) {$/;"	f	namespace:std	signature:(_Tp* __pointer)
std::destroy	stl/stl_deque.h	/^  __STL_UNWIND(destroy(_M_start, iterator(*__cur, __cur)));$/;"	p	signature:(_M_start, iterator(*__cur, __cur))
std::destroy	stl/stl_deque.h	/^  __STL_UNWIND(destroy(_M_start, iterator(*__cur_node, __cur_node)));$/;"	p	signature:(_M_start, iterator(*__cur_node, __cur_node))
std::distance	stl/stl_iterator_base.h	/^distance(_InputIterator __first, _InputIterator __last) {$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last)
std::distance	stl/stl_iterator_base.h	/^inline void distance(_InputIterator __first, $/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _Distance& __n)
std::distance_type	stl/stl_deque.h	/^inline ptrdiff_t* distance_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) {$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
std::distance_type	stl/stl_hashtable.h	/^distance_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
std::distance_type	stl/stl_hashtable.h	/^distance_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
std::distance_type	stl/stl_iterator.h	/^distance_type(const istream_iterator<_Tp, _Dist>&) { return (_Dist*)0; }$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
std::distance_type	stl/stl_iterator.h	/^distance_type(const reverse_bidirectional_iterator<_BidirectionalIterator, $/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
std::distance_type	stl/stl_iterator.h	/^distance_type(const reverse_iterator<_RandomAccessIterator, $/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
std::distance_type	stl/stl_iterator_base.h	/^distance_type(const _Iter& __i) { return __distance_type(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
std::distance_type	stl/stl_iterator_base.h	/^distance_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
std::distance_type	stl/stl_iterator_base.h	/^distance_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
std::distance_type	stl/stl_iterator_base.h	/^inline _Distance* distance_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
std::distance_type	stl/stl_iterator_base.h	/^inline _Distance* distance_type(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
std::distance_type	stl/stl_iterator_base.h	/^inline ptrdiff_t* distance_type(const _Tp*) { return (ptrdiff_t*)(0); }$/;"	f	namespace:std	signature:(const _Tp*)
std::distance_type	stl/stl_list.h	/^distance_type(const _List_iterator_base&)$/;"	f	namespace:std	signature:(const _List_iterator_base&)
std::distance_type	stl/stl_slist.h	/^inline ptrdiff_t* distance_type(const _Slist_iterator_base&) {$/;"	f	namespace:std	signature:(const _Slist_iterator_base&)
std::distance_type	stl/stl_tree.h	/^distance_type(const _Rb_tree_base_iterator&) {$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator&)
std::divides	stl/stl_function.h	/^struct divides : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
std::divides::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x \/ __y; }$/;"	f	struct:std::divides	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::end	stl/stl_deque.h	/^    insert(end(), __first, __last);$/;"	p	signature:()
std::end	stl/stl_list.h	/^    insert(end(), __n, __val);$/;"	p	signature:()
std::end	stl/stl_list.h	/^    insert(end(), __new_size - __len, __x);$/;"	p	signature:()
std::end	stl/stl_vector.h	/^    destroy(begin(), end());$/;"	p	signature:()
std::end	stl/stl_vector.h	/^    fill(begin(), end(), __val);$/;"	p	signature:()
std::end	stl/stl_vector.h	/^    insert(end(), __first, __last);$/;"	p	signature:()
std::equal	stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
std::equal	stl/stl_algobase.h	/^inline bool equal(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
std::equal_range	stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
std::equal_range	stl/stl_algo.h	/^equal_range(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
std::equal_to	stl/stl_function.h	/^struct equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
std::equal_to::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }$/;"	f	struct:std::equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::fill	stl/stl_algobase.h	/^inline void fill(char* __first, char* __last, const char& __c) {$/;"	f	namespace:std	signature:(char* __first, char* __last, const char& __c)
std::fill	stl/stl_algobase.h	/^inline void fill(signed char* __first, signed char* __last,$/;"	f	namespace:std	signature:(signed char* __first, signed char* __last, const signed char& __c)
std::fill	stl/stl_algobase.h	/^inline void fill(unsigned char* __first, unsigned char* __last,$/;"	f	namespace:std	signature:(unsigned char* __first, unsigned char* __last, const unsigned char& __c)
std::fill	stl/stl_algobase.h	/^void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __value) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
std::fill_n	stl/stl_algobase.h	/^_OutputIter fill_n(_OutputIter __first, _Size __n, const _Tp& __value) {$/;"	f	namespace:std	signature:(_OutputIter __first, _Size __n, const _Tp& __value)
std::fill_n	stl/stl_algobase.h	/^inline char* fill_n(char* __first, _Size __n, const char& __c) {$/;"	f	namespace:std	signature:(char* __first, _Size __n, const char& __c)
std::fill_n	stl/stl_algobase.h	/^inline signed char* fill_n(char* __first, _Size __n,$/;"	f	namespace:std	signature:(char* __first, _Size __n, const signed char& __c)
std::fill_n	stl/stl_algobase.h	/^inline unsigned char* fill_n(unsigned char* __first, _Size __n,$/;"	f	namespace:std	signature:(unsigned char* __first, _Size __n, const unsigned char& __c)
std::find	stl/stl_algo.h	/^_RandomAccessIter find(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, const _Tp& __val, random_access_iterator_tag)
std::find	stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __val)
std::find	stl/stl_algo.h	/^inline _InputIter find(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, const _Tp& __val, input_iterator_tag)
std::find_end	stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
std::find_end	stl/stl_algo.h	/^find_end(_ForwardIter1 __first1, _ForwardIter1 __last1, $/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPredicate __comp)
std::find_first_of	stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2)
std::find_first_of	stl/stl_algo.h	/^_InputIter find_first_of(_InputIter __first1, _InputIter __last1,$/;"	f	namespace:std	signature:(_InputIter __first1, _InputIter __last1, _ForwardIter __first2, _ForwardIter __last2, _BinaryPredicate __comp)
std::find_if	stl/stl_algo.h	/^_RandomAccessIter find_if(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Predicate __pred, random_access_iterator_tag)
std::find_if	stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred)
std::find_if	stl/stl_algo.h	/^inline _InputIter find_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Predicate __pred, input_iterator_tag)
std::for_each	stl/stl_algo.h	/^_Function for_each(_InputIter __first, _InputIter __last, _Function __f) {$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _Function __f)
std::forward_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct forward_iterator {$/;"	s	namespace:std
std::forward_iterator::difference_type	stl/stl_iterator_base.h	/^  typedef _Distance            difference_type;$/;"	t	struct:std::forward_iterator	access:public
std::forward_iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef forward_iterator_tag iterator_category;$/;"	t	struct:std::forward_iterator	access:public
std::forward_iterator::pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                 pointer;$/;"	t	struct:std::forward_iterator	access:public
std::forward_iterator::reference	stl/stl_iterator_base.h	/^  typedef _Tp&                 reference;$/;"	t	struct:std::forward_iterator	access:public
std::forward_iterator::value_type	stl/stl_iterator_base.h	/^  typedef _Tp                  value_type;$/;"	t	struct:std::forward_iterator	access:public
std::forward_iterator_tag	stl/stl_iterator_base.h	/^struct forward_iterator_tag : public input_iterator_tag {};$/;"	s	namespace:std	inherits:input_iterator_tag
std::front	stl/stl_deque.h	/^    push_front(front());$/;"	p	signature:()
std::front_insert_iterator	stl/stl_iterator.h	/^class front_insert_iterator {$/;"	c	namespace:std
std::front_insert_iterator::container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::front_insert_iterator	access:protected
std::front_insert_iterator::container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::front_insert_iterator	stl/stl_iterator.h	/^  explicit front_insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::front_insert_iterator	access:public	signature:(_Container& __x)
std::front_insert_iterator::iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::operator *	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
std::front_insert_iterator::operator ++	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
std::front_insert_iterator::operator ++	stl/stl_iterator.h	/^  front_insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::front_insert_iterator	access:public	signature:(int)
std::front_insert_iterator::operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::front_insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::front_insert_iterator::pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::push_front	stl/stl_iterator.h	/^    container->push_front(__value);$/;"	p	signature:(__value)
std::front_insert_iterator::reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::front_insert_iterator	access:public
std::front_insert_iterator::value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::front_insert_iterator	access:public
std::front_inserter	stl/stl_iterator.h	/^inline front_insert_iterator<_Container> front_inserter(_Container& __x) {$/;"	f	namespace:std	signature:(_Container& __x)
std::generate	stl/stl_algo.h	/^void generate(_ForwardIter __first, _ForwardIter __last, _Generator __gen) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Generator __gen)
std::generate_n	stl/stl_algo.h	/^_OutputIter generate_n(_OutputIter __first, _Size __n, _Generator __gen) {$/;"	f	namespace:std	signature:(_OutputIter __first, _Size __n, _Generator __gen)
std::get_temporary_buffer	stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) {$/;"	f	namespace:std	signature:(ptrdiff_t __len)
std::get_temporary_buffer	stl/stl_tempbuf.h	/^inline pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len, _Tp*) {$/;"	f	namespace:std	signature:(ptrdiff_t __len, _Tp*)
std::greater	stl/stl_function.h	/^struct greater : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
std::greater::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }$/;"	f	struct:std::greater	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::greater_equal	stl/stl_function.h	/^struct greater_equal : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
std::greater_equal::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }$/;"	f	struct:std::greater_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char*>$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<char> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<const char*>$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<int> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<long> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<short> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<signed char> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned char> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned int> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned long> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^__STL_TEMPLATE_NULL struct hash<unsigned short> {$/;"	s	namespace:std
std::hash	stl/stl_hash_fun.h	/^template <class _Key> struct hash { };$/;"	s	namespace:std
std::hash	stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<crope>$/;"	s	namespace:std
std::hash	stl/stl_rope.h	/^__STL_TEMPLATE_NULL struct hash<wrope>$/;"	s	namespace:std
std::hash::__size	stl/stl_rope.h	/^    size_t __size = __str.size();$/;"	l
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(char __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(char __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }$/;"	f	struct:std::hash	access:public	signature:(const char* __s) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(int __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(int __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(long __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(long __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(short __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(short __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned char __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned char __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned int __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned int __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned long __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned long __x) const
std::hash::operator ()	stl/stl_hash_fun.h	/^  size_t operator()(unsigned short __x) const { return __x; }$/;"	f	struct:std::hash	access:public	signature:(unsigned short __x) const
std::hash::operator ()	stl/stl_rope.h	/^  size_t operator()(const crope& __str) const$/;"	f	struct:std::hash	access:public	signature:(const crope& __str) const
std::hash::operator ()	stl/stl_rope.h	/^  size_t operator()(const wrope& __str) const$/;"	f	struct:std::hash	access:public	signature:(const wrope& __str) const
std::hash_map	stl/stl_hash_map.h	/^class hash_map$/;"	c	namespace:std
std::hash_map::_Ht	stl/stl_hash_map.h	/^                    _Select1st<pair<const _Key,_Tp> >,_EqualKey,_Alloc> _Ht;$/;"	t	class:std::hash_map	access:private
std::hash_map::_M_ht	stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_map	access:private
std::hash_map::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:std::hash_map	access:private	signature:(_EqualKey, bool, _Key, _Key)
std::hash_map::__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::hash_map	access:private	signature:(_Key, _Assignable)
std::hash_map::__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::hash_map	access:private	signature:(_Tp, _Assignable)
std::hash_map::__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:std::hash_map	access:private	signature:(_HashFcn, size_t, _Key)
std::hash_map::__STL_NULL_TMPL_ARGS	stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_map&, const hash_map&);$/;"	p	class:std::hash_map	access:friend	signature:(const hash_map&, const hash_map&)
std::hash_map::allocator_type	stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::begin	stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::begin	stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:std::hash_map	access:public	signature:()
std::hash_map::bucket_count	stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_map	access:public	signature:()
std::hash_map::clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
std::hash_map::const_iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_map	access:public
std::hash_map::const_pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_map	access:public
std::hash_map::const_reference	stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_map	access:public
std::hash_map::count	stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
std::hash_map::data_type	stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::difference_type	stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::elems_in_bucket	stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_map	access:public	signature:(size_type __n) const
std::hash_map::empty	stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::end	stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::end	stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:std::hash_map	access:public	signature:()
std::hash_map::equal_range	stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
std::hash_map::equal_range	stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
std::hash_map::erase	stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
std::hash_map::erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_map	access:public	signature:(iterator __f, iterator __l)
std::hash_map::erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_map::erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_map	access:public	signature:(iterator __it)
std::hash_map::erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
std::hash_map::find	stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key) const
std::hash_map::find	stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
std::hash_map::get_allocator	stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::hash_funct	stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::hash_map	stl/stl_hash_map.h	/^  explicit hash_map(size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(size_type __n)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:std::hash_map	access:public	signature:()
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_map	access:public	signature:(size_type __n, const hasher& __hf)
std::hash_map::hash_map	stl/stl_hash_map.h	/^  hash_map(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_map	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_map::hasher	stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_map	access:public
std::hash_map::insert	stl/stl_hash_map.h	/^  pair<iterator,bool> insert(const value_type& __obj)$/;"	f	class:std::hash_map	access:public	signature:(const value_type& __obj)
std::hash_map::insert	stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_map	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_map::insert	stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_map	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_map::insert	stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_map	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_map::insert_noresize	stl/stl_hash_map.h	/^  pair<iterator,bool> insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_map	access:public	signature:(const value_type& __obj)
std::hash_map::insert_unique	stl/stl_hash_map.h	/^    _M_ht.insert_unique(__f,__l);$/;"	p	signature:(__f,__l)
std::hash_map::insert_unique	stl/stl_hash_map.h	/^    { _M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_map::insert_unique	stl/stl_hash_map.h	/^    { _M_ht.insert_unique(__f,__l); }$/;"	p	signature:(__f,__l)
std::hash_map::iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:std::hash_map	access:public
std::hash_map::key_eq	stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::key_equal	stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_map	access:public
std::hash_map::key_type	stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::mapped_type	stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::max_bucket_count	stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::max_size	stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::operator ==	stl/stl_hash_map.h	/^  friend bool operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_map	access:friend	signature:(const hash_map<_K1, _T1, _HF, _EqK, _Al>&, const hash_map<_K1, _T1, _HF, _EqK, _Al>&)
std::hash_map::operator []	stl/stl_hash_map.h	/^  _Tp& operator[](const key_type& __key) {$/;"	f	class:std::hash_map	access:public	signature:(const key_type& __key)
std::hash_map::pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:std::hash_map	access:public
std::hash_map::reference	stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:std::hash_map	access:public
std::hash_map::resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_map	access:public	signature:(size_type __hint)
std::hash_map::resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
std::hash_map::size	stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_map	access:public	signature:() const
std::hash_map::size_type	stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_map	access:public
std::hash_map::swap	stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_map	access:public	signature:(hash_map& __hs)
std::hash_map::swap	stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
std::hash_map::value_type	stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_map	access:public
std::hash_multimap	stl/stl_hash_map.h	/^class hash_multimap$/;"	c	namespace:std
std::hash_multimap::_Ht	stl/stl_hash_map.h	/^          _Ht;$/;"	t	class:std::hash_multimap	access:private
std::hash_multimap::_M_ht	stl/stl_hash_map.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_multimap	access:private
std::hash_multimap::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Key, _Key);$/;"	p	class:std::hash_multimap	access:private	signature:(_EqualKey, bool, _Key, _Key)
std::hash_multimap::__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::hash_multimap	access:private	signature:(_Key, _Assignable)
std::hash_multimap::__STL_CLASS_REQUIRES	stl/stl_hash_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::hash_multimap	access:private	signature:(_Tp, _Assignable)
std::hash_multimap::__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_map.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Key);$/;"	p	class:std::hash_multimap	access:private	signature:(_HashFcn, size_t, _Key)
std::hash_multimap::__STL_NULL_TMPL_ARGS	stl/stl_hash_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multimap&,const hash_multimap&);$/;"	p	class:std::hash_multimap	access:friend	signature:(const hash_multimap&,const hash_multimap&)
std::hash_multimap::allocator_type	stl/stl_hash_map.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::begin	stl/stl_hash_map.h	/^  const_iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::begin	stl/stl_hash_map.h	/^  iterator begin() { return _M_ht.begin(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
std::hash_multimap::bucket_count	stl/stl_hash_map.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
std::hash_multimap::clear	stl/stl_hash_map.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
std::hash_multimap::const_iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::const_pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::const_reference	stl/stl_hash_map.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::count	stl/stl_hash_map.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
std::hash_multimap::data_type	stl/stl_hash_map.h	/^  typedef _Tp data_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::difference_type	stl/stl_hash_map.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::elems_in_bucket	stl/stl_hash_map.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n) const
std::hash_multimap::empty	stl/stl_hash_map.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::end	stl/stl_hash_map.h	/^  const_iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::end	stl/stl_hash_map.h	/^  iterator end() { return _M_ht.end(); }$/;"	f	class:std::hash_multimap	access:public	signature:()
std::hash_multimap::equal_range	stl/stl_hash_map.h	/^  equal_range(const key_type& __key) const$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
std::hash_multimap::equal_range	stl/stl_hash_map.h	/^  pair<iterator, iterator> equal_range(const key_type& __key)$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
std::hash_multimap::erase	stl/stl_hash_map.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
std::hash_multimap::erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_multimap	access:public	signature:(iterator __f, iterator __l)
std::hash_multimap::erase	stl/stl_hash_map.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_multimap::erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_multimap	access:public	signature:(iterator __it)
std::hash_multimap::erase	stl/stl_hash_map.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
std::hash_multimap::find	stl/stl_hash_map.h	/^  const_iterator find(const key_type& __key) const $/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key) const
std::hash_multimap::find	stl/stl_hash_map.h	/^  iterator find(const key_type& __key) { return _M_ht.find(__key); }$/;"	f	class:std::hash_multimap	access:public	signature:(const key_type& __key)
std::hash_multimap::get_allocator	stl/stl_hash_map.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::hash_funct	stl/stl_hash_map.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  explicit hash_multimap(size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap() : _M_ht(100, hasher(), key_equal(), allocator_type()) {}$/;"	f	class:std::hash_multimap	access:public	signature:()
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n, const hasher& __hf)
std::hash_multimap::hash_multimap	stl/stl_hash_map.h	/^  hash_multimap(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multimap::hasher	stl/stl_hash_map.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::insert	stl/stl_hash_map.h	/^  iterator insert(const value_type& __obj) $/;"	f	class:std::hash_multimap	access:public	signature:(const value_type& __obj)
std::hash_multimap::insert	stl/stl_hash_map.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_multimap	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_multimap::insert	stl/stl_hash_map.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_multimap::insert	stl/stl_hash_map.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_multimap	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_multimap::insert_equal	stl/stl_hash_map.h	/^    _M_ht.insert_equal(__f,__l);$/;"	p	signature:(__f,__l)
std::hash_multimap::insert_equal	stl/stl_hash_map.h	/^    { _M_ht.insert_equal(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_multimap::insert_equal	stl/stl_hash_map.h	/^    { _M_ht.insert_equal(__f,__l); }$/;"	p	signature:(__f,__l)
std::hash_multimap::insert_noresize	stl/stl_hash_map.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_multimap	access:public	signature:(const value_type& __obj)
std::hash_multimap::iterator	stl/stl_hash_map.h	/^  typedef typename _Ht::iterator iterator;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::key_eq	stl/stl_hash_map.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::key_equal	stl/stl_hash_map.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::key_type	stl/stl_hash_map.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::mapped_type	stl/stl_hash_map.h	/^  typedef _Tp mapped_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::max_bucket_count	stl/stl_hash_map.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::max_size	stl/stl_hash_map.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::operator ==	stl/stl_hash_map.h	/^  friend bool operator== (const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_multimap	access:friend	signature:(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&, const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&)
std::hash_multimap::pointer	stl/stl_hash_map.h	/^  typedef typename _Ht::pointer pointer;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::reference	stl/stl_hash_map.h	/^  typedef typename _Ht::reference reference;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_multimap	access:public	signature:(size_type __hint)
std::hash_multimap::resize	stl/stl_hash_map.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
std::hash_multimap::size	stl/stl_hash_map.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_multimap	access:public	signature:() const
std::hash_multimap::size_type	stl/stl_hash_map.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multimap::swap	stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_multimap	access:public	signature:(hash_multimap& __hs)
std::hash_multimap::swap	stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
std::hash_multimap::value_type	stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_multimap	access:public
std::hash_multiset	stl/stl_hash_set.h	/^class hash_multiset$/;"	c	namespace:std
std::hash_multiset::_Ht	stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:std::hash_multiset	access:private
std::hash_multiset::_M_ht	stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_multiset	access:private
std::hash_multiset::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:std::hash_multiset	access:private	signature:(_EqualKey, bool, _Value, _Value)
std::hash_multiset::__STL_CLASS_REQUIRES	stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:std::hash_multiset	access:private	signature:(_Value, _Assignable)
std::hash_multiset::__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:std::hash_multiset	access:private	signature:(_HashFcn, size_t, _Value)
std::hash_multiset::__STL_NULL_TMPL_ARGS	stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_multiset&,const hash_multiset&);$/;"	p	class:std::hash_multiset	access:friend	signature:(const hash_multiset&,const hash_multiset&)
std::hash_multiset::allocator_type	stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::begin	stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::bucket_count	stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_multiset	access:public	signature:()
std::hash_multiset::clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
std::hash_multiset::const_iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::const_pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::const_reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::count	stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
std::hash_multiset::difference_type	stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::elems_in_bucket	stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n) const
std::hash_multiset::empty	stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::end	stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::equal_range	stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
std::hash_multiset::erase	stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key)
std::hash_multiset::erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_multiset	access:public	signature:(iterator __f, iterator __l)
std::hash_multiset::erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_multiset::erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_multiset	access:public	signature:(iterator __it)
std::hash_multiset::erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
std::hash_multiset::find	stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:std::hash_multiset	access:public	signature:(const key_type& __key) const
std::hash_multiset::get_allocator	stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::hash_funct	stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  explicit hash_multiset(size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset()$/;"	f	class:std::hash_multiset	access:public	signature:()
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n, const hasher& __hf)
std::hash_multiset::hash_multiset	stl/stl_hash_set.h	/^  hash_multiset(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_multiset::hasher	stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::insert	stl/stl_hash_set.h	/^  iterator insert(const value_type& __obj)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type& __obj)
std::hash_multiset::insert	stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_multiset	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_multiset::insert	stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_multiset::insert	stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_multiset	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_multiset::insert_equal	stl/stl_hash_set.h	/^    _M_ht.insert_equal(__f,__l);$/;"	p	signature:(__f,__l)
std::hash_multiset::insert_equal	stl/stl_hash_set.h	/^    { _M_ht.insert_equal(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_multiset::insert_equal	stl/stl_hash_set.h	/^    { _M_ht.insert_equal(__f,__l); }$/;"	p	signature:(__f,__l)
std::hash_multiset::insert_noresize	stl/stl_hash_set.h	/^  iterator insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_multiset	access:public	signature:(const value_type& __obj)
std::hash_multiset::iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::key_eq	stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::key_equal	stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::key_type	stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::max_bucket_count	stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::max_size	stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::operator ==	stl/stl_hash_set.h	/^  friend bool operator== (const hash_multiset<_Val, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_multiset	access:friend	signature:(const hash_multiset<_Val, _HF, _EqK, _Al>&, const hash_multiset<_Val, _HF, _EqK, _Al>&)
std::hash_multiset::pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_multiset	access:public	signature:(size_type __hint)
std::hash_multiset::resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
std::hash_multiset::size	stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_multiset	access:public	signature:() const
std::hash_multiset::size_type	stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_multiset	access:public
std::hash_multiset::swap	stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	f	class:std::hash_multiset	access:public	signature:(hash_multiset& hs)
std::hash_multiset::swap	stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	p	signature:(hs._M_ht)
std::hash_multiset::value_type	stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_multiset	access:public
std::hash_set	stl/stl_hash_set.h	/^class hash_set$/;"	c	namespace:std
std::hash_set::_Ht	stl/stl_hash_set.h	/^                    _EqualKey, _Alloc> _Ht;$/;"	t	class:std::hash_set	access:private
std::hash_set::_M_ht	stl/stl_hash_set.h	/^  _Ht _M_ht;$/;"	m	class:std::hash_set	access:private
std::hash_set::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_EqualKey, bool, _Value, _Value);$/;"	p	class:std::hash_set	access:private	signature:(_EqualKey, bool, _Value, _Value)
std::hash_set::__STL_CLASS_REQUIRES	stl/stl_hash_set.h	/^  __STL_CLASS_REQUIRES(_Value, _Assignable);$/;"	p	class:std::hash_set	access:private	signature:(_Value, _Assignable)
std::hash_set::__STL_CLASS_UNARY_FUNCTION_CHECK	stl/stl_hash_set.h	/^  __STL_CLASS_UNARY_FUNCTION_CHECK(_HashFcn, size_t, _Value);$/;"	p	class:std::hash_set	access:private	signature:(_HashFcn, size_t, _Value)
std::hash_set::__STL_NULL_TMPL_ARGS	stl/stl_hash_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const hash_set&, const hash_set&);$/;"	p	class:std::hash_set	access:friend	signature:(const hash_set&, const hash_set&)
std::hash_set::__p	stl/stl_hash_set.h	/^      pair<typename _Ht::iterator, bool> __p = _M_ht.insert_unique(__obj);$/;"	l
std::hash_set::__p	stl/stl_hash_set.h	/^    pair<typename _Ht::iterator, bool> __p = $/;"	l
std::hash_set::allocator_type	stl/stl_hash_set.h	/^  typedef typename _Ht::allocator_type allocator_type;$/;"	t	class:std::hash_set	access:public
std::hash_set::begin	stl/stl_hash_set.h	/^  iterator begin() const { return _M_ht.begin(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::bucket_count	stl/stl_hash_set.h	/^  size_type bucket_count() const { return _M_ht.bucket_count(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	f	class:std::hash_set	access:public	signature:()
std::hash_set::clear	stl/stl_hash_set.h	/^  void clear() { _M_ht.clear(); }$/;"	p	signature:()
std::hash_set::const_iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator const_iterator;$/;"	t	class:std::hash_set	access:public
std::hash_set::const_pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer const_pointer;$/;"	t	class:std::hash_set	access:public
std::hash_set::const_reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference const_reference;$/;"	t	class:std::hash_set	access:public
std::hash_set::count	stl/stl_hash_set.h	/^  size_type count(const key_type& __key) const { return _M_ht.count(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
std::hash_set::difference_type	stl/stl_hash_set.h	/^  typedef typename _Ht::difference_type difference_type;$/;"	t	class:std::hash_set	access:public
std::hash_set::elems_in_bucket	stl/stl_hash_set.h	/^  size_type elems_in_bucket(size_type __n) const$/;"	f	class:std::hash_set	access:public	signature:(size_type __n) const
std::hash_set::empty	stl/stl_hash_set.h	/^  bool empty() const { return _M_ht.empty(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::end	stl/stl_hash_set.h	/^  iterator end() const { return _M_ht.end(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::equal_range	stl/stl_hash_set.h	/^  pair<iterator, iterator> equal_range(const key_type& __key) const$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
std::hash_set::erase	stl/stl_hash_set.h	/^  size_type erase(const key_type& __key) {return _M_ht.erase(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key)
std::hash_set::erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	f	class:std::hash_set	access:public	signature:(iterator __f, iterator __l)
std::hash_set::erase	stl/stl_hash_set.h	/^  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_set::erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	f	class:std::hash_set	access:public	signature:(iterator __it)
std::hash_set::erase	stl/stl_hash_set.h	/^  void erase(iterator __it) { _M_ht.erase(__it); }$/;"	p	signature:(__it)
std::hash_set::find	stl/stl_hash_set.h	/^  iterator find(const key_type& __key) const { return _M_ht.find(__key); }$/;"	f	class:std::hash_set	access:public	signature:(const key_type& __key) const
std::hash_set::get_allocator	stl/stl_hash_set.h	/^  allocator_type get_allocator() const { return _M_ht.get_allocator(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::hash_funct	stl/stl_hash_set.h	/^  hasher hash_funct() const { return _M_ht.hash_funct(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::hash_set	stl/stl_hash_set.h	/^  explicit hash_set(size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(size_type __n)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set()$/;"	f	class:std::hash_set	access:public	signature:()
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(_InputIterator __f, _InputIterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l)$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const value_type* __f, const value_type* __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l)$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n)$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(const_iterator __f, const_iterator __l, size_type __n,$/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l, size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf)$/;"	f	class:std::hash_set	access:public	signature:(size_type __n, const hasher& __hf)
std::hash_set::hash_set	stl/stl_hash_set.h	/^  hash_set(size_type __n, const hasher& __hf, const key_equal& __eql,$/;"	f	class:std::hash_set	access:public	signature:(size_type __n, const hasher& __hf, const key_equal& __eql, const allocator_type& __a = allocator_type())
std::hash_set::hasher	stl/stl_hash_set.h	/^  typedef typename _Ht::hasher hasher;$/;"	t	class:std::hash_set	access:public
std::hash_set::insert	stl/stl_hash_set.h	/^  pair<iterator, bool> insert(const value_type& __obj)$/;"	f	class:std::hash_set	access:public	signature:(const value_type& __obj)
std::hash_set::insert	stl/stl_hash_set.h	/^  void insert(_InputIterator __f, _InputIterator __l) $/;"	f	class:std::hash_set	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hash_set::insert	stl/stl_hash_set.h	/^  void insert(const value_type* __f, const value_type* __l) {$/;"	f	class:std::hash_set	access:public	signature:(const value_type* __f, const value_type* __l)
std::hash_set::insert	stl/stl_hash_set.h	/^  void insert(const_iterator __f, const_iterator __l) $/;"	f	class:std::hash_set	access:public	signature:(const_iterator __f, const_iterator __l)
std::hash_set::insert_noresize	stl/stl_hash_set.h	/^  pair<iterator, bool> insert_noresize(const value_type& __obj)$/;"	f	class:std::hash_set	access:public	signature:(const value_type& __obj)
std::hash_set::insert_unique	stl/stl_hash_set.h	/^    _M_ht.insert_unique(__f,__l);$/;"	p	signature:(__f,__l)
std::hash_set::insert_unique	stl/stl_hash_set.h	/^    { _M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_set::insert_unique	stl/stl_hash_set.h	/^    { _M_ht.insert_unique(__f,__l); }$/;"	p	signature:(__f,__l)
std::hash_set::insert_unique	stl/stl_hash_set.h	/^    {_M_ht.insert_unique(__f, __l); }$/;"	p	signature:(__f, __l)
std::hash_set::iterator	stl/stl_hash_set.h	/^  typedef typename _Ht::const_iterator iterator;$/;"	t	class:std::hash_set	access:public
std::hash_set::key_eq	stl/stl_hash_set.h	/^  key_equal key_eq() const { return _M_ht.key_eq(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::key_equal	stl/stl_hash_set.h	/^  typedef typename _Ht::key_equal key_equal;$/;"	t	class:std::hash_set	access:public
std::hash_set::key_type	stl/stl_hash_set.h	/^  typedef typename _Ht::key_type key_type;$/;"	t	class:std::hash_set	access:public
std::hash_set::max_bucket_count	stl/stl_hash_set.h	/^  size_type max_bucket_count() const { return _M_ht.max_bucket_count(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::max_size	stl/stl_hash_set.h	/^  size_type max_size() const { return _M_ht.max_size(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::operator ==	stl/stl_hash_set.h	/^  friend bool operator== (const hash_set<_Val, _HF, _EqK, _Al>&,$/;"	p	class:std::hash_set	access:friend	signature:(const hash_set<_Val, _HF, _EqK, _Al>&, const hash_set<_Val, _HF, _EqK, _Al>&)
std::hash_set::pointer	stl/stl_hash_set.h	/^  typedef typename _Ht::const_pointer pointer;$/;"	t	class:std::hash_set	access:public
std::hash_set::reference	stl/stl_hash_set.h	/^  typedef typename _Ht::const_reference reference;$/;"	t	class:std::hash_set	access:public
std::hash_set::resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	f	class:std::hash_set	access:public	signature:(size_type __hint)
std::hash_set::resize	stl/stl_hash_set.h	/^  void resize(size_type __hint) { _M_ht.resize(__hint); }$/;"	p	signature:(__hint)
std::hash_set::size	stl/stl_hash_set.h	/^  size_type size() const { return _M_ht.size(); }$/;"	f	class:std::hash_set	access:public	signature:() const
std::hash_set::size_type	stl/stl_hash_set.h	/^  typedef typename _Ht::size_type size_type;$/;"	t	class:std::hash_set	access:public
std::hash_set::swap	stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_set	access:public	signature:(hash_set& __hs)
std::hash_set::swap	stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
std::hash_set::value_type	stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_set	access:public
std::hashtable	stl/stl_hashtable.h	/^class hashtable {$/;"	c	namespace:std
std::hashtable::_M_bkt_num	stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj) const$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj) const
std::hashtable::_M_bkt_num	stl/stl_hashtable.h	/^  size_type _M_bkt_num(const value_type& __obj, size_t __n) const$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj, size_t __n) const
std::hashtable::_M_bkt_num_key	stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key) const$/;"	f	class:std::hashtable	access:private	signature:(const key_type& __key) const
std::hashtable::_M_bkt_num_key	stl/stl_hashtable.h	/^  size_type _M_bkt_num_key(const key_type& __key, size_t __n) const$/;"	f	class:std::hashtable	access:private	signature:(const key_type& __key, size_t __n) const
std::hashtable::_M_buckets	stl/stl_hashtable.h	/^      _M_buckets(__a),$/;"	p	class:std::hashtable	access:public	signature:(__a)
std::hashtable::_M_buckets	stl/stl_hashtable.h	/^      _M_buckets(__ht.get_allocator()),$/;"	p	class:std::hashtable	access:public	signature:(__ht.get_allocator())
std::hashtable::_M_buckets	stl/stl_hashtable.h	/^  vector<_Node*,_Alloc> _M_buckets;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_copy_from	stl/stl_hashtable.h	/^  ::_M_copy_from(const hashtable& __ht)$/;"	f	class:std::hashtable	signature:(const hashtable& __ht)
std::hashtable::_M_copy_from	stl/stl_hashtable.h	/^  void _M_copy_from(const hashtable& __ht);$/;"	p	class:std::hashtable	access:private	signature:(const hashtable& __ht)
std::hashtable::_M_delete_node	stl/stl_hashtable.h	/^  void _M_delete_node(_Node* __n)$/;"	f	class:std::hashtable	access:private	signature:(_Node* __n)
std::hashtable::_M_equals	stl/stl_hashtable.h	/^      _M_equals(__eql),$/;"	p	class:std::hashtable	access:public	signature:(__eql)
std::hashtable::_M_equals	stl/stl_hashtable.h	/^      _M_equals(__ht._M_equals),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_equals)
std::hashtable::_M_equals	stl/stl_hashtable.h	/^  key_equal             _M_equals;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_erase_bucket	stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)$/;"	f	class:std::hashtable	signature:(const size_type __n, _Node* __first, _Node* __last)
std::hashtable::_M_erase_bucket	stl/stl_hashtable.h	/^  ::_M_erase_bucket(const size_type __n, _Node* __last)$/;"	f	class:std::hashtable	signature:(const size_type __n, _Node* __last)
std::hashtable::_M_erase_bucket	stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last);$/;"	p	class:std::hashtable	access:private	signature:(const size_type __n, _Node* __first, _Node* __last)
std::hashtable::_M_erase_bucket	stl/stl_hashtable.h	/^  void _M_erase_bucket(const size_type __n, _Node* __last);$/;"	p	class:std::hashtable	access:private	signature:(const size_type __n, _Node* __last)
std::hashtable::_M_get_key	stl/stl_hashtable.h	/^      _M_get_key(__ext),$/;"	p	class:std::hashtable	access:public	signature:(__ext)
std::hashtable::_M_get_key	stl/stl_hashtable.h	/^      _M_get_key(__ht._M_get_key),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_get_key)
std::hashtable::_M_get_key	stl/stl_hashtable.h	/^  _ExtractKey           _M_get_key;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_get_node	stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator.allocate(1); }$/;"	f	class:std::hashtable	access:private	signature:()
std::hashtable::_M_get_node	stl/stl_hashtable.h	/^  _Node* _M_get_node() { return _M_node_allocator_type::allocate(1); }$/;"	f	class:std::hashtable	access:private	signature:()
std::hashtable::_M_hash	stl/stl_hashtable.h	/^      _M_hash(__hf),$/;"	p	class:std::hashtable	access:public	signature:(__hf)
std::hashtable::_M_hash	stl/stl_hashtable.h	/^      _M_hash(__ht._M_hash),$/;"	p	class:std::hashtable	access:public	signature:(__ht._M_hash)
std::hashtable::_M_hash	stl/stl_hashtable.h	/^  hasher                _M_hash;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_initialize_buckets	stl/stl_hashtable.h	/^  void _M_initialize_buckets(size_type __n)$/;"	f	class:std::hashtable	access:private	signature:(size_type __n)
std::hashtable::_M_new_node	stl/stl_hashtable.h	/^  _Node* _M_new_node(const value_type& __obj)$/;"	f	class:std::hashtable	access:private	signature:(const value_type& __obj)
std::hashtable::_M_next_size	stl/stl_hashtable.h	/^  size_type _M_next_size(size_type __n) const$/;"	f	class:std::hashtable	access:private	signature:(size_type __n) const
std::hashtable::_M_node_allocator	stl/stl_hashtable.h	/^  typename _Alloc_traits<_Node, _Alloc>::allocator_type _M_node_allocator;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_node_allocator_type	stl/stl_hashtable.h	/^  typedef simple_alloc<_Node, _Alloc> _M_node_allocator_type;$/;"	t	class:std::hashtable	access:private
std::hashtable::_M_node_allocator_type::deallocate	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	p	class:std::hashtable::_M_node_allocator_type	signature:(__p, 1)
std::hashtable::_M_num_elements	stl/stl_hashtable.h	/^  size_type             _M_num_elements;$/;"	m	class:std::hashtable	access:private
std::hashtable::_M_put_node	stl/stl_hashtable.h	/^    __STL_UNWIND(_M_put_node(__n));$/;"	p	signature:(__n)
std::hashtable::_M_put_node	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	f	class:std::hashtable	access:private	signature:(_Node* __p)
std::hashtable::_M_put_node	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); }$/;"	f	class:std::hashtable	access:private	signature:(_Node* __p)
std::hashtable::_Node	stl/stl_hashtable.h	/^  typedef _Hashtable_node<_Val> _Node;$/;"	t	class:std::hashtable	access:private
std::hashtable::__STD::swap	stl/stl_hashtable.h	/^    __STD::swap(_M_equals, __ht._M_equals);$/;"	p	class:std::hashtable::__STD	signature:(_M_equals, __ht._M_equals)
std::hashtable::__STD::swap	stl/stl_hashtable.h	/^    __STD::swap(_M_get_key, __ht._M_get_key);$/;"	p	class:std::hashtable::__STD	signature:(_M_get_key, __ht._M_get_key)
std::hashtable::__STD::swap	stl/stl_hashtable.h	/^    __STD::swap(_M_hash, __ht._M_hash);$/;"	p	class:std::hashtable::__STD	signature:(_M_hash, __ht._M_hash)
std::hashtable::__STD::swap	stl/stl_hashtable.h	/^    __STD::swap(_M_num_elements, __ht._M_num_elements);$/;"	p	class:std::hashtable::__STD	signature:(_M_num_elements, __ht._M_num_elements)
std::hashtable::__STL_NULL_TMPL_ARGS	stl/stl_hashtable.h	/^  operator== __STL_NULL_TMPL_ARGS (const hashtable&, const hashtable&);$/;"	p	class:std::hashtable	access:friend	signature:(const hashtable&, const hashtable&)
std::hashtable::__first	stl/stl_hashtable.h	/^    _Node* __first;$/;"	l
std::hashtable::__first	stl/stl_hashtable.h	/^    const _Node* __first;$/;"	l
std::hashtable::__ht	stl/stl_hashtable.h	/^    _M_copy_from(__ht);$/;"	v
std::hashtable::__n	stl/stl_hashtable.h	/^    _M_initialize_buckets(__n);$/;"	v
std::hashtable::__n	stl/stl_hashtable.h	/^    _Node* __n = _M_get_node();$/;"	l
std::hashtable::__n	stl/stl_hashtable.h	/^    const size_type __n = _M_bkt_num_key(__key);$/;"	l
std::hashtable::__n	stl/stl_hashtable.h	/^    size_type __n = 0;$/;"	l
std::hashtable::__n	stl/stl_hashtable.h	/^    size_type __n = _M_bkt_num_key(__key);$/;"	l
std::hashtable::__n	stl/stl_hashtable.h	/^    size_type __n = __l - __f;$/;"	l
std::hashtable::__n_buckets	stl/stl_hashtable.h	/^    const size_type __n_buckets = _M_next_size(__n);$/;"	l
std::hashtable::__result	stl/stl_hashtable.h	/^    size_type __result = 0;$/;"	l
std::hashtable::allocator_type	stl/stl_hashtable.h	/^  typedef _Alloc allocator_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::allocator_type	stl/stl_hashtable.h	/^  typedef typename _Alloc_traits<_Val,_Alloc>::allocator_type allocator_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::begin	stl/stl_hashtable.h	/^  const_iterator begin() const$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::begin	stl/stl_hashtable.h	/^  iterator begin()$/;"	f	class:std::hashtable	access:public	signature:()
std::hashtable::bucket_count	stl/stl_hashtable.h	/^  size_type bucket_count() const { return _M_buckets.size(); }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::clear	stl/stl_hashtable.h	/^  void clear();$/;"	p	class:std::hashtable	access:public	signature:()
std::hashtable::clear	stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::clear()$/;"	f	class:std::hashtable	signature:()
std::hashtable::const_iterator	stl/stl_hashtable.h	/^          const_iterator;$/;"	t	class:std::hashtable	access:public
std::hashtable::const_pointer	stl/stl_hashtable.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::hashtable	access:public
std::hashtable::const_reference	stl/stl_hashtable.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::hashtable	access:public
std::hashtable::count	stl/stl_hashtable.h	/^  size_type count(const key_type& __key) const$/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key) const
std::hashtable::deallocate	stl/stl_hashtable.h	/^  void _M_put_node(_Node* __p) { _M_node_allocator.deallocate(__p, 1); }$/;"	p	signature:(__p, 1)
std::hashtable::difference_type	stl/stl_hashtable.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::elems_in_bucket	stl/stl_hashtable.h	/^  size_type elems_in_bucket(size_type __bucket) const$/;"	f	class:std::hashtable	access:public	signature:(size_type __bucket) const
std::hashtable::empty	stl/stl_hashtable.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::end	stl/stl_hashtable.h	/^  const_iterator end() const { return const_iterator(0, this); }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::end	stl/stl_hashtable.h	/^  iterator end() { return iterator(0, this); }$/;"	f	class:std::hashtable	access:public	signature:()
std::hashtable::equal_range	stl/stl_hashtable.h	/^  ::equal_range(const key_type& __key) const$/;"	f	class:std::hashtable	signature:(const key_type& __key) const
std::hashtable::equal_range	stl/stl_hashtable.h	/^  equal_range(const key_type& __key) const;$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key) const
std::hashtable::equal_range	stl/stl_hashtable.h	/^  equal_range(const key_type& __key);$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key)
std::hashtable::equal_range	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::equal_range(const key_type& __key)$/;"	f	class:std::hashtable	signature:(const key_type& __key)
std::hashtable::erase	stl/stl_hashtable.h	/^  ::erase(iterator __first, iterator __last)$/;"	f	class:std::hashtable	signature:(iterator __first, iterator __last)
std::hashtable::erase	stl/stl_hashtable.h	/^  size_type erase(const key_type& __key);$/;"	p	class:std::hashtable	access:public	signature:(const key_type& __key)
std::hashtable::erase	stl/stl_hashtable.h	/^  void erase(const const_iterator& __it);$/;"	p	class:std::hashtable	access:public	signature:(const const_iterator& __it)
std::hashtable::erase	stl/stl_hashtable.h	/^  void erase(const iterator& __it);$/;"	p	class:std::hashtable	access:public	signature:(const iterator& __it)
std::hashtable::erase	stl/stl_hashtable.h	/^  void erase(const_iterator __first, const_iterator __last);$/;"	p	class:std::hashtable	access:public	signature:(const_iterator __first, const_iterator __last)
std::hashtable::erase	stl/stl_hashtable.h	/^  void erase(iterator __first, iterator __last);$/;"	p	class:std::hashtable	access:public	signature:(iterator __first, iterator __last)
std::hashtable::erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const const_iterator& __it)$/;"	f	class:std::hashtable	signature:(const const_iterator& __it)
std::hashtable::erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const key_type& __key)$/;"	f	class:std::hashtable	signature:(const key_type& __key)
std::hashtable::erase	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const_iterator __first,$/;"	f	class:std::hashtable	signature:(const_iterator __first, const_iterator __last)
std::hashtable::erase	stl/stl_hashtable.h	/^void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::erase(const iterator& __it)$/;"	f	class:std::hashtable	signature:(const iterator& __it)
std::hashtable::find	stl/stl_hashtable.h	/^  const_iterator find(const key_type& __key) const$/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key) const
std::hashtable::find	stl/stl_hashtable.h	/^  iterator find(const key_type& __key) $/;"	f	class:std::hashtable	access:public	signature:(const key_type& __key)
std::hashtable::find_or_insert	stl/stl_hashtable.h	/^  reference find_or_insert(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
std::hashtable::find_or_insert	stl/stl_hashtable.h	/^hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>::find_or_insert(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
std::hashtable::get_allocator	stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return _M_node_allocator; }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::get_allocator	stl/stl_hashtable.h	/^  allocator_type get_allocator() const { return allocator_type(); }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::hash_funct	stl/stl_hashtable.h	/^  hasher hash_funct() const { return _M_hash; }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::hasher	stl/stl_hashtable.h	/^  typedef _HashFcn hasher;$/;"	t	class:std::hashtable	access:public
std::hashtable::insert	stl/stl_hashtable.h	/^    _M_buckets.insert(_M_buckets.end(), __n_buckets, (_Node*) 0);$/;"	p	signature:(_M_buckets.end(), __n_buckets, (_Node*) 0)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  iterator insert_equal(const value_type& __obj)$/;"	f	class:std::hashtable	access:public	signature:(const value_type& __obj)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  void insert_equal(_InputIterator __f, _InputIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  void insert_equal(const value_type* __f, const value_type* __l)$/;"	f	class:std::hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
std::hashtable::insert_equal	stl/stl_hashtable.h	/^  void insert_equal(const_iterator __f, const_iterator __l)$/;"	f	class:std::hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
std::hashtable::insert_equal_noresize	stl/stl_hashtable.h	/^  ::insert_equal_noresize(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
std::hashtable::insert_equal_noresize	stl/stl_hashtable.h	/^  iterator insert_equal_noresize(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique(const value_type& __obj)$/;"	f	class:std::hashtable	access:public	signature:(const value_type& __obj)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_ForwardIterator __f, _ForwardIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_ForwardIterator __f, _ForwardIterator __l, forward_iterator_tag)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l)$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  void insert_unique(_InputIterator __f, _InputIterator __l,$/;"	f	class:std::hashtable	access:public	signature:(_InputIterator __f, _InputIterator __l, input_iterator_tag)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  void insert_unique(const value_type* __f, const value_type* __l)$/;"	f	class:std::hashtable	access:public	signature:(const value_type* __f, const value_type* __l)
std::hashtable::insert_unique	stl/stl_hashtable.h	/^  void insert_unique(const_iterator __f, const_iterator __l)$/;"	f	class:std::hashtable	access:public	signature:(const_iterator __f, const_iterator __l)
std::hashtable::insert_unique_noresize	stl/stl_hashtable.h	/^  ::insert_unique_noresize(const value_type& __obj)$/;"	f	class:std::hashtable	signature:(const value_type& __obj)
std::hashtable::insert_unique_noresize	stl/stl_hashtable.h	/^  pair<iterator, bool> insert_unique_noresize(const value_type& __obj);$/;"	p	class:std::hashtable	access:public	signature:(const value_type& __obj)
std::hashtable::iterator	stl/stl_hashtable.h	/^          iterator;$/;"	t	class:std::hashtable	access:public
std::hashtable::key_eq	stl/stl_hashtable.h	/^  key_equal key_eq() const { return _M_equals; }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::key_equal	stl/stl_hashtable.h	/^  typedef _EqualKey key_equal;$/;"	t	class:std::hashtable	access:public
std::hashtable::key_type	stl/stl_hashtable.h	/^  typedef _Key key_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::max_bucket_count	stl/stl_hashtable.h	/^  size_type max_bucket_count() const$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::max_size	stl/stl_hashtable.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::operator =	stl/stl_hashtable.h	/^  hashtable& operator= (const hashtable& __ht)$/;"	f	class:std::hashtable	access:public	signature:(const hashtable& __ht)
std::hashtable::operator ==	stl/stl_hashtable.h	/^  friend bool operator== (const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,$/;"	p	class:std::hashtable	access:friend	signature:(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&, const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&)
std::hashtable::pointer	stl/stl_hashtable.h	/^  typedef value_type*       pointer;$/;"	t	class:std::hashtable	access:public
std::hashtable::reference	stl/stl_hashtable.h	/^  typedef value_type&       reference;$/;"	t	class:std::hashtable	access:public
std::hashtable::reserve	stl/stl_hashtable.h	/^    _M_buckets.reserve(__n_buckets);$/;"	p	signature:(__n_buckets)
std::hashtable::resize	stl/stl_hashtable.h	/^  ::resize(size_type __num_elements_hint)$/;"	f	class:std::hashtable	signature:(size_type __num_elements_hint)
std::hashtable::resize	stl/stl_hashtable.h	/^  void resize(size_type __num_elements_hint);$/;"	p	class:std::hashtable	access:public	signature:(size_type __num_elements_hint)
std::hashtable::size	stl/stl_hashtable.h	/^  size_type size() const { return _M_num_elements; }$/;"	f	class:std::hashtable	access:public	signature:() const
std::hashtable::size_type	stl/stl_hashtable.h	/^  typedef size_t            size_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::swap	stl/stl_hashtable.h	/^    _M_buckets.swap(__ht._M_buckets);$/;"	p	signature:(__ht._M_buckets)
std::hashtable::swap	stl/stl_hashtable.h	/^  void swap(hashtable& __ht)$/;"	f	class:std::hashtable	access:public	signature:(hashtable& __ht)
std::hashtable::value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	class:std::hashtable	access:public
std::hashtable::~hashtable	stl/stl_hashtable.h	/^  ~hashtable() { clear(); }$/;"	f	class:std::hashtable	access:public	signature:()
std::identity	stl/stl_function.h	/^template <class _Tp> struct identity : public _Identity<_Tp> {};$/;"	s	namespace:std	inherits:_Identity
std::identity_element	stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {$/;"	f	namespace:std	signature:(multiplies<_Tp>)
std::identity_element	stl/stl_function.h	/^template <class _Tp> inline _Tp identity_element(plus<_Tp>) {$/;"	f	namespace:std	signature:(plus<_Tp>)
std::identity_element	stl/stl_rope.h	/^identity_element(_Rope_Concat_fn<_CharT, _Alloc>)$/;"	f	namespace:std	signature:(_Rope_Concat_fn<_CharT, _Alloc>)
std::includes	stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
std::includes	stl/stl_algo.h	/^bool includes(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
std::inner_product	stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init)
std::inner_product	stl/stl_numeric.h	/^_Tp inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	signature:(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)
std::inplace_merge	stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last)
std::inplace_merge	stl/stl_algo.h	/^inline void inplace_merge(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __middle, _BidirectionalIter __last, _Compare __comp)
std::input_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct input_iterator {$/;"	s	namespace:std
std::input_iterator::difference_type	stl/stl_iterator_base.h	/^  typedef _Distance          difference_type;$/;"	t	struct:std::input_iterator	access:public
std::input_iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef input_iterator_tag iterator_category;$/;"	t	struct:std::input_iterator	access:public
std::input_iterator::pointer	stl/stl_iterator_base.h	/^  typedef _Tp*               pointer;$/;"	t	struct:std::input_iterator	access:public
std::input_iterator::reference	stl/stl_iterator_base.h	/^  typedef _Tp&               reference;$/;"	t	struct:std::input_iterator	access:public
std::input_iterator::value_type	stl/stl_iterator_base.h	/^  typedef _Tp                value_type;$/;"	t	struct:std::input_iterator	access:public
std::input_iterator_tag	stl/stl_iterator_base.h	/^struct input_iterator_tag {};$/;"	s	namespace:std
std::insert	stl/stl_hashtable.h	/^  _M_buckets.insert(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0);$/;"	p	signature:(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0)
std::insert_iterator	stl/stl_hash_map.h	/^class insert_iterator<hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c	namespace:std
std::insert_iterator	stl/stl_hash_map.h	/^class insert_iterator<hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {$/;"	c	namespace:std
std::insert_iterator	stl/stl_hash_set.h	/^class insert_iterator<hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c	namespace:std
std::insert_iterator	stl/stl_hash_set.h	/^class insert_iterator<hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {$/;"	c	namespace:std
std::insert_iterator	stl/stl_iterator.h	/^class insert_iterator {$/;"	c	namespace:std
std::insert_iterator	stl/stl_slist.h	/^class insert_iterator<slist<_Tp, _Alloc> > {$/;"	c	namespace:std
std::insert_iterator::_Container	stl/stl_hash_map.h	/^  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::_Container	stl/stl_hash_map.h	/^  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::_Container	stl/stl_hash_set.h	/^  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::_Container	stl/stl_hash_set.h	/^  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::_Container	stl/stl_slist.h	/^  typedef slist<_Tp, _Alloc> _Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::container	stl/stl_hash_map.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::container	stl/stl_hash_set.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::container	stl/stl_iterator.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::container	stl/stl_slist.h	/^  _Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::container_type	stl/stl_hash_map.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::container_type	stl/stl_hash_set.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::container_type	stl/stl_iterator.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::container_type	stl/stl_slist.h	/^  typedef _Container          container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::difference_type	stl/stl_hash_map.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::difference_type	stl/stl_hash_set.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::difference_type	stl/stl_slist.h	/^  typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::insert	stl/stl_hash_map.h	/^    container->insert(__value);$/;"	p	signature:(__value)
std::insert_iterator::insert	stl/stl_hash_set.h	/^    container->insert(__value);$/;"	p	signature:(__value)
std::insert_iterator::insert_iterator	stl/stl_hash_map.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x)
std::insert_iterator::insert_iterator	stl/stl_hash_map.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
std::insert_iterator::insert_iterator	stl/stl_hash_set.h	/^  insert_iterator(_Container& __x) : container(&__x) {}$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x)
std::insert_iterator::insert_iterator	stl/stl_hash_set.h	/^  insert_iterator(_Container& __x, typename _Container::iterator)$/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator)
std::insert_iterator::insert_iterator	stl/stl_iterator.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
std::insert_iterator::insert_iterator	stl/stl_slist.h	/^  insert_iterator(_Container& __x, typename _Container::iterator __i) $/;"	f	class:std::insert_iterator	access:public	signature:(_Container& __x, typename _Container::iterator __i)
std::insert_iterator::iter	stl/stl_hash_map.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::iter	stl/stl_hash_set.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::iter	stl/stl_iterator.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::iter	stl/stl_slist.h	/^  typename _Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::iterator_category	stl/stl_hash_map.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::iterator_category	stl/stl_hash_set.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::iterator_category	stl/stl_slist.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::operator *	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator *	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator *	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator *	stl/stl_slist.h	/^  insert_iterator<_Container>& operator*() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_hash_map.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator ++	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_hash_set.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator ++	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_iterator.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator ++	stl/stl_slist.h	/^  insert_iterator<_Container>& operator++() { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	stl/stl_slist.h	/^  insert_iterator<_Container>& operator++(int) { return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator =	stl/stl_hash_map.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::insert_iterator::operator =	stl/stl_hash_set.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::insert_iterator::operator =	stl/stl_iterator.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::insert_iterator::operator =	stl/stl_slist.h	/^  operator=(const typename _Container::value_type& __value) { $/;"	f	class:std::insert_iterator	access:public	signature:(const typename _Container::value_type& __value)
std::insert_iterator::pointer	stl/stl_hash_map.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::pointer	stl/stl_hash_set.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::pointer	stl/stl_slist.h	/^  typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::reference	stl/stl_hash_map.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::reference	stl/stl_hash_set.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::reference	stl/stl_slist.h	/^  typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::value_type	stl/stl_hash_map.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::value_type	stl/stl_hash_set.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::value_type	stl/stl_slist.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
std::inserter	stl/stl_iterator.h	/^insert_iterator<_Container> inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	signature:(_Container& __x, _Iterator __i)
std::iota	stl/stl_numeric.h	/^iota(_ForwardIter __first, _ForwardIter __last, _Tp __value)$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Tp __value)
std::is_heap	stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last)$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::is_heap	stl/stl_algo.h	/^inline bool is_heap(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _StrictWeakOrdering __comp)
std::is_sorted	stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last)$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
std::is_sorted	stl/stl_algo.h	/^bool is_sorted(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _StrictWeakOrdering __comp)
std::istream_iterator	stl/stl_iterator.h	/^class istream_iterator {$/;"	c	namespace:std
std::istream_iterator::_M_end_marker	stl/stl_iterator.h	/^  bool _M_end_marker;$/;"	m	class:std::istream_iterator	access:protected
std::istream_iterator::_M_equal	stl/stl_iterator.h	/^  bool _M_equal(const istream_iterator& __x) const$/;"	f	class:std::istream_iterator	access:public	signature:(const istream_iterator& __x) const
std::istream_iterator::_M_ok	stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:std::istream_iterator	access:private
std::istream_iterator::_M_read	stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:std::istream_iterator	access:private	signature:()
std::istream_iterator::_M_read	stl/stl_iterator.h	/^  void _M_read() {$/;"	f	class:std::istream_iterator	access:protected	signature:()
std::istream_iterator::_M_stream	stl/stl_iterator.h	/^  istream* _M_stream;$/;"	m	class:std::istream_iterator	access:protected
std::istream_iterator::_M_stream	stl/stl_iterator.h	/^  istream_type* _M_stream;$/;"	m	class:std::istream_iterator	access:private
std::istream_iterator::_M_value	stl/stl_iterator.h	/^      *_M_stream >> _M_value;$/;"	l
std::istream_iterator::_M_value	stl/stl_iterator.h	/^    if (_M_end_marker) *_M_stream >> _M_value;$/;"	l
std::istream_iterator::_M_value	stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:std::istream_iterator	access:private
std::istream_iterator::_M_value	stl/stl_iterator.h	/^  _Tp _M_value;$/;"	m	class:std::istream_iterator	access:protected
std::istream_iterator::__tmp	stl/stl_iterator.h	/^    istream_iterator __tmp = *this;$/;"	l
std::istream_iterator::__tmp	stl/stl_iterator.h	/^    istream_iterator<_Tp, _Dist> __tmp = *this;$/;"	l
std::istream_iterator::char_type	stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::difference_type	stl/stl_iterator.h	/^  typedef _Dist                          difference_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::difference_type	stl/stl_iterator.h	/^  typedef _Dist               difference_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::istream_iterator	stl/stl_iterator.h	/^  istream_iterator() : _M_stream(&cin), _M_end_marker(false) {}$/;"	f	class:std::istream_iterator	access:public	signature:()
std::istream_iterator::istream_iterator	stl/stl_iterator.h	/^  istream_iterator() : _M_stream(0), _M_ok(false) {}$/;"	f	class:std::istream_iterator	access:public	signature:()
std::istream_iterator::istream_iterator	stl/stl_iterator.h	/^  istream_iterator(istream& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:std::istream_iterator	access:public	signature:(istream& __s)
std::istream_iterator::istream_iterator	stl/stl_iterator.h	/^  istream_iterator(istream_type& __s) : _M_stream(&__s) { _M_read(); }$/;"	f	class:std::istream_iterator	access:public	signature:(istream_type& __s)
std::istream_iterator::istream_type	stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits> istream_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::iterator_category	stl/stl_iterator.h	/^  typedef input_iterator_tag             iterator_category;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::iterator_category	stl/stl_iterator.h	/^  typedef input_iterator_tag  iterator_category;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::operator *	stl/stl_iterator.h	/^  reference operator*() const { return _M_value; }$/;"	f	class:std::istream_iterator	access:public	signature:() const
std::istream_iterator::operator ++	stl/stl_iterator.h	/^  istream_iterator operator++(int)  {$/;"	f	class:std::istream_iterator	access:public	signature:(int)
std::istream_iterator::operator ++	stl/stl_iterator.h	/^  istream_iterator& operator++() { $/;"	f	class:std::istream_iterator	access:public	signature:()
std::istream_iterator::operator ++	stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist> operator++(int)  {$/;"	f	class:std::istream_iterator	access:public	signature:(int)
std::istream_iterator::operator ++	stl/stl_iterator.h	/^  istream_iterator<_Tp, _Dist>& operator++() { $/;"	f	class:std::istream_iterator	access:public	signature:()
std::istream_iterator::operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::istream_iterator	access:public	signature:() const
std::istream_iterator::operator ==	stl/stl_iterator.h	/^  friend bool operator==(const istream_iterator<_T1, _D1>&,$/;"	p	class:std::istream_iterator	access:friend	signature:(const istream_iterator<_T1, _D1>&, const istream_iterator<_T1, _D1>&)
std::istream_iterator::pointer	stl/stl_iterator.h	/^  typedef const _Tp*                     pointer;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::pointer	stl/stl_iterator.h	/^  typedef const _Tp*          pointer;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::reference	stl/stl_iterator.h	/^  typedef const _Tp&                     reference;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::reference	stl/stl_iterator.h	/^  typedef const _Tp&          reference;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::traits_type	stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::value_type	stl/stl_iterator.h	/^  typedef _Tp                            value_type;$/;"	t	class:std::istream_iterator	access:public
std::istream_iterator::value_type	stl/stl_iterator.h	/^  typedef _Tp                 value_type;$/;"	t	class:std::istream_iterator	access:public
std::istreambuf_iterator	stl/stl_iterator.h	/^class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator
std::istreambuf_iterator::_M_buf	stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:std::istreambuf_iterator	access:private
std::istreambuf_iterator::_M_c	stl/stl_iterator.h	/^  mutable _CharT _M_c;$/;"	m	class:std::istreambuf_iterator	access:private
std::istreambuf_iterator::_M_dereference_aux	stl/stl_iterator.h	/^  char_type _M_dereference_aux() const;$/;"	p	class:std::istreambuf_iterator	access:private	signature:() const
std::istreambuf_iterator::_M_dereference_aux	stl/stl_iterator.h	/^_CharT istreambuf_iterator<_CharT, _Traits>::_M_dereference_aux() const$/;"	f	class:std::istreambuf_iterator	signature:() const
std::istreambuf_iterator::_M_equal_aux	stl/stl_iterator.h	/^  ::_M_equal_aux(const istreambuf_iterator& __i) const$/;"	f	class:std::istreambuf_iterator	signature:(const istreambuf_iterator& __i) const
std::istreambuf_iterator::_M_equal_aux	stl/stl_iterator.h	/^  bool _M_equal_aux(const istreambuf_iterator&) const;$/;"	p	class:std::istreambuf_iterator	access:private	signature:(const istreambuf_iterator&) const
std::istreambuf_iterator::_M_getc	stl/stl_iterator.h	/^  void _M_getc() const {$/;"	f	class:std::istreambuf_iterator	access:private	signature:() const
std::istreambuf_iterator::_M_init	stl/stl_iterator.h	/^  void _M_init(streambuf_type* __p) {$/;"	f	class:std::istreambuf_iterator	access:private	signature:(streambuf_type* __p)
std::istreambuf_iterator::_M_nextc	stl/stl_iterator.h	/^  void _M_nextc() {$/;"	f	class:std::istreambuf_iterator	access:private	signature:()
std::istreambuf_iterator::_M_postincr_aux	stl/stl_iterator.h	/^  void _M_postincr_aux();$/;"	p	class:std::istreambuf_iterator	access:private	signature:()
std::istreambuf_iterator::_M_postincr_aux	stl/stl_iterator.h	/^void istreambuf_iterator<_CharT, _Traits>::_M_postincr_aux()$/;"	f	class:std::istreambuf_iterator	signature:()
std::istreambuf_iterator::__c	stl/stl_iterator.h	/^    int_type __c = _M_buf->sgetc();$/;"	l
std::istreambuf_iterator::__c	stl/stl_iterator.h	/^    int_type __c = _M_buf->snextc();$/;"	l
std::istreambuf_iterator::__tmp	stl/stl_iterator.h	/^    istreambuf_iterator __tmp = *this;$/;"	l
std::istreambuf_iterator::char_type	stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:std::istreambuf_iterator	access:public
std::istreambuf_iterator::equal	stl/stl_iterator.h	/^  bool equal(const istreambuf_iterator& __i) const {$/;"	f	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator& __i) const
std::istreambuf_iterator::int_type	stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:std::istreambuf_iterator	access:public
std::istreambuf_iterator::istream_type	stl/stl_iterator.h	/^  typedef basic_istream<_CharT, _Traits>   istream_type;$/;"	t	class:std::istreambuf_iterator	access:public
std::istreambuf_iterator::istreambuf_iterator	stl/stl_iterator.h	/^  istreambuf_iterator(istream_type& __is) { this->_M_init(__is.rdbuf()); }$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type& __is)
std::istreambuf_iterator::istreambuf_iterator	stl/stl_iterator.h	/^  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type* __p = 0)
std::istreambuf_iterator::operator *	stl/stl_iterator.h	/^  char_type operator*() const $/;"	f	class:std::istreambuf_iterator	access:public	signature:() const
std::istreambuf_iterator::operator ++	stl/stl_iterator.h	/^  istreambuf_iterator  operator++(int) {$/;"	f	class:std::istreambuf_iterator	access:public	signature:(int)
std::istreambuf_iterator::operator ++	stl/stl_iterator.h	/^  istreambuf_iterator& operator++() { this->_M_nextc(); return *this; }$/;"	f	class:std::istreambuf_iterator	access:public	signature:()
std::istreambuf_iterator::streambuf_type	stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::istreambuf_iterator	access:public
std::istreambuf_iterator::traits_type	stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:std::istreambuf_iterator	access:public
std::iter_swap	stl/stl_algobase.h	/^inline void iter_swap(_ForwardIter1 __a, _ForwardIter2 __b) {$/;"	f	namespace:std	signature:(_ForwardIter1 __a, _ForwardIter2 __b)
std::iterator	stl/stl_iterator_base.h	/^struct iterator {$/;"	s	namespace:std
std::iterator::difference_type	stl/stl_iterator_base.h	/^  typedef _Distance  difference_type;$/;"	t	struct:std::iterator	access:public
std::iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef _Category  iterator_category;$/;"	t	struct:std::iterator	access:public
std::iterator::pointer	stl/stl_iterator_base.h	/^  typedef _Pointer   pointer;$/;"	t	struct:std::iterator	access:public
std::iterator::reference	stl/stl_iterator_base.h	/^  typedef _Reference reference;$/;"	t	struct:std::iterator	access:public
std::iterator::value_type	stl/stl_iterator_base.h	/^  typedef _Tp        value_type;$/;"	t	struct:std::iterator	access:public
std::iterator_category	stl/stl_deque.h	/^iterator_category(const _Deque_iterator<_Tp,_Ref,_Ptr>&)$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
std::iterator_category	stl/stl_hashtable.h	/^iterator_category(const _Hashtable_const_iterator<_Val,_Key,_HF,$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF, _ExK,_EqK,_All>&)
std::iterator_category	stl/stl_hashtable.h	/^iterator_category(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const back_insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const back_insert_iterator<_Container>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const front_insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const front_insert_iterator<_Container>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const insert_iterator<_Container>&)$/;"	f	namespace:std	signature:(const insert_iterator<_Container>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const istream_iterator<_Tp, _Dist>&)$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const ostream_iterator<_Tp>&) {$/;"	f	namespace:std	signature:(const ostream_iterator<_Tp>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const reverse_bidirectional_iterator<_BidirectionalIterator,$/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
std::iterator_category	stl/stl_iterator.h	/^iterator_category(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
std::iterator_category	stl/stl_iterator_base.h	/^inline output_iterator_tag iterator_category(const output_iterator&)$/;"	f	namespace:std	signature:(const output_iterator&)
std::iterator_category	stl/stl_iterator_base.h	/^inline random_access_iterator_tag iterator_category(const _Tp*)$/;"	f	namespace:std	signature:(const _Tp*)
std::iterator_category	stl/stl_iterator_base.h	/^iterator_category(const _Iter& __i) { return __iterator_category(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
std::iterator_category	stl/stl_iterator_base.h	/^iterator_category(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
std::iterator_category	stl/stl_iterator_base.h	/^iterator_category(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
std::iterator_category	stl/stl_iterator_base.h	/^iterator_category(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
std::iterator_category	stl/stl_iterator_base.h	/^iterator_category(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
std::iterator_category	stl/stl_list.h	/^iterator_category(const _List_iterator_base&)$/;"	f	namespace:std	signature:(const _List_iterator_base&)
std::iterator_category	stl/stl_raw_storage_iter.h	/^iterator_category(const raw_storage_iterator<_ForwardIterator, _Tp>&)$/;"	f	namespace:std	signature:(const raw_storage_iterator<_ForwardIterator, _Tp>&)
std::iterator_category	stl/stl_slist.h	/^inline forward_iterator_tag iterator_category(const _Slist_iterator_base&) {$/;"	f	namespace:std	signature:(const _Slist_iterator_base&)
std::iterator_category	stl/stl_tree.h	/^iterator_category(const _Rb_tree_base_iterator&) {$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator&)
std::iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits {$/;"	s	namespace:std
std::iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits<_Tp*> {$/;"	s	namespace:std
std::iterator_traits	stl/stl_iterator_base.h	/^struct iterator_traits<const _Tp*> {$/;"	s	namespace:std
std::iterator_traits::difference_type	stl/stl_iterator_base.h	/^  typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::difference_type	stl/stl_iterator_base.h	/^  typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::iterator_category	stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::iterator_category	stl/stl_iterator_base.h	/^  typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base.h	/^  typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::pointer	stl/stl_iterator_base.h	/^  typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base.h	/^  typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base.h	/^  typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::reference	stl/stl_iterator_base.h	/^  typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::value_type	stl/stl_iterator_base.h	/^  typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::value_type	stl/stl_iterator_base.h	/^  typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	access:public
std::less	stl/stl_function.h	/^struct less : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
std::less::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }$/;"	f	struct:std::less	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::less_equal	stl/stl_function.h	/^struct less_equal : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
std::less_equal::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }$/;"	f	struct:std::less_equal	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::lexicographical_compare	stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
std::lexicographical_compare	stl/stl_algobase.h	/^bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _Compare __comp)
std::lexicographical_compare	stl/stl_algobase.h	/^inline bool lexicographical_compare(const char* __first1, const char* __last1,$/;"	f	namespace:std	signature:(const char* __first1, const char* __last1, const char* __first2, const char* __last2)
std::lexicographical_compare	stl/stl_algobase.h	/^lexicographical_compare(const unsigned char* __first1,$/;"	f	namespace:std	signature:(const unsigned char* __first1, const unsigned char* __last1, const unsigned char* __first2, const unsigned char* __last2)
std::lexicographical_compare_3way	stl/stl_algobase.h	/^int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2)
std::list	stl/stl_list.h	/^class list : protected _List_base<_Tp, _Alloc> {$/;"	c	namespace:std	inherits:_List_base
std::list::_Base	stl/stl_list.h	/^  typedef _List_base<_Tp, _Alloc> _Base;$/;"	t	class:std::list	access:private
std::list::_Base::clear	stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	p	class:std::list::_Base	signature:()
std::list::_Integral	stl/stl_list.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
std::list::_M_assign_dispatch	stl/stl_list.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::list::_M_assign_dispatch	stl/stl_list.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::list	access:public	signature:(_Integer __n, _Integer __val, __true_type)
std::list::_M_assign_dispatch	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first2, _InputIter __last2,$/;"	f	class:std::list	signature:(_InputIter __first2, _InputIter __last2, __false_type)
std::list::_M_create_node	stl/stl_list.h	/^  _Node* _M_create_node()$/;"	f	class:std::list	access:protected	signature:()
std::list::_M_create_node	stl/stl_list.h	/^  _Node* _M_create_node(const _Tp& __x)$/;"	f	class:std::list	access:protected	signature:(const _Tp& __x)
std::list::_M_fill_assign	stl/stl_list.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::list	access:public	signature:(size_type __n, const _Tp& __val)
std::list::_M_fill_assign	stl/stl_list.h	/^void list<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::list	signature:(size_type __n, const _Tp& __val)
std::list::_M_fill_insert	stl/stl_list.h	/^  void _M_fill_insert(iterator __pos, size_type __n, const _Tp& __x); $/;"	p	class:std::list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
std::list::_M_fill_insert	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_fill_insert(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, size_type __n, const _Tp& __x)
std::list::_M_insert_dispatch	stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	f	class:std::list	access:public	signature:(iterator __pos, _Integer __n, _Integer __x, __true_type)
std::list::_M_insert_dispatch	stl/stl_list.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	p	class:std::list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::list::_M_insert_dispatch	stl/stl_list.h	/^list<_Tp, _Alloc>::_M_insert_dispatch(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, _InputIter __first, _InputIter __last, __false_type)
std::list::_M_put_node	stl/stl_list.h	/^    __STL_UNWIND(_M_put_node(__p));$/;"	p	signature:(__p)
std::list::_Node	stl/stl_list.h	/^  typedef _List_node<_Tp> _Node;$/;"	t	class:std::list	access:public
std::list::_Tp	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	p	signature:()
std::list::_Void_pointer	stl/stl_list.h	/^  typedef void* _Void_pointer;$/;"	t	class:std::list	access:protected
std::list::__STD::swap	stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	p	class:std::list::__STD	signature:(_M_node, __x._M_node)
std::list::__STL_CLASS_REQUIRES	stl/stl_list.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::list	access:private	signature:(_Tp, _Assignable)
std::list::__first	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	l
std::list::__first	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	l
std::list::__j	stl/stl_list.h	/^    iterator __j = __i;$/;"	l
std::list::__last	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	l
std::list::__last	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	l
std::list::__n	stl/stl_list.h	/^    _Node* __n = (_Node*) __position._M_node;$/;"	l
std::list::__n	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	l
std::list::__n	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	l
std::list::__next_node	stl/stl_list.h	/^    _List_node_base* __next_node = __position._M_node->_M_next;$/;"	l
std::list::__p	stl/stl_list.h	/^    _Node* __p = _M_get_node();$/;"	l
std::list::__prev_node	stl/stl_list.h	/^    _List_node_base* __prev_node = __position._M_node->_M_prev;$/;"	l
std::list::__result	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	l
std::list::__result	stl/stl_list.h	/^    size_type __result = 0;$/;"	l
std::list::__tmp	stl/stl_list.h	/^      _List_node_base* __tmp      = __position._M_node->_M_prev;$/;"	l
std::list::__tmp	stl/stl_list.h	/^    _Node* __tmp = _M_create_node(__x);$/;"	l
std::list::__tmp	stl/stl_list.h	/^    iterator __tmp = end();$/;"	l
std::list::__value	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	l
std::list::__x	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	l
std::list::__x	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	l
std::list::allocator_type	stl/stl_list.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::list	access:public
std::list::assign	stl/stl_list.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::list::assign	stl/stl_list.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:std::list	access:public	signature:(size_type __n, const _Tp& __val)
std::list::back	stl/stl_list.h	/^  const_reference back() const { return *(--end()); }$/;"	f	class:std::list	access:public	signature:() const
std::list::back	stl/stl_list.h	/^  reference back() { return *(--end()); }$/;"	f	class:std::list	access:public	signature:()
std::list::begin	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^    { insert(begin(), __first, __last); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^    { insert(begin(), __n, _Tp()); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^    { insert(begin(), __n, __value); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^    { insert(begin(), __x.begin(), __x.end()); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^    { this->insert(begin(), __first, __last); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^  const_iterator begin() const { return (_Node*)(_M_node->_M_next); }$/;"	f	class:std::list	access:public	signature:() const
std::list::begin	stl/stl_list.h	/^  iterator begin()             { return (_Node*)(_M_node->_M_next); }$/;"	f	class:std::list	access:public	signature:()
std::list::begin	stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	p	signature:()
std::list::begin	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	p	signature:()
std::list::clear	stl/stl_list.h	/^  void clear() { _Base::clear(); }$/;"	f	class:std::list	access:public	signature:()
std::list::const_iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;$/;"	t	class:std::list	access:public
std::list::const_pointer	stl/stl_list.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::list	access:public
std::list::const_reference	stl/stl_list.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::list	access:public
std::list::const_reverse_iterator	stl/stl_list.h	/^          const_reverse_iterator;$/;"	t	class:std::list	access:public
std::list::const_reverse_iterator	stl/stl_list.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::list	access:public
std::list::difference_type	stl/stl_list.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::list	access:public
std::list::empty	stl/stl_list.h	/^  bool empty() const { return _M_node->_M_next == _M_node; }$/;"	f	class:std::list	access:public	signature:() const
std::list::end	stl/stl_list.h	/^    distance(begin(), end(), __result);$/;"	p	signature:()
std::list::end	stl/stl_list.h	/^    { insert(begin(), __x.begin(), __x.end()); }$/;"	p	signature:()
std::list::end	stl/stl_list.h	/^  const_iterator end() const { return _M_node; }$/;"	f	class:std::list	access:public	signature:() const
std::list::end	stl/stl_list.h	/^  iterator end()             { return _M_node; }$/;"	f	class:std::list	access:public	signature:()
std::list::end	stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	p	signature:()
std::list::end	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	p	signature:()
std::list::erase	stl/stl_list.h	/^  iterator erase(iterator __first, iterator __last);$/;"	p	class:std::list	access:public	signature:(iterator __first, iterator __last)
std::list::erase	stl/stl_list.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::list	access:public	signature:(iterator __position)
std::list::erase	stl/stl_list.h	/^typename list<_Tp,_Alloc>::iterator list<_Tp, _Alloc>::erase(iterator __first, $/;"	f	class:std::list	signature:(iterator __first, iterator __last)
std::list::front	stl/stl_list.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::list	access:public	signature:() const
std::list::front	stl/stl_list.h	/^  reference front() { return *begin(); }$/;"	f	class:std::list	access:public	signature:()
std::list::get_allocator	stl/stl_list.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::list	access:public	signature:() const
std::list::insert	stl/stl_list.h	/^  iterator insert(iterator __position) { return insert(__position, _Tp()); }$/;"	f	class:std::list	access:public	signature:(iterator __position)
std::list::insert	stl/stl_list.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:std::list	access:public	signature:(iterator __position, const _Tp& __x)
std::list::insert	stl/stl_list.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::list	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
std::list::insert	stl/stl_list.h	/^  void insert(iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:std::list	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
std::list::insert	stl/stl_list.h	/^  void insert(iterator __position, const _Tp* __first, const _Tp* __last);$/;"	p	class:std::list	access:public	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
std::list::insert	stl/stl_list.h	/^  void insert(iterator __position,$/;"	p	class:std::list	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
std::list::insert	stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:std::list	signature:(iterator __position, const _Tp* __first, const _Tp* __last)
std::list::insert	stl/stl_list.h	/^list<_Tp, _Alloc>::insert(iterator __position,$/;"	f	class:std::list	signature:(iterator __position, const_iterator __first, const_iterator __last)
std::list::iterator	stl/stl_list.h	/^  typedef _List_iterator<_Tp,_Tp&,_Tp*>             iterator;$/;"	t	class:std::list	access:public
std::list::list	stl/stl_list.h	/^  explicit list(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:std::list	access:public	signature:(const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^  explicit list(size_type __n)$/;"	f	class:std::list	access:public	signature:(size_type __n)
std::list::list	stl/stl_list.h	/^  list(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::list	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^  list(const _Tp* __first, const _Tp* __last,$/;"	f	class:std::list	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^  list(const list<_Tp, _Alloc>& __x) : _Base(__x.get_allocator())$/;"	f	class:std::list	access:public	signature:(const list<_Tp, _Alloc>& __x)
std::list::list	stl/stl_list.h	/^  list(const_iterator __first, const_iterator __last,$/;"	f	class:std::list	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
std::list::list	stl/stl_list.h	/^  list(size_type __n, const _Tp& __value,$/;"	f	class:std::list	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
std::list::max_size	stl/stl_list.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::list	access:public	signature:() const
std::list::merge	stl/stl_list.h	/^  template <class _StrictWeakOrdering> void merge(list&, _StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(list&, _StrictWeakOrdering)
std::list::merge	stl/stl_list.h	/^  void merge(list& __x);$/;"	p	class:std::list	access:public	signature:(list& __x)
std::list::merge	stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x)$/;"	f	class:std::list	signature:(list<_Tp, _Alloc>& __x)
std::list::merge	stl/stl_list.h	/^void list<_Tp, _Alloc>::merge(list<_Tp, _Alloc>& __x,$/;"	f	class:std::list	signature:(list<_Tp, _Alloc>& __x, _StrictWeakOrdering __comp)
std::list::operator =	stl/stl_list.h	/^  list<_Tp, _Alloc>& operator=(const list<_Tp, _Alloc>& __x);$/;"	p	class:std::list	access:public	signature:(const list<_Tp, _Alloc>& __x)
std::list::operator =	stl/stl_list.h	/^list<_Tp, _Alloc>& list<_Tp, _Alloc>::operator=(const list<_Tp, _Alloc>& __x)$/;"	f	class:std::list	signature:(const list<_Tp, _Alloc>& __x)
std::list::pointer	stl/stl_list.h	/^  typedef value_type* pointer;$/;"	t	class:std::list	access:public
std::list::pop_back	stl/stl_list.h	/^  void pop_back() { $/;"	f	class:std::list	access:public	signature:()
std::list::pop_front	stl/stl_list.h	/^  void pop_front() { erase(begin()); }$/;"	f	class:std::list	access:public	signature:()
std::list::push_back	stl/stl_list.h	/^  void push_back() {insert(end());}$/;"	f	class:std::list	access:public	signature:()
std::list::push_back	stl/stl_list.h	/^  void push_back(const _Tp& __x) { insert(end(), __x); }$/;"	f	class:std::list	access:public	signature:(const _Tp& __x)
std::list::push_front	stl/stl_list.h	/^  void push_front() {insert(begin());}$/;"	f	class:std::list	access:public	signature:()
std::list::push_front	stl/stl_list.h	/^  void push_front(const _Tp& __x) { insert(begin(), __x); }$/;"	f	class:std::list	access:public	signature:(const _Tp& __x)
std::list::rbegin	stl/stl_list.h	/^  const_reverse_iterator rbegin() const $/;"	f	class:std::list	access:public	signature:() const
std::list::rbegin	stl/stl_list.h	/^  reverse_iterator rbegin() $/;"	f	class:std::list	access:public	signature:()
std::list::reference	stl/stl_list.h	/^  typedef value_type& reference;$/;"	t	class:std::list	access:public
std::list::remove	stl/stl_list.h	/^  void remove(const _Tp& __value);$/;"	p	class:std::list	access:public	signature:(const _Tp& __value)
std::list::remove	stl/stl_list.h	/^void list<_Tp, _Alloc>::remove(const _Tp& __value)$/;"	f	class:std::list	signature:(const _Tp& __value)
std::list::remove_if	stl/stl_list.h	/^  template <class _Predicate> void remove_if(_Predicate);$/;"	p	class:std::list	access:public	signature:(_Predicate)
std::list::remove_if	stl/stl_list.h	/^void list<_Tp, _Alloc>::remove_if(_Predicate __pred)$/;"	f	class:std::list	signature:(_Predicate __pred)
std::list::rend	stl/stl_list.h	/^  const_reverse_iterator rend() const$/;"	f	class:std::list	access:public	signature:() const
std::list::rend	stl/stl_list.h	/^  reverse_iterator rend()$/;"	f	class:std::list	access:public	signature:()
std::list::resize	stl/stl_list.h	/^  void resize(size_type __new_size) { this->resize(__new_size, _Tp()); }$/;"	f	class:std::list	access:public	signature:(size_type __new_size)
std::list::resize	stl/stl_list.h	/^  void resize(size_type __new_size, const _Tp& __x);$/;"	p	class:std::list	access:public	signature:(size_type __new_size, const _Tp& __x)
std::list::resize	stl/stl_list.h	/^void list<_Tp, _Alloc>::resize(size_type __new_size, const _Tp& __x)$/;"	f	class:std::list	signature:(size_type __new_size, const _Tp& __x)
std::list::reverse	stl/stl_list.h	/^  void reverse();$/;"	p	class:std::list	access:public	signature:()
std::list::reverse	stl/stl_list.h	/^inline void list<_Tp, _Alloc>::reverse() $/;"	f	class:std::list	signature:()
std::list::reverse_iterator	stl/stl_list.h	/^          reverse_iterator; $/;"	t	class:std::list	access:public
std::list::reverse_iterator	stl/stl_list.h	/^  typedef reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:std::list	access:public
std::list::size	stl/stl_list.h	/^  size_type size() const {$/;"	f	class:std::list	access:public	signature:() const
std::list::size_type	stl/stl_list.h	/^  typedef size_t size_type;$/;"	t	class:std::list	access:public
std::list::sort	stl/stl_list.h	/^  template <class _StrictWeakOrdering> void sort(_StrictWeakOrdering);$/;"	p	class:std::list	access:public	signature:(_StrictWeakOrdering)
std::list::sort	stl/stl_list.h	/^  void sort();$/;"	p	class:std::list	access:public	signature:()
std::list::sort	stl/stl_list.h	/^void list<_Tp, _Alloc>::sort()$/;"	f	class:std::list	signature:()
std::list::sort	stl/stl_list.h	/^void list<_Tp, _Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:std::list	signature:(_StrictWeakOrdering __comp)
std::list::splice	stl/stl_list.h	/^  void splice(iterator __position, list& __x) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list& __x)
std::list::splice	stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __first, iterator __last) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list&, iterator __first, iterator __last)
std::list::splice	stl/stl_list.h	/^  void splice(iterator __position, list&, iterator __i) {$/;"	f	class:std::list	access:public	signature:(iterator __position, list&, iterator __i)
std::list::swap	stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	f	class:std::list	access:public	signature:(list<_Tp, _Alloc>& __x)
std::list::transfer	stl/stl_list.h	/^  void transfer(iterator __position, iterator __first, iterator __last) {$/;"	f	class:std::list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
std::list::unique	stl/stl_list.h	/^  template <class _BinaryPredicate> void unique(_BinaryPredicate);$/;"	p	class:std::list	access:public	signature:(_BinaryPredicate)
std::list::unique	stl/stl_list.h	/^  void unique();$/;"	p	class:std::list	access:public	signature:()
std::list::unique	stl/stl_list.h	/^void list<_Tp, _Alloc>::unique()$/;"	f	class:std::list	signature:()
std::list::unique	stl/stl_list.h	/^void list<_Tp, _Alloc>::unique(_BinaryPredicate __binary_pred)$/;"	f	class:std::list	signature:(_BinaryPredicate __binary_pred)
std::list::value_type	stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	class:std::list	access:public
std::list::~list	stl/stl_list.h	/^  ~list() { }$/;"	f	class:std::list	access:public	signature:()
std::logical_and	stl/stl_function.h	/^struct logical_and : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
std::logical_and::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }$/;"	f	struct:std::logical_and	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::logical_not	stl/stl_function.h	/^struct logical_not : public unary_function<_Tp,bool>$/;"	s	namespace:std	inherits:unary_function
std::logical_not::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x) const { return !__x; }$/;"	f	struct:std::logical_not	access:public	signature:(const _Tp& __x) const
std::logical_or	stl/stl_function.h	/^struct logical_or : public binary_function<_Tp,_Tp,bool>$/;"	s	namespace:std	inherits:binary_function
std::logical_or::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }$/;"	f	struct:std::logical_or	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::lower_bound	stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
std::lower_bound	stl/stl_algo.h	/^inline _ForwardIter lower_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
std::make_heap	stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::make_heap	stl/stl_heap.h	/^make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::make_pair	stl/stl_pair.h	/^inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)$/;"	f	namespace:std	signature:(const _T1& __x, const _T2& __y)
std::malloc_alloc	stl/stl_alloc.h	/^typedef __malloc_alloc_template<0> malloc_alloc;$/;"	t	namespace:std
std::map	stl/stl_map.h	/^class map {$/;"	c	namespace:std
std::map::_M_t	stl/stl_map.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing map$/;"	m	class:std::map	access:private
std::map::_Rep_type	stl/stl_map.h	/^                   _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::map	access:private
std::map::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_map.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::map	access:public	signature:(_Compare, bool, _Key, _Key)
std::map::__STL_CLASS_REQUIRES	stl/stl_map.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::map	access:public	signature:(_Tp, _Assignable)
std::map::__STL_NULL_TMPL_ARGS	stl/stl_map.h	/^  operator< __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:std::map	access:friend	signature:(const map&, const map&)
std::map::__STL_NULL_TMPL_ARGS	stl/stl_map.h	/^  operator== __STL_NULL_TMPL_ARGS (const map&, const map&);$/;"	p	class:std::map	access:friend	signature:(const map&, const map&)
std::map::__i	stl/stl_map.h	/^    iterator __i = lower_bound(__k);$/;"	l
std::map::allocator_type	stl/stl_map.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::map	access:public
std::map::begin	stl/stl_map.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::begin	stl/stl_map.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:std::map	access:public	signature:()
std::map::clear	stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::map	access:public	signature:()
std::map::clear	stl/stl_map.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
std::map::const_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::map	access:public
std::map::const_pointer	stl/stl_map.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::map	access:public
std::map::const_reference	stl/stl_map.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::map	access:public
std::map::const_reverse_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::map	access:public
std::map::count	stl/stl_map.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::data_type	stl/stl_map.h	/^  typedef _Tp                   data_type;$/;"	t	class:std::map	access:public
std::map::difference_type	stl/stl_map.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::map	access:public
std::map::empty	stl/stl_map.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::end	stl/stl_map.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::end	stl/stl_map.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:std::map	access:public	signature:()
std::map::equal_range	stl/stl_map.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::equal_range	stl/stl_map.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::erase	stl/stl_map.h	/^    { _M_t.erase(__first, __last); }$/;"	p	signature:(__first, __last)
std::map::erase	stl/stl_map.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::erase	stl/stl_map.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:std::map	access:public	signature:(iterator __first, iterator __last)
std::map::erase	stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:std::map	access:public	signature:(iterator __position)
std::map::erase	stl/stl_map.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	p	signature:(__position)
std::map::find	stl/stl_map.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::find	stl/stl_map.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::get_allocator	stl/stl_map.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::insert	stl/stl_map.h	/^  iterator insert(iterator position, const value_type& __x)$/;"	f	class:std::map	access:public	signature:(iterator position, const value_type& __x)
std::map::insert	stl/stl_map.h	/^  pair<iterator,bool> insert(const value_type& __x) $/;"	f	class:std::map	access:public	signature:(const value_type& __x)
std::map::insert	stl/stl_map.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::map::insert	stl/stl_map.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last)
std::map::insert	stl/stl_map.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last)
std::map::insert_unique	stl/stl_map.h	/^    : _M_t(__comp, __a) { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
std::map::insert_unique	stl/stl_map.h	/^    _M_t.insert_unique(__first, __last);$/;"	p	signature:(__first, __last)
std::map::insert_unique	stl/stl_map.h	/^    { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
std::map::iterator	stl/stl_map.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:std::map	access:public
std::map::key_comp	stl/stl_map.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::key_compare	stl/stl_map.h	/^  typedef _Compare              key_compare;$/;"	t	class:std::map	access:public
std::map::key_type	stl/stl_map.h	/^  typedef _Key                  key_type;$/;"	t	class:std::map	access:public
std::map::lower_bound	stl/stl_map.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::lower_bound	stl/stl_map.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::map	stl/stl_map.h	/^  explicit map(const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::map	stl/stl_map.h	/^  map() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::map	access:public	signature:()
std::map::map	stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::map::map	stl/stl_map.h	/^  map(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::map	stl/stl_map.h	/^  map(const map<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::map	access:public	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x)
std::map::map	stl/stl_map.h	/^  map(const value_type* __first, const value_type* __last)$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last)
std::map::map	stl/stl_map.h	/^  map(const value_type* __first,$/;"	f	class:std::map	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::map	stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last)$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last)
std::map::map	stl/stl_map.h	/^  map(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:std::map	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::map::mapped_type	stl/stl_map.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:std::map	access:public
std::map::max_size	stl/stl_map.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::operator <	stl/stl_map.h	/^  friend bool operator< (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
std::map::operator =	stl/stl_map.h	/^  operator=(const map<_Key, _Tp, _Compare, _Alloc>& __x)$/;"	f	class:std::map	access:public	signature:(const map<_Key, _Tp, _Compare, _Alloc>& __x)
std::map::operator ==	stl/stl_map.h	/^  friend bool operator== (const map<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::map	access:friend	signature:(const map<_K1, _T1, _C1, _A1>&, const map<_K1, _T1, _C1, _A1>&)
std::map::operator []	stl/stl_map.h	/^  _Tp& operator[](const key_type& __k) {$/;"	f	class:std::map	access:public	signature:(const key_type& __k)
std::map::pointer	stl/stl_map.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:std::map	access:public
std::map::rbegin	stl/stl_map.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::rbegin	stl/stl_map.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:std::map	access:public	signature:()
std::map::reference	stl/stl_map.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:std::map	access:public
std::map::rend	stl/stl_map.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::rend	stl/stl_map.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:std::map	access:public	signature:()
std::map::reverse_iterator	stl/stl_map.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:std::map	access:public
std::map::size	stl/stl_map.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::map	access:public	signature:() const
std::map::size_type	stl/stl_map.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::map	access:public
std::map::swap	stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::map	access:public	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x)
std::map::swap	stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
std::map::upper_bound	stl/stl_map.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
std::map::upper_bound	stl/stl_map.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
std::map::value_comp	stl/stl_map.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:std::map	access:public	signature:() const
std::map::value_compare	stl/stl_map.h	/^  class value_compare$/;"	c	class:std::map	inherits:binary_function	access:public
std::map::value_compare::comp	stl/stl_map.h	/^    _Compare comp;$/;"	m	class:std::map::value_compare	access:protected
std::map::value_compare::operator ()	stl/stl_map.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:std::map::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
std::map::value_compare::value_compare	stl/stl_map.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:std::map::value_compare	access:protected	signature:(_Compare __c)
std::map::value_type	stl/stl_map.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:std::map	access:public
std::max	stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
std::max	stl/stl_algobase.h	/^inline const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
std::max_element	stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
std::max_element	stl/stl_algo.h	/^_ForwardIter max_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
std::mem_fun1_ref_t	stl/stl_function.h	/^class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_ref_t	stl/stl_function.h	/^class mem_fun1_ref_t<void, _Tp, _Arg>$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
std::mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_ref_t	access:private
std::mem_fun1_ref_t::_M_f	stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	p	signature:(__x)
std::mem_fun1_ref_t::_Ret	stl/stl_function.h	/^  explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp::*__pf)
std::mem_fun1_ref_t::mem_fun1_ref_t	stl/stl_function.h	/^  explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
std::mem_fun1_ref_t::operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
std::mem_fun1_ref_t::operator ()	stl/stl_function.h	/^  void operator()(_Tp& __r, _Arg __x) const { (__r.*_M_f)(__x); }$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Tp& __r, _Arg __x) const
std::mem_fun1_t	stl/stl_function.h	/^class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_t	stl/stl_function.h	/^class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {$/;"	c	namespace:std	inherits:binary_function
std::mem_fun1_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
std::mem_fun1_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)(_Arg);$/;"	m	class:std::mem_fun1_t	access:private
std::mem_fun1_t::_M_f	stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	p	signature:(__x)
std::mem_fun1_t::_Ret	stl/stl_function.h	/^  explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp::*__pf)
std::mem_fun1_t::mem_fun1_t	stl/stl_function.h	/^  explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}$/;"	f	class:std::mem_fun1_t	access:public	signature:(void (_Tp::*__pf)(_Arg))
std::mem_fun1_t::operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
std::mem_fun1_t::operator ()	stl/stl_function.h	/^  void operator()(_Tp* __p, _Arg __x) const { (__p->*_M_f)(__x); }$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Tp* __p, _Arg __x) const
std::mem_fun_ref_t	stl/stl_function.h	/^class mem_fun_ref_t : public unary_function<_Tp,_Ret> {$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_ref_t	stl/stl_function.h	/^class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_ref_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
std::mem_fun_ref_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_ref_t	access:private
std::mem_fun_ref_t::_M_f	stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	p	signature:()
std::mem_fun_ref_t::_Ret	stl/stl_function.h	/^  explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp::*__pf)
std::mem_fun_ref_t::mem_fun_ref_t	stl/stl_function.h	/^  explicit mem_fun_ref_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(void (_Tp::*__pf)())
std::mem_fun_ref_t::operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
std::mem_fun_ref_t::operator ()	stl/stl_function.h	/^  void operator()(_Tp& __r) const { (__r.*_M_f)(); }$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Tp& __r) const
std::mem_fun_t	stl/stl_function.h	/^class mem_fun_t : public unary_function<_Tp*,_Ret> {$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_t	stl/stl_function.h	/^class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {$/;"	c	namespace:std	inherits:unary_function
std::mem_fun_t::_M_f	stl/stl_function.h	/^  _Ret (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
std::mem_fun_t::_M_f	stl/stl_function.h	/^  void (_Tp::*_M_f)();$/;"	m	class:std::mem_fun_t	access:private
std::mem_fun_t::_M_f	stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	p	signature:()
std::mem_fun_t::_Ret	stl/stl_function.h	/^  explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp::*__pf)
std::mem_fun_t::mem_fun_t	stl/stl_function.h	/^  explicit mem_fun_t(void (_Tp::*__pf)()) : _M_f(__pf) {}$/;"	f	class:std::mem_fun_t	access:public	signature:(void (_Tp::*__pf)())
std::mem_fun_t::operator ()	stl/stl_function.h	/^  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
std::mem_fun_t::operator ()	stl/stl_function.h	/^  void operator()(_Tp* __p) const { (__p->*_M_f)(); }$/;"	f	class:std::mem_fun_t	access:public	signature:(_Tp* __p) const
std::merge	stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
std::merge	stl/stl_algo.h	/^_OutputIter merge(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
std::merge	stl/stl_list.h	/^        __counter[__i].merge(__carry);$/;"	p	signature:(__carry)
std::merge	stl/stl_list.h	/^        __counter[__i].merge(__carry, __comp);$/;"	p	signature:(__carry, __comp)
std::merge	stl/stl_list.h	/^      __counter[__i].merge(__counter[__i-1]);$/;"	p	signature:(__counter[__i-1])
std::merge	stl/stl_list.h	/^      __counter[__i].merge(__counter[__i-1], __comp);$/;"	p	signature:(__counter[__i-1], __comp)
std::merge	stl/stl_slist.h	/^        __counter[__i].merge(__carry);$/;"	p	signature:(__carry)
std::merge	stl/stl_slist.h	/^        __counter[__i].merge(__carry, __comp);$/;"	p	signature:(__carry, __comp)
std::merge	stl/stl_slist.h	/^      __counter[__i].merge(__counter[__i-1]);$/;"	p	signature:(__counter[__i-1])
std::merge	stl/stl_slist.h	/^      __counter[__i].merge(__counter[__i-1], __comp);$/;"	p	signature:(__counter[__i-1], __comp)
std::min	stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b)
std::min	stl/stl_algobase.h	/^inline const _Tp& min(const _Tp& __a, const _Tp& __b, _Compare __comp) {$/;"	f	namespace:std	signature:(const _Tp& __a, const _Tp& __b, _Compare __comp)
std::min_element	stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
std::min_element	stl/stl_algo.h	/^_ForwardIter min_element(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Compare __comp)
std::minus	stl/stl_function.h	/^struct minus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
std::minus::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }$/;"	f	struct:std::minus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::mismatch	stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)
std::mismatch	stl/stl_algobase.h	/^pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _BinaryPredicate __binary_pred)
std::modulus	stl/stl_function.h	/^struct modulus : public binary_function<_Tp,_Tp,_Tp> $/;"	s	namespace:std	inherits:binary_function
std::modulus::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }$/;"	f	struct:std::modulus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::multimap	stl/stl_multimap.h	/^class multimap {$/;"	c	namespace:std
std::multimap::_M_t	stl/stl_multimap.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multimap$/;"	m	class:std::multimap	access:private
std::multimap::_Rep_type	stl/stl_multimap.h	/^                  _Select1st<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::multimap	access:private
std::multimap::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_multimap.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::multimap	access:private	signature:(_Compare, bool, _Key, _Key)
std::multimap::__STL_CLASS_REQUIRES	stl/stl_multimap.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::multimap	access:private	signature:(_Tp, _Assignable)
std::multimap::__STL_NULL_TMPL_ARGS	stl/stl_multimap.h	/^  operator< __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:std::multimap	access:friend	signature:(const multimap&, const multimap&)
std::multimap::__STL_NULL_TMPL_ARGS	stl/stl_multimap.h	/^  operator== __STL_NULL_TMPL_ARGS (const multimap&, const multimap&);$/;"	p	class:std::multimap	access:friend	signature:(const multimap&, const multimap&)
std::multimap::allocator_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::multimap	access:public
std::multimap::begin	stl/stl_multimap.h	/^  const_iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::begin	stl/stl_multimap.h	/^  iterator begin() { return _M_t.begin(); }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::clear	stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::clear	stl/stl_multimap.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
std::multimap::const_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_iterator const_iterator; $/;"	t	class:std::multimap	access:public
std::multimap::const_pointer	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::multimap	access:public
std::multimap::const_reference	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::multimap	access:public
std::multimap::const_reverse_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multimap	access:public
std::multimap::count	stl/stl_multimap.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::data_type	stl/stl_multimap.h	/^  typedef _Tp                   data_type;$/;"	t	class:std::multimap	access:public
std::multimap::difference_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::multimap	access:public
std::multimap::empty	stl/stl_multimap.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::end	stl/stl_multimap.h	/^  const_iterator end() const { return _M_t.end(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::end	stl/stl_multimap.h	/^  iterator end() { return _M_t.end(); }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::equal_range	stl/stl_multimap.h	/^   pair<iterator,iterator> equal_range(const key_type& __x) {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::equal_range	stl/stl_multimap.h	/^  pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::erase	stl/stl_multimap.h	/^    { _M_t.erase(__first, __last); }$/;"	p	signature:(__first, __last)
std::multimap::erase	stl/stl_multimap.h	/^  size_type erase(const key_type& __x) { return _M_t.erase(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::erase	stl/stl_multimap.h	/^  void erase(iterator __first, iterator __last)$/;"	f	class:std::multimap	access:public	signature:(iterator __first, iterator __last)
std::multimap::erase	stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	f	class:std::multimap	access:public	signature:(iterator __position)
std::multimap::erase	stl/stl_multimap.h	/^  void erase(iterator __position) { _M_t.erase(__position); }$/;"	p	signature:(__position)
std::multimap::find	stl/stl_multimap.h	/^  const_iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::find	stl/stl_multimap.h	/^  iterator find(const key_type& __x) { return _M_t.find(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::get_allocator	stl/stl_multimap.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::insert	stl/stl_multimap.h	/^  iterator insert(const value_type& __x) { return _M_t.insert_equal(__x); }$/;"	f	class:std::multimap	access:public	signature:(const value_type& __x)
std::multimap::insert	stl/stl_multimap.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::multimap	access:public	signature:(iterator __position, const value_type& __x)
std::multimap::insert	stl/stl_multimap.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multimap::insert	stl/stl_multimap.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last)
std::multimap::insert	stl/stl_multimap.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last)
std::multimap::insert_equal	stl/stl_multimap.h	/^    : _M_t(__comp, __a) { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
std::multimap::insert_equal	stl/stl_multimap.h	/^    _M_t.insert_equal(__first, __last);$/;"	p	signature:(__first, __last)
std::multimap::insert_equal	stl/stl_multimap.h	/^    { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
std::multimap::iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::iterator iterator;$/;"	t	class:std::multimap	access:public
std::multimap::key_comp	stl/stl_multimap.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::key_compare	stl/stl_multimap.h	/^  typedef _Compare              key_compare;$/;"	t	class:std::multimap	access:public
std::multimap::key_type	stl/stl_multimap.h	/^  typedef _Key                  key_type;$/;"	t	class:std::multimap	access:public
std::multimap::lower_bound	stl/stl_multimap.h	/^  const_iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::lower_bound	stl/stl_multimap.h	/^  iterator lower_bound(const key_type& __x) {return _M_t.lower_bound(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::mapped_type	stl/stl_multimap.h	/^  typedef _Tp                   mapped_type;$/;"	t	class:std::multimap	access:public
std::multimap::max_size	stl/stl_multimap.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::multimap	stl/stl_multimap.h	/^  explicit multimap(const _Compare& __comp,$/;"	f	class:std::multimap	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::multimap	stl/stl_multimap.h	/^  multimap() : _M_t(_Compare(), allocator_type()) { }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multimap	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) : _M_t(__x._M_t) { }$/;"	f	class:std::multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last)$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last)
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(const value_type* __first, const value_type* __last,$/;"	f	class:std::multimap	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last)$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last)
std::multimap::multimap	stl/stl_multimap.h	/^  multimap(const_iterator __first, const_iterator __last,$/;"	f	class:std::multimap	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multimap::operator <	stl/stl_multimap.h	/^  friend bool operator< (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
std::multimap::operator =	stl/stl_multimap.h	/^  operator=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x) {$/;"	f	class:std::multimap	access:public	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x)
std::multimap::operator ==	stl/stl_multimap.h	/^  friend bool operator== (const multimap<_K1, _T1, _C1, _A1>&,$/;"	p	class:std::multimap	access:friend	signature:(const multimap<_K1, _T1, _C1, _A1>&, const multimap<_K1, _T1, _C1, _A1>&)
std::multimap::pointer	stl/stl_multimap.h	/^  typedef typename _Rep_type::pointer pointer;$/;"	t	class:std::multimap	access:public
std::multimap::rbegin	stl/stl_multimap.h	/^  const_reverse_iterator rbegin() const { return _M_t.rbegin(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::rbegin	stl/stl_multimap.h	/^  reverse_iterator rbegin() { return _M_t.rbegin(); }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::reference	stl/stl_multimap.h	/^  typedef typename _Rep_type::reference reference;$/;"	t	class:std::multimap	access:public
std::multimap::rend	stl/stl_multimap.h	/^  const_reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::rend	stl/stl_multimap.h	/^  reverse_iterator rend() { return _M_t.rend(); }$/;"	f	class:std::multimap	access:public	signature:()
std::multimap::reverse_iterator	stl/stl_multimap.h	/^  typedef typename _Rep_type::reverse_iterator reverse_iterator;$/;"	t	class:std::multimap	access:public
std::multimap::size	stl/stl_multimap.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::size_type	stl/stl_multimap.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::multimap	access:public
std::multimap::swap	stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::multimap	access:public	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x)
std::multimap::swap	stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
std::multimap::upper_bound	stl/stl_multimap.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
std::multimap::upper_bound	stl/stl_multimap.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
std::multimap::value_comp	stl/stl_multimap.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:std::multimap	access:public	signature:() const
std::multimap::value_compare	stl/stl_multimap.h	/^  class value_compare : public binary_function<value_type, value_type, bool> {$/;"	c	class:std::multimap	inherits:binary_function	access:public
std::multimap::value_compare::comp	stl/stl_multimap.h	/^    _Compare comp;$/;"	m	class:std::multimap::value_compare	access:protected
std::multimap::value_compare::operator ()	stl/stl_multimap.h	/^    bool operator()(const value_type& __x, const value_type& __y) const {$/;"	f	class:std::multimap::value_compare	access:public	signature:(const value_type& __x, const value_type& __y) const
std::multimap::value_compare::value_compare	stl/stl_multimap.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
std::multimap::value_type	stl/stl_multimap.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:std::multimap	access:public
std::multiplies	stl/stl_function.h	/^struct multiplies : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
std::multiplies::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }$/;"	f	struct:std::multiplies	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::multiset	stl/stl_multiset.h	/^class multiset {$/;"	c	namespace:std
std::multiset::_M_t	stl/stl_multiset.h	/^    _M_t.erase((_Rep_iterator&)__first, (_Rep_iterator&)__last); $/;"	p	signature:(_Rep_iterator&)__first, (_Rep_iterator&)__last
std::multiset::_M_t	stl/stl_multiset.h	/^    _M_t.erase((_Rep_iterator&)__position); $/;"	p	signature:(_Rep_iterator&)__position
std::multiset::_M_t	stl/stl_multiset.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing multiset$/;"	m	class:std::multiset	access:private
std::multiset::_Rep_iterator	stl/stl_multiset.h	/^    typedef typename _Rep_type::iterator _Rep_iterator;$/;"	t
std::multiset::_Rep_type	stl/stl_multiset.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::multiset	access:private
std::multiset::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_multiset.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::multiset	access:private	signature:(_Compare, bool, _Key, _Key)
std::multiset::__STL_CLASS_REQUIRES	stl/stl_multiset.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::multiset	access:private	signature:(_Key, _Assignable)
std::multiset::__STL_NULL_TMPL_ARGS	stl/stl_multiset.h	/^  operator< __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:std::multiset	access:friend	signature:(const multiset&, const multiset&)
std::multiset::__STL_NULL_TMPL_ARGS	stl/stl_multiset.h	/^  operator== __STL_NULL_TMPL_ARGS (const multiset&, const multiset&);$/;"	p	class:std::multiset	access:friend	signature:(const multiset&, const multiset&)
std::multiset::allocator_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::multiset	access:public
std::multiset::begin	stl/stl_multiset.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::clear	stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::multiset	access:public	signature:()
std::multiset::clear	stl/stl_multiset.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
std::multiset::const_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::const_pointer	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::multiset	access:public
std::multiset::const_reference	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::multiset	access:public
std::multiset::const_reverse_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::count	stl/stl_multiset.h	/^  size_type count(const key_type& __x) const { return _M_t.count(__x); }$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::difference_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::multiset	access:public
std::multiset::empty	stl/stl_multiset.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::end	stl/stl_multiset.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::equal_range	stl/stl_multiset.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::erase	stl/stl_multiset.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:std::multiset	access:public	signature:(const key_type& __x)
std::multiset::erase	stl/stl_multiset.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:std::multiset	access:public	signature:(iterator __first, iterator __last)
std::multiset::erase	stl/stl_multiset.h	/^  void erase(iterator __position) { $/;"	f	class:std::multiset	access:public	signature:(iterator __position)
std::multiset::find	stl/stl_multiset.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::get_allocator	stl/stl_multiset.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::insert	stl/stl_multiset.h	/^  iterator insert(const value_type& __x) { $/;"	f	class:std::multiset	access:public	signature:(const value_type& __x)
std::multiset::insert	stl/stl_multiset.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::multiset	access:public	signature:(iterator __position, const value_type& __x)
std::multiset::insert	stl/stl_multiset.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multiset::insert	stl/stl_multiset.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last)
std::multiset::insert	stl/stl_multiset.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last)
std::multiset::insert_equal	stl/stl_multiset.h	/^    : _M_t(__comp, __a) { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
std::multiset::insert_equal	stl/stl_multiset.h	/^    _M_t.insert_equal(__first, __last);$/;"	p	signature:(__first, __last)
std::multiset::insert_equal	stl/stl_multiset.h	/^    { _M_t.insert_equal(__first, __last); }$/;"	p	signature:(__first, __last)
std::multiset::iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:std::multiset	access:public
std::multiset::key_comp	stl/stl_multiset.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::key_compare	stl/stl_multiset.h	/^  typedef _Compare key_compare;$/;"	t	class:std::multiset	access:public
std::multiset::key_type	stl/stl_multiset.h	/^  typedef _Key     key_type;$/;"	t	class:std::multiset	access:public
std::multiset::lower_bound	stl/stl_multiset.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::max_size	stl/stl_multiset.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::multiset	stl/stl_multiset.h	/^  explicit multiset(const _Compare& __comp,$/;"	f	class:std::multiset	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::multiset	stl/stl_multiset.h	/^  multiset() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::multiset	access:public	signature:()
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::multiset	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(const multiset<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last)$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last)
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(const value_type* __first, const value_type* __last,$/;"	f	class:std::multiset	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last)$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last)
std::multiset::multiset	stl/stl_multiset.h	/^  multiset(const_iterator __first, const_iterator __last,$/;"	f	class:std::multiset	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::multiset::operator <	stl/stl_multiset.h	/^  friend bool operator< (const multiset<_K1,_C1,_A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
std::multiset::operator =	stl/stl_multiset.h	/^  operator=(const multiset<_Key,_Compare,_Alloc>& __x) {$/;"	f	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc>& __x)
std::multiset::operator ==	stl/stl_multiset.h	/^  friend bool operator== (const multiset<_K1,_C1,_A1>&,$/;"	p	class:std::multiset	access:friend	signature:(const multiset<_K1,_C1,_A1>&, const multiset<_K1,_C1,_A1>&)
std::multiset::pointer	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:std::multiset	access:public
std::multiset::rbegin	stl/stl_multiset.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::reference	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:std::multiset	access:public
std::multiset::rend	stl/stl_multiset.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::reverse_iterator	stl/stl_multiset.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:std::multiset	access:public
std::multiset::size	stl/stl_multiset.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::size_type	stl/stl_multiset.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::multiset	access:public
std::multiset::swap	stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::multiset	access:public	signature:(multiset<_Key,_Compare,_Alloc>& __x)
std::multiset::swap	stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
std::multiset::upper_bound	stl/stl_multiset.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
std::multiset::value_comp	stl/stl_multiset.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multiset	access:public	signature:() const
std::multiset::value_compare	stl/stl_multiset.h	/^  typedef _Compare value_compare;$/;"	t	class:std::multiset	access:public
std::multiset::value_type	stl/stl_multiset.h	/^  typedef _Key     value_type;$/;"	t	class:std::multiset	access:public
std::negate	stl/stl_function.h	/^struct negate : public unary_function<_Tp,_Tp> $/;"	s	namespace:std	inherits:unary_function
std::negate::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x) const { return -__x; }$/;"	f	struct:std::negate	access:public	signature:(const _Tp& __x) const
std::next_permutation	stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
std::next_permutation	stl/stl_algo.h	/^bool next_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
std::not1	stl/stl_function.h	/^not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
std::not2	stl/stl_function.h	/^not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate& __pred)
std::not_equal_to	stl/stl_function.h	/^struct not_equal_to : public binary_function<_Tp,_Tp,bool> $/;"	s	namespace:std	inherits:binary_function
std::not_equal_to::operator ()	stl/stl_function.h	/^  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }$/;"	f	struct:std::not_equal_to	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::nth_element	stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last)
std::nth_element	stl/stl_algo.h	/^inline void nth_element(_RandomAccessIter __first, _RandomAccessIter __nth,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __nth, _RandomAccessIter __last, _Compare __comp)
std::operator !=	stl/stl_alloc.h	/^inline bool operator!=(const __default_alloc_template<__threads, __inst>&,$/;"	f	namespace:std	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
std::operator !=	stl/stl_alloc.h	/^inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
std::operator !=	stl/stl_bvector.h	/^operator!=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator !=	stl/stl_deque.h	/^inline bool operator!=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator !=	stl/stl_hash_map.h	/^operator!=(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
std::operator !=	stl/stl_hash_map.h	/^operator!=(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
std::operator !=	stl/stl_hash_set.h	/^operator!=(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator !=	stl/stl_hash_set.h	/^operator!=(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator !=	stl/stl_hashtable.h	/^inline bool operator!=(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
std::operator !=	stl/stl_iterator.h	/^inline bool operator!=($/;"	f	namespace:std	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
std::operator !=	stl/stl_iterator.h	/^inline bool operator!=(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
std::operator !=	stl/stl_iterator.h	/^inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
std::operator !=	stl/stl_iterator.h	/^inline bool operator!=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator !=	stl/stl_iterator.h	/^operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
std::operator !=	stl/stl_iterator.h	/^operator!=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator !=	stl/stl_list.h	/^inline bool operator!=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator !=	stl/stl_map.h	/^inline bool operator!=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator !=	stl/stl_multimap.h	/^inline bool operator!=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator !=	stl/stl_multiset.h	/^inline bool operator!=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator !=	stl/stl_pair.h	/^inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator !=	stl/stl_queue.h	/^operator!=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
std::operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator !=	stl/stl_rope.h	/^inline bool operator!= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator !=	stl/stl_rope.h	/^operator!= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
std::operator !=	stl/stl_set.h	/^inline bool operator!=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator !=	stl/stl_slist.h	/^operator!=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator !=	stl/stl_stack.h	/^bool operator!=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator !=	stl/stl_tree.h	/^inline bool operator!=(const _Rb_tree_base_iterator& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
std::operator !=	stl/stl_tree.h	/^operator!=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator !=	stl/stl_vector.h	/^operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator +	stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_const_iterator& __x)
std::operator +	stl/stl_bvector.h	/^operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Bit_iterator& __x)
std::operator +	stl/stl_deque.h	/^operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
std::operator +	stl/stl_iterator.h	/^operator+(_Dist __n,$/;"	f	namespace:std	signature:(_Dist __n, const reverse_iterator<_RandAccIter, _Tp, _Ref, _Dist>& __x)
std::operator +	stl/stl_iterator.h	/^operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	signature:(typename reverse_iterator<_Iterator>::difference_type __n, const reverse_iterator<_Iterator>& __x)
std::operator +	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator +	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
std::operator +	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator +	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator+$/;"	p	namespace:std	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
std::operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
std::operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
std::operator +	stl/stl_rope.h	/^operator+ (const rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::operator +	stl/stl_rope.h	/^operator+(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator +	stl/stl_rope.h	/^operator+(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator +	stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x) {$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Rope_const_iterator<_CharT,_Alloc>& __x)
std::operator +	stl/stl_rope.h	/^operator+(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x) {$/;"	f	namespace:std	signature:(ptrdiff_t __n, const _Rope_iterator<_CharT,_Alloc>& __x)
std::operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
std::operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
std::operator +	stl/stl_rope.h	/^rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,$/;"	p	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left, _CharT __right) {$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, _CharT __right)
std::operator +=	stl/stl_rope.h	/^operator+= (rope<_CharT,_Alloc>& __left,$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __left, const _CharT* __right)
std::operator -	stl/stl_bvector.h	/^operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {$/;"	f	namespace:std	signature:(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
std::operator -	stl/stl_iterator.h	/^operator-(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator -	stl/stl_iterator.h	/^operator-(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator -	stl/stl_rope.h	/^_Rope_const_iterator<_CharT,_Alloc> operator-$/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator -	stl/stl_rope.h	/^_Rope_iterator<_CharT,_Alloc> operator-$/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator -	stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator -	stl/stl_rope.h	/^inline ptrdiff_t operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator -	stl/stl_rope.h	/^operator-(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n) {$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator -	stl/stl_rope.h	/^operator-(const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, ptrdiff_t __n)
std::operator -	stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator -	stl/stl_rope.h	/^ptrdiff_t operator- $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator <	stl/stl_bvector.h	/^operator<(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator <	stl/stl_deque.h	/^inline bool operator<(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator <	stl/stl_iterator.h	/^inline bool operator<(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator <	stl/stl_iterator.h	/^operator<(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator <	stl/stl_list.h	/^inline bool operator<(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator <	stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <	stl/stl_map.h	/^inline bool operator<(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <	stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <	stl/stl_multimap.h	/^inline bool operator<(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <	stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator <	stl/stl_multiset.h	/^inline bool operator<(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator <	stl/stl_pair.h	/^inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator <	stl/stl_queue.h	/^inline bool operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	namespace:std	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
std::operator <	stl/stl_queue.h	/^operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator <	stl/stl_rope.h	/^bool operator< $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator <	stl/stl_rope.h	/^bool operator< $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator <	stl/stl_rope.h	/^inline bool operator< (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator <	stl/stl_rope.h	/^inline bool operator< (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator <	stl/stl_rope.h	/^operator< (const rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::operator <	stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator <	stl/stl_set.h	/^inline bool operator<(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator <	stl/stl_slist.h	/^operator<(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator <	stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator <	stl/stl_stack.h	/^bool operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator <	stl/stl_tree.h	/^operator<(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator <	stl/stl_vector.h	/^operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator <<	stl/ropeimpl.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	f	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
std::operator <<	stl/stl_rope.h	/^  basic_ostream<_CharT, _Traits>& operator<<$/;"	p	namespace:std	signature:(basic_ostream<_CharT, _Traits>& __o, const rope<_CharT, _Alloc>& __r)
std::operator <<	stl/stl_rope.h	/^  ostream& operator<< (ostream& __o, const rope<_CharT, _Alloc>& __r);$/;"	p	namespace:std	signature:(ostream& __o, const rope<_CharT, _Alloc>& __r)
std::operator <=	stl/stl_bvector.h	/^inline bool operator<=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator <=	stl/stl_deque.h	/^inline bool operator<=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator <=	stl/stl_iterator.h	/^inline bool operator<=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator <=	stl/stl_iterator.h	/^operator<=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator <=	stl/stl_list.h	/^inline bool operator<=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator <=	stl/stl_map.h	/^inline bool operator<=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <=	stl/stl_multimap.h	/^inline bool operator<=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator <=	stl/stl_multiset.h	/^inline bool operator<=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator <=	stl/stl_pair.h	/^inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator <=	stl/stl_queue.h	/^operator<=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator <=	stl/stl_rope.h	/^inline bool operator<= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator <=	stl/stl_rope.h	/^inline bool operator<= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator <=	stl/stl_rope.h	/^operator<= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
std::operator <=	stl/stl_set.h	/^inline bool operator<=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator <=	stl/stl_slist.h	/^operator<=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator <=	stl/stl_stack.h	/^bool operator<=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator <=	stl/stl_tree.h	/^operator<=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator <=	stl/stl_vector.h	/^operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator ==	stl/stl_alloc.h	/^inline bool operator==(const __default_alloc_template<__threads, __inst>&,$/;"	f	namespace:std	signature:(const __default_alloc_template<__threads, __inst>&, const __default_alloc_template<__threads, __inst>&)
std::operator ==	stl/stl_alloc.h	/^inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) $/;"	f	namespace:std	signature:(const allocator<_T1>&, const allocator<_T2>&)
std::operator ==	stl/stl_bvector.h	/^operator==(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator ==	stl/stl_deque.h	/^inline bool operator==(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator ==	stl/stl_hash_map.h	/^inline bool operator==(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&,$/;"	p	namespace:std	signature:(const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&, const hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc>&)
std::operator ==	stl/stl_hash_map.h	/^operator==(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, const hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
std::operator ==	stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
std::operator ==	stl/stl_hash_map.h	/^operator==(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1,$/;"	p	namespace:std	signature:(const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm1, const hash_multimap<_Key,_Tp,_HF,_EqKey,_Alloc>& __hm2)
std::operator ==	stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator ==	stl/stl_hash_set.h	/^operator==(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	namespace:std	signature:(const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator ==	stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator ==	stl/stl_hash_set.h	/^operator==(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	p	namespace:std	signature:(const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs1, const hash_set<_Value,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::operator ==	stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	f	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
std::operator ==	stl/stl_hashtable.h	/^bool operator==(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1,$/;"	p	namespace:std	signature:(const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht1, const hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>& __ht2)
std::operator ==	stl/stl_iterator.h	/^inline bool operator==($/;"	f	namespace:std	signature:( const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __x, const reverse_bidirectional_iterator<_BiIter, _Tp, _Ref, _Distance>& __y)
std::operator ==	stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Dist>&,$/;"	p	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&, const istream_iterator<_Tp, _Dist>&)
std::operator ==	stl/stl_iterator.h	/^inline bool operator==(const istream_iterator<_Tp, _Distance>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Distance>& __x, const istream_iterator<_Tp, _Distance>& __y)
std::operator ==	stl/stl_iterator.h	/^inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,$/;"	f	namespace:std	signature:(const istreambuf_iterator<_CharT, _Traits>& __x, const istreambuf_iterator<_CharT, _Traits>& __y)
std::operator ==	stl/stl_iterator.h	/^inline bool operator==(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator ==	stl/stl_iterator.h	/^operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x, const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
std::operator ==	stl/stl_iterator.h	/^operator==(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator ==	stl/stl_list.h	/^operator==(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator ==	stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_map.h	/^inline bool operator==(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_multimap.h	/^inline bool operator==(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_multiset.h	/^inline bool operator==(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_pair.h	/^inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator ==	stl/stl_queue.h	/^inline bool operator==(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);$/;"	p	namespace:std	signature:(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&)
std::operator ==	stl/stl_queue.h	/^operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator ==	stl/stl_rope.h	/^bool operator== $/;"	p	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^bool operator== $/;"	p	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	p	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x, const _Rope_char_ptr_proxy<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^inline bool operator== (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator ==	stl/stl_rope.h	/^operator== (const rope<_CharT,_Alloc>& __left, $/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::operator ==	stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_set.h	/^inline bool operator==(const set<_Key,_Compare,_Alloc>& __x, $/;"	p	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_slist.h	/^operator==(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator ==	stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator ==	stl/stl_stack.h	/^bool operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);$/;"	p	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator ==	stl/stl_tree.h	/^inline bool operator==(const _Rb_tree_base_iterator& __x,$/;"	f	namespace:std	signature:(const _Rb_tree_base_iterator& __x, const _Rb_tree_base_iterator& __y)
std::operator ==	stl/stl_tree.h	/^operator==(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator ==	stl/stl_vector.h	/^operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator >	stl/stl_bvector.h	/^inline bool operator>(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator >	stl/stl_deque.h	/^inline bool operator>(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator >	stl/stl_iterator.h	/^inline bool operator>(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator >	stl/stl_iterator.h	/^operator>(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator >	stl/stl_list.h	/^inline bool operator>(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator >	stl/stl_map.h	/^inline bool operator>(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator >	stl/stl_multimap.h	/^inline bool operator>(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator >	stl/stl_multiset.h	/^inline bool operator>(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator >	stl/stl_pair.h	/^inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator >	stl/stl_queue.h	/^operator>(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator >	stl/stl_rope.h	/^inline bool operator> (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator >	stl/stl_rope.h	/^inline bool operator> (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator >	stl/stl_rope.h	/^operator> (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
std::operator >	stl/stl_set.h	/^inline bool operator>(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator >	stl/stl_slist.h	/^operator>(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator >	stl/stl_stack.h	/^bool operator>(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator >	stl/stl_tree.h	/^operator>(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator >	stl/stl_vector.h	/^operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::operator >=	stl/stl_bvector.h	/^inline bool operator>=(const bit_vector& __x, const bit_vector& __y)$/;"	f	namespace:std	signature:(const bit_vector& __x, const bit_vector& __y)
std::operator >=	stl/stl_deque.h	/^inline bool operator>=(const deque<_Tp, _Alloc>& __x,$/;"	f	namespace:std	signature:(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
std::operator >=	stl/stl_iterator.h	/^inline bool operator>=(const reverse_iterator<_Iterator>& __x, $/;"	f	namespace:std	signature:(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
std::operator >=	stl/stl_iterator.h	/^operator>=(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __x, const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>& __y)
std::operator >=	stl/stl_list.h	/^inline bool operator>=(const list<_Tp,_Alloc>& __x,$/;"	f	namespace:std	signature:(const list<_Tp,_Alloc>& __x, const list<_Tp,_Alloc>& __y)
std::operator >=	stl/stl_map.h	/^inline bool operator>=(const map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const map<_Key,_Tp,_Compare,_Alloc>& __x, const map<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator >=	stl/stl_multimap.h	/^inline bool operator>=(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multimap<_Key,_Tp,_Compare,_Alloc>& __x, const multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::operator >=	stl/stl_multiset.h	/^inline bool operator>=(const multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const multiset<_Key,_Compare,_Alloc>& __x, const multiset<_Key,_Compare,_Alloc>& __y)
std::operator >=	stl/stl_pair.h	/^inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {$/;"	f	namespace:std	signature:(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
std::operator >=	stl/stl_queue.h	/^operator>=(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)$/;"	f	namespace:std	signature:(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)
std::operator >=	stl/stl_rope.h	/^inline bool operator>= (const _Rope_const_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_const_iterator<_CharT,_Alloc>& __x, const _Rope_const_iterator<_CharT,_Alloc>& __y)
std::operator >=	stl/stl_rope.h	/^inline bool operator>= (const _Rope_iterator<_CharT,_Alloc>& __x,$/;"	f	namespace:std	signature:(const _Rope_iterator<_CharT,_Alloc>& __x, const _Rope_iterator<_CharT,_Alloc>& __y)
std::operator >=	stl/stl_rope.h	/^operator>= (const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(const rope<_CharT,_Alloc>& __x, const rope<_CharT,_Alloc>& __y)
std::operator >=	stl/stl_set.h	/^inline bool operator>=(const set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const set<_Key,_Compare,_Alloc>& __x, const set<_Key,_Compare,_Alloc>& __y)
std::operator >=	stl/stl_slist.h	/^operator>=(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2) {$/;"	f	namespace:std	signature:(const slist<_Tp,_Alloc>& _SL1, const slist<_Tp,_Alloc>& _SL2)
std::operator >=	stl/stl_stack.h	/^bool operator>=(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)$/;"	f	namespace:std	signature:(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y)
std::operator >=	stl/stl_tree.h	/^operator>=(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, const _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::operator >=	stl/stl_vector.h	/^operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {$/;"	f	namespace:std	signature:(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
std::ostream_iterator	stl/stl_iterator.h	/^class ostream_iterator {$/;"	c	namespace:std
std::ostream_iterator::_M_stream	stl/stl_iterator.h	/^  ostream* _M_stream;$/;"	m	class:std::ostream_iterator	access:protected
std::ostream_iterator::_M_stream	stl/stl_iterator.h	/^  ostream_type* _M_stream;$/;"	m	class:std::ostream_iterator	access:private
std::ostream_iterator::_M_string	stl/stl_iterator.h	/^    if (_M_string) *_M_stream << _M_string;$/;"	l
std::ostream_iterator::_M_string	stl/stl_iterator.h	/^  const _CharT* _M_string;$/;"	m	class:std::ostream_iterator	access:private
std::ostream_iterator::_M_string	stl/stl_iterator.h	/^  const char* _M_string;$/;"	m	class:std::ostream_iterator	access:protected
std::ostream_iterator::__value	stl/stl_iterator.h	/^    *_M_stream << __value;$/;"	l
std::ostream_iterator::char_type	stl/stl_iterator.h	/^  typedef _CharT                         char_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::difference_type	stl/stl_iterator.h	/^  typedef void                           difference_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::difference_type	stl/stl_iterator.h	/^  typedef void                difference_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag            iterator_category;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::iterator_category	stl/stl_iterator.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::operator *	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator*() { return *this; }$/;"	f	class:std::ostream_iterator	access:public	signature:()
std::ostream_iterator::operator ++	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++() { return *this; } $/;"	f	class:std::ostream_iterator	access:public	signature:()
std::ostream_iterator::operator ++	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator++(int) { return *this; } $/;"	f	class:std::ostream_iterator	access:public	signature:(int)
std::ostream_iterator::operator =	stl/stl_iterator.h	/^  ostream_iterator<_Tp>& operator=(const _Tp& __value) { $/;"	f	class:std::ostream_iterator	access:public	signature:(const _Tp& __value)
std::ostream_iterator::ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream& __s)
std::ostream_iterator::ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream& __s, const char* __c) $/;"	f	class:std::ostream_iterator	access:public	signature:(ostream& __s, const char* __c)
std::ostream_iterator::ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s)
std::ostream_iterator::ostream_iterator	stl/stl_iterator.h	/^  ostream_iterator(ostream_type& __s, const _CharT* __c) $/;"	f	class:std::ostream_iterator	access:public	signature:(ostream_type& __s, const _CharT* __c)
std::ostream_iterator::ostream_type	stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::pointer	stl/stl_iterator.h	/^  typedef void                           pointer;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::pointer	stl/stl_iterator.h	/^  typedef void                pointer;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::reference	stl/stl_iterator.h	/^  typedef void                           reference;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::reference	stl/stl_iterator.h	/^  typedef void                reference;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::traits_type	stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::value_type	stl/stl_iterator.h	/^  typedef void                           value_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostream_iterator::value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::ostream_iterator	access:public
std::ostreambuf_iterator	stl/stl_iterator.h	/^class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator
std::ostreambuf_iterator::_M_buf	stl/stl_iterator.h	/^  streambuf_type* _M_buf;$/;"	m	class:std::ostreambuf_iterator	access:private
std::ostreambuf_iterator::_M_ok	stl/stl_iterator.h	/^  bool _M_ok;$/;"	m	class:std::ostreambuf_iterator	access:private
std::ostreambuf_iterator::char_type	stl/stl_iterator.h	/^  typedef _CharT                           char_type;$/;"	t	class:std::ostreambuf_iterator	access:public
std::ostreambuf_iterator::failed	stl/stl_iterator.h	/^  bool failed() const { return !_M_ok; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:() const
std::ostreambuf_iterator::int_type	stl/stl_iterator.h	/^  typedef typename _Traits::int_type       int_type;$/;"	t	class:std::ostreambuf_iterator	access:public
std::ostreambuf_iterator::operator *	stl/stl_iterator.h	/^  ostreambuf_iterator& operator*()     { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
std::ostreambuf_iterator::operator ++	stl/stl_iterator.h	/^  ostreambuf_iterator& operator++()    { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
std::ostreambuf_iterator::operator ++	stl/stl_iterator.h	/^  ostreambuf_iterator& operator++(int) { return *this; }$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(int)
std::ostreambuf_iterator::operator =	stl/stl_iterator.h	/^  ostreambuf_iterator& operator=(char_type __c) {$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(char_type __c)
std::ostreambuf_iterator::ostream_type	stl/stl_iterator.h	/^  typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	access:public
std::ostreambuf_iterator::ostreambuf_iterator	stl/stl_iterator.h	/^  ostreambuf_iterator(ostream_type& __o)$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type& __o)
std::ostreambuf_iterator::ostreambuf_iterator	stl/stl_iterator.h	/^  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf) {}$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type* __buf)
std::ostreambuf_iterator::streambuf_type	stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	access:public
std::ostreambuf_iterator::traits_type	stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:std::ostreambuf_iterator	access:public
std::output_iterator	stl/stl_iterator_base.h	/^struct output_iterator {$/;"	s	namespace:std
std::output_iterator::difference_type	stl/stl_iterator_base.h	/^  typedef void                difference_type;$/;"	t	struct:std::output_iterator	access:public
std::output_iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	struct:std::output_iterator	access:public
std::output_iterator::pointer	stl/stl_iterator_base.h	/^  typedef void                pointer;$/;"	t	struct:std::output_iterator	access:public
std::output_iterator::reference	stl/stl_iterator_base.h	/^  typedef void                reference;$/;"	t	struct:std::output_iterator	access:public
std::output_iterator::value_type	stl/stl_iterator_base.h	/^  typedef void                value_type;$/;"	t	struct:std::output_iterator	access:public
std::output_iterator_tag	stl/stl_iterator_base.h	/^struct output_iterator_tag {};$/;"	s	namespace:std
std::pair	stl/stl_pair.h	/^struct pair {$/;"	s	namespace:std
std::pair::first	stl/stl_pair.h	/^  _T1 first;$/;"	m	struct:std::pair	access:public
std::pair::first_type	stl/stl_pair.h	/^  typedef _T1 first_type;$/;"	t	struct:std::pair	access:public
std::pair::pair	stl/stl_pair.h	/^  pair() : first(_T1()), second(_T2()) {}$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	stl/stl_pair.h	/^  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}$/;"	f	struct:std::pair	access:public	signature:(const _T1& __a, const _T2& __b)
std::pair::pair	stl/stl_pair.h	/^  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1, _U2>& __p)
std::pair::second	stl/stl_pair.h	/^  _T2 second;$/;"	m	struct:std::pair	access:public
std::pair::second_type	stl/stl_pair.h	/^  typedef _T2 second_type;$/;"	t	struct:std::pair	access:public
std::partial_sort	stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last)
std::partial_sort	stl/stl_algo.h	/^inline void partial_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __middle, _RandomAccessIter __last, _Compare __comp)
std::partial_sort_copy	stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last)
std::partial_sort_copy	stl/stl_algo.h	/^partial_sort_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __result_first, _RandomAccessIter __result_last, _Compare __comp)
std::partial_sum	stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
std::partial_sum	stl/stl_numeric.h	/^partial_sum(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	signature:(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOperation __binary_op)
std::partition	stl/stl_algo.h	/^inline _ForwardIter partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
std::plus	stl/stl_function.h	/^struct plus : public binary_function<_Tp,_Tp,_Tp> {$/;"	s	namespace:std	inherits:binary_function
std::plus::operator ()	stl/stl_function.h	/^  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }$/;"	f	struct:std::plus	access:public	signature:(const _Tp& __x, const _Tp& __y) const
std::pointer_to_binary_function	stl/stl_function.h	/^class pointer_to_binary_function : $/;"	c	namespace:std	inherits:binary_function
std::pointer_to_binary_function::_M_ptr	stl/stl_function.h	/^    _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	access:protected
std::pointer_to_binary_function::operator ()	stl/stl_function.h	/^    _Result operator()(_Arg1 __x, _Arg2 __y) const {$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Arg1 __x, _Arg2 __y) const
std::pointer_to_binary_function::pointer_to_binary_function	stl/stl_function.h	/^    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) $/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (__x)_Arg1, _Arg2))
std::pointer_to_binary_function::pointer_to_binary_function	stl/stl_function.h	/^    pointer_to_binary_function() {}$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
std::pointer_to_unary_function	stl/stl_function.h	/^class pointer_to_unary_function : public unary_function<_Arg, _Result> {$/;"	c	namespace:std	inherits:unary_function
std::pointer_to_unary_function::_M_ptr	stl/stl_function.h	/^  _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	access:protected
std::pointer_to_unary_function::operator ()	stl/stl_function.h	/^  _Result operator()(_Arg __x) const { return _M_ptr(__x); }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Arg __x) const
std::pointer_to_unary_function::pointer_to_unary_function	stl/stl_function.h	/^  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (__x)_Arg))
std::pointer_to_unary_function::pointer_to_unary_function	stl/stl_function.h	/^  pointer_to_unary_function() {}$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
std::pop_heap	stl/stl_heap.h	/^inline void pop_heap(_RandomAccessIterator __first, $/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::pop_heap	stl/stl_heap.h	/^pop_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::pos	stl/stl_hashtable.h	/^  const unsigned long* pos = lower_bound(__first, __last, __n);$/;"	l
std::power	stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n)
std::power	stl/stl_numeric.h	/^inline _Tp power(_Tp __x, _Integer __n, _MonoidOperation __opr)$/;"	f	namespace:std	signature:(_Tp __x, _Integer __n, _MonoidOperation __opr)
std::prev_permutation	stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
std::prev_permutation	stl/stl_algo.h	/^bool prev_permutation(_BidirectionalIter __first, _BidirectionalIter __last,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _Compare __comp)
std::priority_queue	stl/stl_queue.h	/^class priority_queue {$/;"	c	namespace:std
std::priority_queue::_Sequence_value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::priority_queue	access:private
std::priority_queue::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_queue.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Tp, _Tp);$/;"	p	class:std::priority_queue	access:private	signature:(_Compare, bool, _Tp, _Tp)
std::priority_queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _RandomAccessContainer);$/;"	p	class:std::priority_queue	access:private	signature:(_Sequence, _RandomAccessContainer)
std::priority_queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _Sequence);$/;"	p	class:std::priority_queue	access:private	signature:(_Sequence, _Sequence)
std::priority_queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::priority_queue	access:private	signature:(_Tp, _Assignable)
std::priority_queue::__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::priority_queue	access:private	signature:(_Tp, _Sequence_value_type)
std::priority_queue::c	stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:std::priority_queue	access:protected
std::priority_queue::comp	stl/stl_queue.h	/^  _Compare comp;$/;"	m	class:std::priority_queue	access:protected
std::priority_queue::const_reference	stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::container_type	stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::empty	stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::insert	stl/stl_queue.h	/^    c.insert(c.end(), __first, __last);$/;"	p	signature:(c.end(), __first, __last)
std::priority_queue::pop	stl/stl_queue.h	/^  void pop() {$/;"	f	class:std::priority_queue	access:public	signature:()
std::priority_queue::pop_back	stl/stl_queue.h	/^      c.pop_back();$/;"	p	signature:()
std::priority_queue::priority_queue	stl/stl_queue.h	/^  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}$/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue() : c() {}$/;"	f	class:std::priority_queue	access:public	signature:()
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, $/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last) $/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::priority_queue	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __x, const _Sequence& __s)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(const _Compare& __x, const _Sequence& __s) $/;"	f	class:std::priority_queue	access:public	signature:(const _Compare& __x, const _Sequence& __s)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last) $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x)
std::priority_queue::priority_queue	stl/stl_queue.h	/^  priority_queue(const value_type* __first, const value_type* __last, $/;"	f	class:std::priority_queue	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __x, const _Sequence& __c)
std::priority_queue::push	stl/stl_queue.h	/^  void push(const value_type& __x) {$/;"	f	class:std::priority_queue	access:public	signature:(const value_type& __x)
std::priority_queue::push_back	stl/stl_queue.h	/^      c.push_back(__x); $/;"	p	signature:(__x)
std::priority_queue::reference	stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::size	stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::size_type	stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::priority_queue	access:public
std::priority_queue::top	stl/stl_queue.h	/^  const_reference top() const { return c.front(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
std::priority_queue::value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::priority_queue	access:public
std::project1st	stl/stl_function.h	/^struct project1st : public _Project1st<_Arg1, _Arg2> {};$/;"	s	namespace:std	inherits:_Project1st
std::project2nd	stl/stl_function.h	/^struct project2nd : public _Project2nd<_Arg1, _Arg2> {};$/;"	s	namespace:std	inherits:_Project2nd
std::ptr_fun	stl/stl_function.h	/^inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (__x)_Arg))
std::ptr_fun	stl/stl_function.h	/^ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {$/;"	f	namespace:std	signature:(_Result (__x)_Arg1, _Arg2))
std::push_heap	stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::push_heap	stl/stl_heap.h	/^push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::put	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) _M_o.put(__leaf[__i]);$/;"	p	signature:(__leaf[__i])
std::put	stl/ropeimpl.h	/^    for (__i = 0; __i < __n; __i++) __o.put(__f);$/;"	p	signature:(__f)
std::queue	stl/stl_queue.h	/^class queue {$/;"	c	namespace:std
std::queue::_Sequence_value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::queue	access:private
std::queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:std::queue	access:private	signature:(_Sequence, _BackInsertionSequence)
std::queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Sequence, _FrontInsertionSequence);$/;"	p	class:std::queue	access:private	signature:(_Sequence, _FrontInsertionSequence)
std::queue::__STL_CLASS_REQUIRES	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::queue	access:private	signature:(_Tp, _Assignable)
std::queue::__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_queue.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::queue	access:private	signature:(_Tp, _Sequence_value_type)
std::queue::__STL_NULL_TMPL_ARGS	stl/stl_queue.h	/^  operator<  __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:std::queue	access:friend	signature:(const queue&, const queue&)
std::queue::__STL_NULL_TMPL_ARGS	stl/stl_queue.h	/^  operator== __STL_NULL_TMPL_ARGS (const queue&, const queue&);$/;"	p	class:std::queue	access:friend	signature:(const queue&, const queue&)
std::queue::back	stl/stl_queue.h	/^  const_reference back() const { return c.back(); }$/;"	f	class:std::queue	access:public	signature:() const
std::queue::back	stl/stl_queue.h	/^  reference back() { return c.back(); }$/;"	f	class:std::queue	access:public	signature:()
std::queue::c	stl/stl_queue.h	/^  _Sequence c;$/;"	m	class:std::queue	access:protected
std::queue::const_reference	stl/stl_queue.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::queue	access:public
std::queue::container_type	stl/stl_queue.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::queue	access:public
std::queue::empty	stl/stl_queue.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::queue	access:public	signature:() const
std::queue::front	stl/stl_queue.h	/^  const_reference front() const { return c.front(); }$/;"	f	class:std::queue	access:public	signature:() const
std::queue::front	stl/stl_queue.h	/^  reference front() { return c.front(); }$/;"	f	class:std::queue	access:public	signature:()
std::queue::operator <	stl/stl_queue.h	/^  friend bool operator< (const queue<_Tp1, _Seq1>&,$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
std::queue::operator ==	stl/stl_queue.h	/^  friend bool operator== (const queue<_Tp1, _Seq1>&,$/;"	p	class:std::queue	access:friend	signature:(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&)
std::queue::pop	stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	f	class:std::queue	access:public	signature:()
std::queue::pop_front	stl/stl_queue.h	/^  void pop() { c.pop_front(); }$/;"	p	signature:()
std::queue::push	stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:std::queue	access:public	signature:(const value_type& __x)
std::queue::push_back	stl/stl_queue.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	p	signature:(__x)
std::queue::queue	stl/stl_queue.h	/^  explicit queue(const _Sequence& __c) : c(__c) {}$/;"	f	class:std::queue	access:public	signature:(const _Sequence& __c)
std::queue::queue	stl/stl_queue.h	/^  queue() : c() {}$/;"	f	class:std::queue	access:public	signature:()
std::queue::reference	stl/stl_queue.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::queue	access:public
std::queue::size	stl/stl_queue.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::queue	access:public	signature:() const
std::queue::size_type	stl/stl_queue.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::queue	access:public
std::queue::value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::queue	access:public
std::random_access_iterator	stl/stl_iterator_base.h	/^template <class _Tp, class _Distance> struct random_access_iterator {$/;"	s	namespace:std
std::random_access_iterator::difference_type	stl/stl_iterator_base.h	/^  typedef _Distance                  difference_type;$/;"	t	struct:std::random_access_iterator	access:public
std::random_access_iterator::iterator_category	stl/stl_iterator_base.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::random_access_iterator	access:public
std::random_access_iterator::pointer	stl/stl_iterator_base.h	/^  typedef _Tp*                       pointer;$/;"	t	struct:std::random_access_iterator	access:public
std::random_access_iterator::reference	stl/stl_iterator_base.h	/^  typedef _Tp&                       reference;$/;"	t	struct:std::random_access_iterator	access:public
std::random_access_iterator::value_type	stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:std::random_access_iterator	access:public
std::random_access_iterator_tag	stl/stl_iterator_base.h	/^struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
std::random_sample	stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last)
std::random_sample	stl/stl_algo.h	/^random_sample(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _RandomAccessIter __out_first, _RandomAccessIter __out_last, _RandomNumberGenerator& __rand)
std::random_sample_n	stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n)
std::random_sample_n	stl/stl_algo.h	/^_OutputIter random_sample_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _OutputIter __out, const _Distance __n, _RandomNumberGenerator& __rand)
std::random_shuffle	stl/stl_algo.h	/^inline void random_shuffle(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::random_shuffle	stl/stl_algo.h	/^void random_shuffle(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _RandomNumberGenerator& __rand)
std::raw_storage_iterator	stl/stl_raw_storage_iter.h	/^class raw_storage_iterator {$/;"	c	namespace:std
std::raw_storage_iterator::_M_iter	stl/stl_raw_storage_iter.h	/^  _ForwardIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	access:protected
std::raw_storage_iterator::__tmp	stl/stl_raw_storage_iter.h	/^    raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;$/;"	l
std::raw_storage_iterator::difference_type	stl/stl_raw_storage_iter.h	/^  typedef void                difference_type;$/;"	t	class:std::raw_storage_iterator	access:public
std::raw_storage_iterator::iterator_category	stl/stl_raw_storage_iter.h	/^  typedef output_iterator_tag iterator_category;$/;"	t	class:std::raw_storage_iterator	access:public
std::raw_storage_iterator::operator *	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
std::raw_storage_iterator::operator ++	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp> operator++(int) {$/;"	f	class:std::raw_storage_iterator	access:public	signature:(int)
std::raw_storage_iterator::operator ++	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator<_ForwardIterator, _Tp>& operator++() {$/;"	f	class:std::raw_storage_iterator	access:public	signature:()
std::raw_storage_iterator::operator =	stl/stl_raw_storage_iter.h	/^  raw_storage_iterator& operator=(const _Tp& __element) {$/;"	f	class:std::raw_storage_iterator	access:public	signature:(const _Tp& __element)
std::raw_storage_iterator::pointer	stl/stl_raw_storage_iter.h	/^  typedef void                pointer;$/;"	t	class:std::raw_storage_iterator	access:public
std::raw_storage_iterator::raw_storage_iterator	stl/stl_raw_storage_iter.h	/^  explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x) {}$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
std::raw_storage_iterator::reference	stl/stl_raw_storage_iter.h	/^  typedef void                reference;$/;"	t	class:std::raw_storage_iterator	access:public
std::raw_storage_iterator::value_type	stl/stl_raw_storage_iter.h	/^  typedef void                value_type;$/;"	t	class:std::raw_storage_iterator	access:public
std::rb_tree	stl/stl_tree.h	/^struct rb_tree : public _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc>$/;"	s	namespace:std	inherits:_Rb_tree
std::rb_tree::_Base	stl/stl_tree.h	/^  typedef _Rb_tree<_Key, _Value, _KeyOfValue, _Compare, _Alloc> _Base;$/;"	t	struct:std::rb_tree	access:public
std::rb_tree::allocator_type	stl/stl_tree.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	struct:std::rb_tree	access:public
std::rb_tree::rb_tree	stl/stl_tree.h	/^  rb_tree(const _Compare& __comp = _Compare(),$/;"	f	struct:std::rb_tree	access:public	signature:(const _Compare& __comp = _Compare(), const allocator_type& __a = allocator_type())
std::rb_tree::~rb_tree	stl/stl_tree.h	/^  ~rb_tree() {}$/;"	f	struct:std::rb_tree	access:public	signature:()
std::remove	stl/stl_algo.h	/^_ForwardIter remove(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __value)
std::remove_copy	stl/stl_algo.h	/^_OutputIter remove_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __value)
std::remove_copy_if	stl/stl_algo.h	/^_OutputIter remove_copy_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred)
std::remove_if	stl/stl_algo.h	/^_ForwardIter remove_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
std::replace	stl/stl_algo.h	/^void replace(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __old_value, const _Tp& __new_value)
std::replace_copy	stl/stl_algo.h	/^_OutputIter replace_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, const _Tp& __old_value, const _Tp& __new_value)
std::replace_copy_if	stl/stl_algo.h	/^_OutputIter replace_copy_if(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _Predicate __pred, const _Tp& __new_value)
std::replace_if	stl/stl_algo.h	/^void replace_if(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred, const _Tp& __new_value)
std::reserve	stl/stl_hashtable.h	/^  _M_buckets.reserve(__ht._M_buckets.size());$/;"	p	signature:(__ht._M_buckets.size())
std::return_temporary_buffer	stl/stl_tempbuf.h	/^void return_temporary_buffer(_Tp* __p) {$/;"	f	namespace:std	signature:(_Tp* __p)
std::reverse	stl/stl_algo.h	/^inline void reverse(_BidirectionalIter __first, _BidirectionalIter __last) {$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last)
std::reverse_bidirectional_iterator	stl/stl_iterator.h	/^class reverse_bidirectional_iterator {$/;"	c	namespace:std
std::reverse_bidirectional_iterator::_Self	stl/stl_iterator.h	/^                                         _Reference, _Distance>  _Self;$/;"	t	class:std::reverse_bidirectional_iterator	access:private
std::reverse_bidirectional_iterator::__tmp	stl/stl_iterator.h	/^    _BidirectionalIterator __tmp = current;$/;"	l
std::reverse_bidirectional_iterator::__tmp	stl/stl_iterator.h	/^    _Self __tmp = *this;$/;"	l
std::reverse_bidirectional_iterator::base	stl/stl_iterator.h	/^  _BidirectionalIterator base() const { return current; }$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
std::reverse_bidirectional_iterator::current	stl/stl_iterator.h	/^  _BidirectionalIterator current;$/;"	m	class:std::reverse_bidirectional_iterator	access:protected
std::reverse_bidirectional_iterator::difference_type	stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
std::reverse_bidirectional_iterator::iterator_category	stl/stl_iterator.h	/^  typedef bidirectional_iterator_tag iterator_category;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
std::reverse_bidirectional_iterator::operator *	stl/stl_iterator.h	/^  _Reference operator*() const {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
std::reverse_bidirectional_iterator::operator ++	stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(int)
std::reverse_bidirectional_iterator::operator ++	stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
std::reverse_bidirectional_iterator::operator --	stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(int)
std::reverse_bidirectional_iterator::operator --	stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
std::reverse_bidirectional_iterator::operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:() const
std::reverse_bidirectional_iterator::pointer	stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
std::reverse_bidirectional_iterator::reference	stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
std::reverse_bidirectional_iterator::reverse_bidirectional_iterator	stl/stl_iterator.h	/^  explicit reverse_bidirectional_iterator(_BidirectionalIterator __x)$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:(_BidirectionalIterator __x)
std::reverse_bidirectional_iterator::reverse_bidirectional_iterator	stl/stl_iterator.h	/^  reverse_bidirectional_iterator() {}$/;"	f	class:std::reverse_bidirectional_iterator	access:public	signature:()
std::reverse_bidirectional_iterator::value_type	stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
std::reverse_copy	stl/stl_algo.h	/^_OutputIter reverse_copy(_BidirectionalIter __first,$/;"	f	namespace:std	signature:(_BidirectionalIter __first, _BidirectionalIter __last, _OutputIter __result)
std::reverse_iterator	stl/stl_iterator.h	/^class reverse_iterator $/;"	c	namespace:std
std::reverse_iterator	stl/stl_iterator.h	/^class reverse_iterator {$/;"	c	namespace:std
std::reverse_iterator::_Self	stl/stl_iterator.h	/^        _Self;$/;"	t	class:std::reverse_iterator	access:private
std::reverse_iterator::_Self	stl/stl_iterator.h	/^  typedef reverse_iterator<_Iterator> _Self;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::__tmp	stl/stl_iterator.h	/^    _Iterator __tmp = current;$/;"	l
std::reverse_iterator::__tmp	stl/stl_iterator.h	/^    _Self __tmp = *this;$/;"	l
std::reverse_iterator::base	stl/stl_iterator.h	/^  _RandomAccessIterator base() const { return current; }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::base	stl/stl_iterator.h	/^  iterator_type base() const { return current; }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::current	stl/stl_iterator.h	/^  _Iterator current;$/;"	m	class:std::reverse_iterator	access:protected
std::reverse_iterator::current	stl/stl_iterator.h	/^  _RandomAccessIterator current;$/;"	m	class:std::reverse_iterator	access:protected
std::reverse_iterator::difference_type	stl/stl_iterator.h	/^          difference_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::difference_type	stl/stl_iterator.h	/^  typedef _Distance                  difference_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::iterator_category	stl/stl_iterator.h	/^          iterator_category;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::iterator_category	stl/stl_iterator.h	/^  typedef random_access_iterator_tag iterator_category;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::iterator_type	stl/stl_iterator.h	/^  typedef _Iterator iterator_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::operator *	stl/stl_iterator.h	/^  _Reference operator*() const { return *(current - 1); }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::operator *	stl/stl_iterator.h	/^  reference operator*() const {$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::operator +	stl/stl_iterator.h	/^  _Self operator+(_Distance __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
std::reverse_iterator::operator +	stl/stl_iterator.h	/^  _Self operator+(difference_type __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator ++	stl/stl_iterator.h	/^  _Self operator++(int) {$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator ++	stl/stl_iterator.h	/^  _Self& operator++() {$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::operator +=	stl/stl_iterator.h	/^  _Self& operator+=(_Distance __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n)
std::reverse_iterator::operator +=	stl/stl_iterator.h	/^  _Self& operator+=(difference_type __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
std::reverse_iterator::operator -	stl/stl_iterator.h	/^  _Self operator-(_Distance __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
std::reverse_iterator::operator -	stl/stl_iterator.h	/^  _Self operator-(difference_type __n) const {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator --	stl/stl_iterator.h	/^  _Self operator--(int) {$/;"	f	class:std::reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator --	stl/stl_iterator.h	/^  _Self& operator--() {$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::operator -=	stl/stl_iterator.h	/^  _Self& operator-=(_Distance __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n)
std::reverse_iterator::operator -=	stl/stl_iterator.h	/^  _Self& operator-=(difference_type __n) {$/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n)
std::reverse_iterator::operator ->	stl/stl_iterator.h	/^  pointer operator->() const { return &(operator*()); }$/;"	f	class:std::reverse_iterator	access:public	signature:() const
std::reverse_iterator::operator []	stl/stl_iterator.h	/^  _Reference operator[](_Distance __n) const { return *(*this + __n); }$/;"	f	class:std::reverse_iterator	access:public	signature:(_Distance __n) const
std::reverse_iterator::operator []	stl/stl_iterator.h	/^  reference operator[](difference_type __n) const { return *(*this + __n); }  $/;"	f	class:std::reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::pointer	stl/stl_iterator.h	/^          pointer;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::pointer	stl/stl_iterator.h	/^  typedef _Tp*                       pointer;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::reference	stl/stl_iterator.h	/^          reference;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::reference	stl/stl_iterator.h	/^  typedef _Reference                 reference;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^  explicit reverse_iterator(_RandomAccessIterator __x) : current(__x) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(_RandomAccessIterator __x)
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^  explicit reverse_iterator(iterator_type __x) : current(__x) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator() {}$/;"	f	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator(const _Self& __x) : current(__x.current) {}$/;"	f	class:std::reverse_iterator	access:public	signature:(const _Self& __x)
std::reverse_iterator::reverse_iterator	stl/stl_iterator.h	/^  reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter>& __x)
std::reverse_iterator::value_type	stl/stl_iterator.h	/^          value_type;$/;"	t	class:std::reverse_iterator	access:public
std::reverse_iterator::value_type	stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:std::reverse_iterator	access:public
std::rope	stl/stl_rope.h	/^class rope : public _Rope_base<_CharT,_Alloc> {$/;"	c	namespace:std	inherits:_Rope_base
std::rope::_Base	stl/stl_rope.h	/^        typedef _Rope_base<_CharT,_Alloc> _Base;$/;"	t	class:std::rope	access:protected
std::rope::_Cstrptr	stl/stl_rope.h	/^        typedef __GC_CONST _CharT* _Cstrptr;$/;"	t	class:std::rope	access:protected
std::rope::_M_free_c_string	stl/stl_rope.h	/^              _M_tree_ptr->_M_free_c_string();$/;"	p	signature:()
std::rope::_RopeConcatenation	stl/stl_rope.h	/^        typedef _Rope_RopeConcatenation<_CharT,_Alloc> _RopeConcatenation;$/;"	t	class:std::rope	access:protected
std::rope::_RopeFunction	stl/stl_rope.h	/^        typedef _Rope_RopeFunction<_CharT,_Alloc> _RopeFunction;$/;"	t	class:std::rope	access:protected
std::rope::_RopeLeaf	stl/stl_rope.h	/^        typedef _Rope_RopeLeaf<_CharT,_Alloc> _RopeLeaf;$/;"	t	class:std::rope	access:protected
std::rope::_RopeRep	stl/stl_rope.h	/^        typedef _Rope_RopeRep<_CharT,_Alloc> _RopeRep;$/;"	t	class:std::rope	access:protected
std::rope::_RopeRep::_S_ref	stl/stl_rope.h	/^              _RopeRep::_S_ref(__t);$/;"	p	class:std::rope::_RopeRep	signature:(__t)
std::rope::_RopeRep::_S_unref	stl/stl_rope.h	/^              _RopeRep::_S_unref(__t);$/;"	p	class:std::rope::_RopeRep	signature:(__t)
std::rope::_RopeSubstring	stl/stl_rope.h	/^        typedef _Rope_RopeSubstring<_CharT,_Alloc> _RopeSubstring;$/;"	t	class:std::rope	access:protected
std::rope::_S_RopeLeaf_from_unowned_char_ptr	stl/stl_rope.h	/^          _RopeLeaf* _S_RopeLeaf_from_unowned_char_ptr(const _CharT *__s,$/;"	f	class:std::rope	access:protected	signature:(const _CharT *__s, size_t __size, allocator_type __a)
std::rope::_S_add_leaf_to_forest	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _RopeRep** __forest)
std::rope::_S_add_leaf_to_forest	stl/stl_rope.h	/^        static void _S_add_leaf_to_forest(_RopeRep* __r, _RopeRep** __forest);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, _RopeRep** __forest)
std::rope::_S_add_to_forest	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_add_to_forest(_RopeRep* __r, _RopeRep** __forest)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _RopeRep** __forest)
std::rope::_S_add_to_forest	stl/stl_rope.h	/^        static void _S_add_to_forest(_RopeRep*__r, _RopeRep** __forest);$/;"	p	class:std::rope	access:private	signature:(_RopeRep*__r, _RopeRep** __forest)
std::rope::_S_allocated_capacity	stl/stl_rope.h	/^        static size_t _S_allocated_capacity(size_t __n) {$/;"	f	class:std::rope	access:protected	signature:(size_t __n)
std::rope::_S_apply_to_pieces	stl/ropeimpl.h	/^bool rope<_CharT, _Alloc>::_S_apply_to_pieces($/;"	f	class:std::rope	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
std::rope::_S_apply_to_pieces	stl/stl_rope.h	/^        static bool _S_apply_to_pieces($/;"	p	class:std::rope	access:protected	signature:( _Rope_char_consumer<_CharT>& __c, const _RopeRep* __r, size_t __begin, size_t __end)
std::rope::_S_balance	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_balance(_RopeRep* __r)$/;"	f	class:std::rope	signature:(_RopeRep* __r)
std::rope::_S_balance	stl/stl_rope.h	/^        static _RopeRep* _S_balance(_RopeRep* __r);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r)
std::rope::_S_char_ptr_len	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_char_ptr_len(const _CharT* __s)$/;"	f	class:std::rope	signature:(const _CharT* __s)
std::rope::_S_char_ptr_len	stl/stl_rope.h	/^        static size_t _S_char_ptr_len(const _CharT* __s);$/;"	p	class:std::rope	access:private	signature:(const _CharT* __s)
std::rope::_S_compare	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_compare (const _RopeRep* __left, $/;"	f	class:std::rope	signature:(const _RopeRep* __left, const _RopeRep* __right)
std::rope::_S_compare	stl/stl_rope.h	/^        static int _S_compare(const _RopeRep* __x, const _RopeRep* __y);$/;"	p	class:std::rope	access:private	signature:(const _RopeRep* __x, const _RopeRep* __y)
std::rope::_S_concat	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_concat(_RopeRep* __left, _RopeRep* __right)$/;"	f	class:std::rope	signature:(_RopeRep* __left, _RopeRep* __right)
std::rope::_S_concat	stl/stl_rope.h	/^                _Self_destruct_ptr __left_result(_S_concat(__left, __r));$/;"	p	signature:(__left, __r)
std::rope::_S_concat	stl/stl_rope.h	/^        static _RopeRep* _S_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
std::rope::_S_concat_and_set_balanced	stl/stl_rope.h	/^        static _RopeRep* _S_concat_and_set_balanced(_RopeRep* __left,$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __left, _RopeRep* __right)
std::rope::_S_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_RopeRep* rope<_CharT,_Alloc>::_S_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeRep* __r, const _CharT*__s, size_t __slen)
std::rope::_S_concat_char_iter	stl/stl_rope.h	/^              _S_concat_char_iter(__left, __i, __n));$/;"	p	signature:(__left, __i, __n)
std::rope::_S_concat_char_iter	stl/stl_rope.h	/^        static _RopeRep* _S_concat_char_iter(_RopeRep* __r,$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
std::rope::_S_copy_max	stl/stl_rope.h	/^        enum { _S_copy_max = 23 };$/;"	e	enum:std::rope::__anon22
std::rope::_S_destr_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_concat_char_iter($/;"	f	class:std::rope	signature:( _RopeRep* __r, const _CharT* __s, size_t __slen)
std::rope::_S_destr_concat_char_iter	stl/stl_rope.h	/^        static _RopeRep* _S_destr_concat_char_iter(_RopeRep* __r,$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __r, const _CharT* __iter, size_t __slen)
std::rope::_S_destr_leaf_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_destr_leaf_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
std::rope::_S_destr_leaf_concat_char_iter	stl/stl_rope.h	/^          static _RopeLeaf* _S_destr_leaf_concat_char_iter$/;"	p	class:std::rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
std::rope::_S_dump	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_dump(_RopeRep* __r, int __indent)$/;"	f	class:std::rope	signature:(_RopeRep* __r, int __indent)
std::rope::_S_dump	stl/stl_rope.h	/^        static void _S_dump(_RopeRep* __r, int __indent = 0);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, int __indent = 0)
std::rope::_S_empty_c_str	stl/ropeimpl.h	/^  _CharT rope<_CharT,_Alloc>::_S_empty_c_str[1];$/;"	m	class:std::rope
std::rope::_S_empty_c_str	stl/stl_rope.h	/^        static _CharT _S_empty_c_str[1];$/;"	m	class:std::rope	access:protected
std::rope::_S_fetch	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch(_RopeRep* __r, size_type __i)$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_type __i)
std::rope::_S_fetch	stl/stl_rope.h	/^        static _CharT _S_fetch(_RopeRep* __r, size_type __pos);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
std::rope::_S_fetch_ptr	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_fetch_ptr(_RopeRep* __r, size_type __i)$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_type __i)
std::rope::_S_fetch_ptr	stl/stl_rope.h	/^            static _CharT* _S_fetch_ptr(_RopeRep* __r, size_type __pos);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __r, size_type __pos)
std::rope::_S_flatten	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)$/;"	f	class:std::rope	signature:(_RopeRep* __r, _CharT* __buffer)
std::rope::_S_flatten	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r,$/;"	f	class:std::rope	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
std::rope::_S_flatten	stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r, _CharT* __buffer);$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, _CharT* __buffer)
std::rope::_S_flatten	stl/stl_rope.h	/^        static _CharT* _S_flatten(_RopeRep* __r,$/;"	p	class:std::rope	access:private	signature:(_RopeRep* __r, size_t __start, size_t __len, _CharT* __buffer)
std::rope::_S_is0	stl/stl_rope.h	/^        static bool _S_is0(_CharT __c) { return __c == _S_eos((_CharT*)0); }$/;"	f	class:std::rope	access:protected	signature:(_CharT __c)
std::rope::_S_is_almost_balanced	stl/stl_rope.h	/^        static bool _S_is_almost_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
std::rope::_S_is_balanced	stl/stl_rope.h	/^        static bool _S_is_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
std::rope::_S_is_roughly_balanced	stl/stl_rope.h	/^        static bool _S_is_roughly_balanced(_RopeRep* __r)$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __r)
std::rope::_S_leaf_concat_char_iter	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_leaf_concat_char_iter$/;"	f	class:std::rope	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __len)
std::rope::_S_leaf_concat_char_iter	stl/stl_rope.h	/^        _S_leaf_concat_char_iter(_RopeLeaf* __r,$/;"	p	class:std::rope	access:protected	signature:(_RopeLeaf* __r, const _CharT* __iter, size_t __slen)
std::rope::_S_min_len	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_min_len[$/;"	m	class:std::rope
std::rope::_S_min_len	stl/stl_rope.h	/^          _S_min_len[_RopeRep::_S_max_rope_depth + 1];$/;"	m	class:std::rope	access:private
std::rope::_S_new_RopeConcatenation	stl/stl_rope.h	/^        static _RopeConcatenation* _S_new_RopeConcatenation($/;"	f	class:std::rope	access:protected	signature:( _RopeRep* __left, _RopeRep* __right, allocator_type __a)
std::rope::_S_new_RopeFunction	stl/stl_rope.h	/^        static _RopeFunction* _S_new_RopeFunction(char_producer<_CharT>* __f,$/;"	f	class:std::rope	access:protected	signature:(char_producer<_CharT>* __f, size_t __size, bool __d, allocator_type __a)
std::rope::_S_new_RopeLeaf	stl/stl_rope.h	/^        static _RopeLeaf* _S_new_RopeLeaf(__GC_CONST _CharT *__s,$/;"	f	class:std::rope	access:protected	signature:(__GC_CONST _CharT *__s, size_t __size, allocator_type __a)
std::rope::_S_new_RopeSubstring	stl/stl_rope.h	/^        static _RopeSubstring* _S_new_RopeSubstring($/;"	f	class:std::rope	access:protected	signature:( _Rope_RopeRep<_CharT,_Alloc>* __b, size_t __s, size_t __l, allocator_type __a)
std::rope::_S_ref	stl/stl_rope.h	/^          static void _S_ref(_RopeRep* __t)$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __t)
std::rope::_S_ref	stl/stl_rope.h	/^          static void _S_ref(_RopeRep*) {}$/;"	f	class:std::rope	access:protected	signature:(_RopeRep*)
std::rope::_S_rounded_up_size	stl/stl_rope.h	/^        static size_t _S_rounded_up_size(size_t __n) {$/;"	f	class:std::rope	access:protected	signature:(size_t __n)
std::rope::_S_substring	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_substring(_RopeRep* __base, $/;"	f	class:std::rope	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
std::rope::_S_substring	stl/stl_rope.h	/^              _S_substring(__old, 0, __pos1));$/;"	p	signature:(__old, 0, __pos1)
std::rope::_S_substring	stl/stl_rope.h	/^              _S_substring(__old, __pos2, __old->_M_size));$/;"	p	signature:(__old, __pos2, __old->_M_size)
std::rope::_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __appendee(_S_substring($/;"	p	signature:(__s._M_root, __s._M_current_pos, __e._M_current_pos)
std::rope::_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __left(_S_substring(_M_tree_ptr, 0, __p));$/;"	p	signature:(_M_tree_ptr, 0, __p)
std::rope::_S_substring	stl/stl_rope.h	/^            _Self_destruct_ptr __right(_S_substring(_M_tree_ptr, __p, size()));$/;"	p	signature:(_M_tree_ptr, __p, size())
std::rope::_S_substring	stl/stl_rope.h	/^        static _RopeRep* _S_substring(_RopeRep* __base,$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __base, size_t __start, size_t __endp1)
std::rope::_S_tree_concat	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::_S_tree_concat (_RopeRep* __left, _RopeRep* __right)$/;"	f	class:std::rope	signature:(_RopeRep* __left, _RopeRep* __right)
std::rope::_S_tree_concat	stl/stl_rope.h	/^        _S_tree_concat(_RopeRep* __left, _RopeRep* __right);$/;"	p	class:std::rope	access:protected	signature:(_RopeRep* __left, _RopeRep* __right)
std::rope::_S_unref	stl/stl_rope.h	/^          static void _S_unref(_RopeRep* __t)$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __t)
std::rope::_S_unref	stl/stl_rope.h	/^          static void _S_unref(_RopeRep*) {}$/;"	f	class:std::rope	access:protected	signature:(_RopeRep*)
std::rope::_Self_destruct_ptr	stl/stl_rope.h	/^            typedef _Rope_RopeRep<_CharT,_Alloc>* _Self_destruct_ptr;$/;"	t	class:std::rope	access:protected
std::rope::_Self_destruct_ptr	stl/stl_rope.h	/^            typedef _Rope_self_destruct_ptr<_CharT,_Alloc> _Self_destruct_ptr;$/;"	t	class:std::rope	access:protected
std::rope::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, _CharT __right)
std::rope::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const _CharT* __right)
std::rope::__STL_NULL_TMPL_ARGS	stl/stl_rope.h	/^        operator+ __STL_NULL_TMPL_ARGS (const rope<_CharT,_Alloc>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT,_Alloc>& __left, const rope<_CharT,_Alloc>& __right)
std::rope::__buf	stl/stl_rope.h	/^            _CharT* __buf = _Data_allocate(_S_rounded_up_size(1));$/;"	l
std::rope::__c	stl/stl_rope.h	/^            _CharT __c = _CharT();$/;"	l
std::rope::__i	stl/stl_rope.h	/^            iterator __i(this, __p);$/;"	p	signature:(this, __p)
std::rope::__last	stl/stl_rope.h	/^            rope<_CharT,_Alloc> __last(__n, __c);$/;"	p	signature:(__n, __c)
std::rope::__left	stl/stl_rope.h	/^            _RopeRep* __left =$/;"	l
std::rope::__len	stl/stl_rope.h	/^            size_t __len = (__pos + __n > __size? __size - __pos : __n);$/;"	l
std::rope::__len	stl/stl_rope.h	/^            size_t __len = _S_char_ptr_len(__c_string);$/;"	l
std::rope::__old	stl/stl_rope.h	/^            _RopeRep* __old = _M_tree_ptr;$/;"	l
std::rope::__p_index	stl/stl_rope.h	/^            size_t __p_index = __p.index();$/;"	l
std::rope::__pos	stl/stl_rope.h	/^            size_t __pos = __start.index();$/;"	l
std::rope::__r	stl/stl_rope.h	/^            rope __r(__c);$/;"	p	signature:(__c)
std::rope::__r	stl/stl_rope.h	/^            rope __r(__c_string);$/;"	p	signature:(__c_string)
std::rope::__r	stl/stl_rope.h	/^            rope __r(__i, __i_len);$/;"	p	signature:(__i, __i_len)
std::rope::__r	stl/stl_rope.h	/^            rope __r(__i, __j);$/;"	p	signature:(__i, __j)
std::rope::__r	stl/stl_rope.h	/^            rope<_CharT,_Alloc> __r(__n,__c);$/;"	p	signature:(__n,__c)
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result = $/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(_M_tree_ptr, __y._M_tree_ptr);$/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(__left, __right);$/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result = _S_concat(__left_result, __right);$/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result = replace(_M_tree_ptr, __p, __p + __n, 0);$/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result =$/;"	l
std::rope::__result	stl/stl_rope.h	/^            _RopeRep* __result;$/;"	l
std::rope::__result	stl/stl_rope.h	/^            const_iterator __result = search(const_begin() + __pos, const_end(),$/;"	l
std::rope::__result_pos	stl/stl_rope.h	/^            size_type __result_pos;$/;"	l
std::rope::__size	stl/stl_rope.h	/^            size_t __size = size();$/;"	l
std::rope::__space	stl/stl_rope.h	/^              _RopeConcatenation* __space = _CAllocator(__a).allocate(1);$/;"	l
std::rope::__space	stl/stl_rope.h	/^              _RopeFunction* __space = _FAllocator(__a).allocate(1);$/;"	l
std::rope::__space	stl/stl_rope.h	/^              _RopeLeaf* __space = _LAllocator(__a).allocate(1);$/;"	l
std::rope::__space	stl/stl_rope.h	/^              _RopeSubstring* __space = _SAllocator(__a).allocate(1);$/;"	l
std::rope::__tmp	stl/stl_rope.h	/^            _RopeRep* __tmp = _M_tree_ptr;$/;"	l
std::rope::allocator_type	stl/stl_rope.h	/^        typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::rope	access:protected
std::rope::append	stl/stl_rope.h	/^        rope& append() { return append(_CharT()); }  \/\/ XXX why?$/;"	f	class:std::rope	access:public	signature:()
std::rope::append	stl/stl_rope.h	/^        rope& append(_CharT __c) {$/;"	f	class:std::rope	access:public	signature:(_CharT __c)
std::rope::append	stl/stl_rope.h	/^        rope& append(const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __c_string)
std::rope::append	stl/stl_rope.h	/^        rope& append(const _CharT* __iter, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __iter, size_t __n)
std::rope::append	stl/stl_rope.h	/^        rope& append(const _CharT* __s, const _CharT* __e) {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, const _CharT* __e)
std::rope::append	stl/stl_rope.h	/^        rope& append(const rope& __y) {$/;"	f	class:std::rope	access:public	signature:(const rope& __y)
std::rope::append	stl/stl_rope.h	/^        rope& append(const_iterator __s, const_iterator __e) {$/;"	f	class:std::rope	access:public	signature:(const_iterator __s, const_iterator __e)
std::rope::append	stl/stl_rope.h	/^        rope& append(size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __n, _CharT __c)
std::rope::apply_to_pieces	stl/stl_rope.h	/^        void apply_to_pieces( size_t __begin, size_t __end,$/;"	f	class:std::rope	access:public	signature:( size_t __begin, size_t __end, _Rope_char_consumer<_CharT>& __c) const
std::rope::at	stl/stl_rope.h	/^            reference at(size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
std::rope::at	stl/stl_rope.h	/^        _CharT at(size_type __pos) const {$/;"	f	class:std::rope	access:public	signature:(size_type __pos) const
std::rope::back	stl/stl_rope.h	/^        _CharT back() const$/;"	f	class:std::rope	access:public	signature:() const
std::rope::balance	stl/stl_rope.h	/^        void balance()$/;"	f	class:std::rope	access:public	signature:()
std::rope::begin	stl/stl_rope.h	/^            const_iterator begin() { return const_begin(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::begin	stl/stl_rope.h	/^            iterator begin() { return mutable_begin(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::begin	stl/stl_rope.h	/^        const_iterator begin() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::c_str	stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::c_str() const {$/;"	f	class:std::rope	signature:() const
std::rope::c_str	stl/stl_rope.h	/^        const _CharT* c_str() const;$/;"	p	class:std::rope	access:public	signature:() const
std::rope::capacity	stl/stl_rope.h	/^            size_type capacity() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::clear	stl/stl_rope.h	/^        void clear()$/;"	f	class:std::rope	access:public	signature:()
std::rope::compare	stl/stl_rope.h	/^        int compare(const rope& __y) const {$/;"	f	class:std::rope	access:public	signature:(const rope& __y) const
std::rope::const_begin	stl/stl_rope.h	/^        const_iterator const_begin() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::const_end	stl/stl_rope.h	/^        const_iterator const_end() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::const_iterator	stl/stl_rope.h	/^        typedef _Rope_const_iterator<_CharT,_Alloc> const_iterator;$/;"	t	class:std::rope	access:public
std::rope::const_pointer	stl/stl_rope.h	/^        typedef const _CharT* const_pointer;$/;"	t	class:std::rope	access:public
std::rope::const_rbegin	stl/stl_rope.h	/^        const_reverse_iterator const_rbegin() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::const_reference	stl/stl_rope.h	/^        typedef _CharT const_reference;$/;"	t	class:std::rope	access:public
std::rope::const_rend	stl/stl_rope.h	/^        const_reverse_iterator const_rend() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::const_reverse_iterator	stl/stl_rope.h	/^                                 difference_type>  const_reverse_iterator;$/;"	t	class:std::rope	access:public
std::rope::const_reverse_iterator	stl/stl_rope.h	/^        typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::rope	access:public
std::rope::copy	stl/stl_rope.h	/^              size_type copy(_CharT* __buffer, size_type __n, $/;"	f	class:std::rope	access:public	signature:(_CharT* __buffer, size_type __n, size_type __pos = 0) const
std::rope::copy	stl/stl_rope.h	/^        size_type copy(size_type __pos, size_type __n, _CharT* __buffer) const $/;"	f	class:std::rope	access:public	signature:(size_type __pos, size_type __n, _CharT* __buffer) const
std::rope::copy	stl/stl_rope.h	/^        void copy(_CharT* __buffer) const {$/;"	f	class:std::rope	access:public	signature:(_CharT* __buffer) const
std::rope::delete_c_str	stl/stl_rope.h	/^        void delete_c_str () {$/;"	f	class:std::rope	access:public	signature:()
std::rope::difference_type	stl/stl_rope.h	/^        typedef ptrdiff_t difference_type;$/;"	t	class:std::rope	access:public
std::rope::dump	stl/stl_rope.h	/^        void dump() {$/;"	f	class:std::rope	access:public	signature:()
std::rope::empty	stl/stl_rope.h	/^        bool empty() const { return 0 == _M_tree_ptr; }$/;"	f	class:std::rope	access:public	signature:() const
std::rope::end	stl/stl_rope.h	/^            const_iterator end() { return const_end(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::end	stl/stl_rope.h	/^            iterator end() { return mutable_end(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::end	stl/stl_rope.h	/^        const_iterator end() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::erase	stl/stl_rope.h	/^        iterator erase(const iterator& __p) {$/;"	f	class:std::rope	access:public	signature:(const iterator& __p)
std::rope::erase	stl/stl_rope.h	/^        iterator erase(const iterator& __p, const iterator& __q) {$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q)
std::rope::erase	stl/stl_rope.h	/^        void erase(size_t __p) {$/;"	f	class:std::rope	access:public	signature:(size_t __p)
std::rope::erase	stl/stl_rope.h	/^        void erase(size_t __p, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n)
std::rope::find	stl/ropeimpl.h	/^rope<_CharT,_Alloc>::find(_CharT __pattern, size_t __start) const$/;"	f	class:std::rope	signature:(_CharT __pattern, size_t __start) const
std::rope::find	stl/stl_rope.h	/^        size_type find(_CharT __c, size_type __pos = 0) const;$/;"	p	class:std::rope	access:public	signature:(_CharT __c, size_type __pos = 0) const
std::rope::find	stl/stl_rope.h	/^        size_type find(const _CharT* __s, size_type __pos = 0) const {$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, size_type __pos = 0) const
std::rope::front	stl/stl_rope.h	/^        _CharT front() const$/;"	f	class:std::rope	access:public	signature:() const
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p ) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p )
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, _CharT __c) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, _CharT __c)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const _CharT* c_string) $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* c_string)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, const rope& __r)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const rope& __r)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p, size_t __n, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, size_t __n, _CharT __c)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const const_iterator& __i, const const_iterator& __j)
std::rope::insert	stl/stl_rope.h	/^        iterator insert(const iterator& __p,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __i, const iterator& __j)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p) {$/;"	f	class:std::rope	access:public	signature:(size_t __p)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, _CharT __c)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __c_string)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const _CharT* __i, size_t __n) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __n)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const const_iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const rope& __r)
std::rope::insert	stl/stl_rope.h	/^        void insert(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
std::rope::iterator	stl/stl_rope.h	/^        typedef _Rope_iterator<_CharT,_Alloc> iterator;$/;"	t	class:std::rope	access:public
std::rope::length	stl/stl_rope.h	/^        size_type length() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::max_size	stl/stl_rope.h	/^        size_type max_size() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::mutable_begin	stl/stl_rope.h	/^        iterator mutable_begin() {$/;"	f	class:std::rope	access:public	signature:()
std::rope::mutable_end	stl/stl_rope.h	/^        iterator mutable_end() {$/;"	f	class:std::rope	access:public	signature:()
std::rope::mutable_rbegin	stl/stl_rope.h	/^        reverse_iterator mutable_rbegin() {$/;"	f	class:std::rope	access:public	signature:()
std::rope::mutable_reference_at	stl/stl_rope.h	/^        reference mutable_reference_at(size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
std::rope::mutable_rend	stl/stl_rope.h	/^        reverse_iterator mutable_rend() {$/;"	f	class:std::rope	access:public	signature:()
std::rope::npos	stl/stl_rope.h	/^        static const size_type npos;$/;"	m	class:std::rope	access:public
std::rope::npos	stl/stl_rope.h	/^const rope<_CharT, _Alloc>::size_type rope<_CharT, _Alloc>::npos =$/;"	m	class:std::rope
std::rope::operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left, _CharT2 __right);$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, _CharT2 __right)
std::rope::operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const _CharT2* __right)
std::rope::operator +	stl/stl_rope.h	/^        operator+ (const rope<_CharT2,_Alloc2>& __left,$/;"	p	class:std::rope	access:friend	signature:(const rope<_CharT2,_Alloc2>& __left, const rope<_CharT2,_Alloc2>& __right)
std::rope::operator =	stl/stl_rope.h	/^        rope& operator=(const rope& __x)$/;"	f	class:std::rope	access:public	signature:(const rope& __x)
std::rope::operator []	stl/stl_rope.h	/^            reference operator[] (size_type __pos) {$/;"	f	class:std::rope	access:public	signature:(size_type __pos)
std::rope::operator []	stl/stl_rope.h	/^        _CharT operator[] (size_type __pos) const {$/;"	f	class:std::rope	access:public	signature:(size_type __pos) const
std::rope::pointer	stl/stl_rope.h	/^        typedef _Rope_char_ptr_proxy<_CharT,_Alloc> pointer;$/;"	t	class:std::rope	access:public
std::rope::pop_back	stl/stl_rope.h	/^        void pop_back()$/;"	f	class:std::rope	access:public	signature:()
std::rope::pop_front	stl/stl_rope.h	/^        void pop_front()$/;"	f	class:std::rope	access:public	signature:()
std::rope::push_back	stl/stl_rope.h	/^        void push_back(_CharT __x)$/;"	f	class:std::rope	access:public	signature:(_CharT __x)
std::rope::push_front	stl/stl_rope.h	/^        void push_front(_CharT __x)$/;"	f	class:std::rope	access:public	signature:(_CharT __x)
std::rope::rbegin	stl/stl_rope.h	/^            const_reverse_iterator rbegin() { return const_rbegin(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::rbegin	stl/stl_rope.h	/^            reverse_iterator rbegin() { return mutable_rbegin(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::rbegin	stl/stl_rope.h	/^        const_reverse_iterator rbegin() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::reference	stl/stl_rope.h	/^        typedef _Rope_char_ref_proxy<_CharT,_Alloc> reference;$/;"	t	class:std::rope	access:public
std::rope::rend	stl/stl_rope.h	/^            const_reverse_iterator rend() { return const_rend(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::rend	stl/stl_rope.h	/^            reverse_iterator rend() { return mutable_rend(); }$/;"	f	class:std::rope	access:public	signature:()
std::rope::rend	stl/stl_rope.h	/^        const_reverse_iterator rend() const {$/;"	f	class:std::rope	access:public	signature:() const
std::rope::replace	stl/stl_rope.h	/^        static _RopeRep* replace(_RopeRep* __old, size_t __pos1,$/;"	f	class:std::rope	access:protected	signature:(_RopeRep* __old, size_t __pos1, size_t __pos2, _RopeRep* __r)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, _CharT __c)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __c_string)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __c_string)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, const _CharT* __j)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, const _CharT* __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const _CharT* __i, size_t __n)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const _CharT* __i, size_t __n)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q, _CharT __c)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, _CharT __c)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __c_string)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, const _CharT* __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const _CharT* __i, size_t __n)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const const_iterator& __i, const const_iterator& __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const iterator& __i, const iterator& __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const iterator& __q,$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const iterator& __q, const rope& __r)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const rope& __r)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const rope& __r)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, const_iterator __i, $/;"	f	class:std::rope	access:public	signature:(const iterator& __p, const_iterator __i, const_iterator __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(const iterator& __p, iterator __i, iterator __j)$/;"	f	class:std::rope	access:public	signature:(const iterator& __p, iterator __i, iterator __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, _CharT __c)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __c_string)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, const _CharT* __j) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, const _CharT* __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const _CharT* __i, size_t __i_len) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const _CharT* __i, size_t __i_len)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const const_iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const const_iterator& __i, const const_iterator& __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const iterator& __i,$/;"	f	class:std::rope	access:public	signature:(size_t __p, const iterator& __i, const iterator& __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, const rope& __r)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, const _CharT* __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, $/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __i, size_t __i_len)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, _CharT __c) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, _CharT __c)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const _CharT* __c_string) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const _CharT* __c_string)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n, const rope& __r) {$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const rope& __r)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const const_iterator& __i, const const_iterator& __j)
std::rope::replace	stl/stl_rope.h	/^        void replace(size_t __p, size_t __n,$/;"	f	class:std::rope	access:public	signature:(size_t __p, size_t __n, const iterator& __i, const iterator& __j)
std::rope::replace_with_c_str	stl/ropeimpl.h	/^const _CharT* rope<_CharT,_Alloc>::replace_with_c_str() {$/;"	f	class:std::rope	signature:()
std::rope::replace_with_c_str	stl/stl_rope.h	/^        const _CharT* replace_with_c_str();$/;"	p	class:std::rope	access:public	signature:()
std::rope::reserve	stl/stl_rope.h	/^            void reserve(size_type __res_arg = 0) {}$/;"	f	class:std::rope	access:public	signature:(size_type __res_arg = 0)
std::rope::resize	stl/stl_rope.h	/^            void resize(size_type __n) {}$/;"	f	class:std::rope	access:public	signature:(size_type __n)
std::rope::resize	stl/stl_rope.h	/^            void resize(size_type __n, _CharT __c) {}$/;"	f	class:std::rope	access:public	signature:(size_type __n, _CharT __c)
std::rope::reverse_iterator	stl/stl_rope.h	/^                                 difference_type>  reverse_iterator;$/;"	t	class:std::rope	access:public
std::rope::reverse_iterator	stl/stl_rope.h	/^        typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::rope	access:public
std::rope::rope	stl/ropeimpl.h	/^rope<_CharT, _Alloc>::rope(size_t __n, _CharT __c,$/;"	f	class:std::rope	signature:(size_t __n, _CharT __c, const allocator_type& __a)
std::rope::rope	stl/stl_rope.h	/^        rope(_CharT __c, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(_CharT __c, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(_RopeRep* __t, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:private	signature:(_RopeRep* __t, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn,$/;"	f	class:std::rope	access:public	signature:(char_producer<_CharT> *__fn, size_t __len, bool __delete_fn, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const _CharT *__s, const _CharT *__e,$/;"	f	class:std::rope	access:public	signature:(const _CharT *__s, const _CharT *__e, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const _CharT* __s, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const _CharT* __s, size_t __len,$/;"	f	class:std::rope	access:public	signature:(const _CharT* __s, size_t __len, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const const_iterator& __s, const const_iterator& __e,$/;"	f	class:std::rope	access:public	signature:(const const_iterator& __s, const const_iterator& __e, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const iterator& __s, const iterator& __e,$/;"	f	class:std::rope	access:public	signature:(const iterator& __s, const iterator& __e, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(const rope& __x, const allocator_type& __a = allocator_type())$/;"	f	class:std::rope	access:public	signature:(const rope& __x, const allocator_type& __a = allocator_type())
std::rope::rope	stl/stl_rope.h	/^        rope(size_t __n, _CharT __c,$/;"	p	class:std::rope	access:public	signature:(size_t __n, _CharT __c, const allocator_type& __a = allocator_type())
std::rope::size	stl/stl_rope.h	/^        size_type size() const { $/;"	f	class:std::rope	access:public	signature:() const
std::rope::size_type	stl/stl_rope.h	/^        typedef size_t size_type;$/;"	t	class:std::rope	access:public
std::rope::substr	stl/stl_rope.h	/^        rope substr(const_iterator __start, const_iterator __end) const {$/;"	f	class:std::rope	access:public	signature:(const_iterator __start, const_iterator __end) const
std::rope::substr	stl/stl_rope.h	/^        rope substr(iterator __start) const {$/;"	f	class:std::rope	access:public	signature:(iterator __start) const
std::rope::substr	stl/stl_rope.h	/^        rope substr(iterator __start, iterator __end) const {$/;"	f	class:std::rope	access:public	signature:(iterator __start, iterator __end) const
std::rope::substr	stl/stl_rope.h	/^        rope substr(size_t __start, size_t __len = 1) const {$/;"	f	class:std::rope	access:public	signature:(size_t __start, size_t __len = 1) const
std::rope::substr	stl/stl_rope.h	/^        rope<_CharT,_Alloc> substr(const_iterator __start) {$/;"	f	class:std::rope	access:public	signature:(const_iterator __start)
std::rope::swap	stl/stl_rope.h	/^        void swap(rope& __b) {$/;"	f	class:std::rope	access:public	signature:(rope& __b)
std::rope::value_type	stl/stl_rope.h	/^        typedef _CharT value_type;$/;"	t	class:std::rope	access:public
std::rope::~rope	stl/stl_rope.h	/^        ~rope()$/;"	f	class:std::rope	access:public	signature:()
std::rotate	stl/ropeimpl.h	/^inline void rotate(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first,$/;"	f	namespace:std	signature:(_Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __first, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __middle, _Rope_iterator<char,__STL_DEFAULT_ALLOCATOR(char)> __last)
std::rotate	stl/stl_algo.h	/^inline _ForwardIter rotate(_ForwardIter __first, _ForwardIter __middle,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last)
std::rotate_copy	stl/stl_algo.h	/^_OutputIter rotate_copy(_ForwardIter __first, _ForwardIter __middle,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __middle, _ForwardIter __last, _OutputIter __result)
std::search	stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2)
std::search	stl/stl_algo.h	/^_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPred __predicate)
std::search_n	stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val)
std::search_n	stl/stl_algo.h	/^_ForwardIter search_n(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Integer __count, const _Tp& __val, _BinaryPred __binary_pred)
std::select1st	stl/stl_function.h	/^template <class _Pair> struct select1st : public _Select1st<_Pair> {};$/;"	s	namespace:std	inherits:_Select1st
std::select2nd	stl/stl_function.h	/^template <class _Pair> struct select2nd : public _Select2nd<_Pair> {};$/;"	s	namespace:std	inherits:_Select2nd
std::sequence_buffer	stl/stl_rope.h	/^class sequence_buffer : public output_iterator {$/;"	c	namespace:std	inherits:output_iterator
std::sequence_buffer::_M_buf_count	stl/stl_rope.h	/^        size_t     _M_buf_count;$/;"	m	class:std::sequence_buffer	access:protected
std::sequence_buffer::_M_buffer	stl/stl_rope.h	/^        value_type _M_buffer[_Buf_sz];$/;"	m	class:std::sequence_buffer	access:protected
std::sequence_buffer::_M_prefix	stl/stl_rope.h	/^        _Sequence* _M_prefix;$/;"	m	class:std::sequence_buffer	access:protected
std::sequence_buffer::__i	stl/stl_rope.h	/^                size_t __i = _M_buf_count;$/;"	l
std::sequence_buffer::__j	stl/stl_rope.h	/^                size_t __j = 0;$/;"	l
std::sequence_buffer::append	stl/stl_rope.h	/^                _M_prefix->append(__s, __s + __len);$/;"	p	signature:(__s, __s + __len)
std::sequence_buffer::append	stl/stl_rope.h	/^            _M_prefix->append(_M_buffer, _M_buffer + _M_buf_count);$/;"	p	signature:(_M_buffer, _M_buffer + _M_buf_count)
std::sequence_buffer::append	stl/stl_rope.h	/^        void append(value_type* __s, size_t __len)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
std::sequence_buffer::flush	stl/stl_rope.h	/^            __x.flush();$/;"	p	signature:()
std::sequence_buffer::flush	stl/stl_rope.h	/^        void flush() {$/;"	f	class:std::sequence_buffer	access:public	signature:()
std::sequence_buffer::operator *	stl/stl_rope.h	/^        sequence_buffer& operator*() { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:()
std::sequence_buffer::operator ++	stl/stl_rope.h	/^        sequence_buffer& operator++() { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:()
std::sequence_buffer::operator ++	stl/stl_rope.h	/^        sequence_buffer& operator++(int) { return *this; }$/;"	f	class:std::sequence_buffer	access:public	signature:(int)
std::sequence_buffer::operator =	stl/stl_rope.h	/^        sequence_buffer& operator= (const sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(const sequence_buffer& __x)
std::sequence_buffer::operator =	stl/stl_rope.h	/^        sequence_buffer& operator= (sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(sequence_buffer& __x)
std::sequence_buffer::operator =	stl/stl_rope.h	/^        sequence_buffer& operator=(const value_type& __rhs)$/;"	f	class:std::sequence_buffer	access:public	signature:(const value_type& __rhs)
std::sequence_buffer::push_back	stl/stl_rope.h	/^        void push_back(value_type __x)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type __x)
std::sequence_buffer::put	stl/stl_rope.h	/^        sequence_buffer& put(value_type __x)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type __x)
std::sequence_buffer::sequence_buffer	stl/stl_rope.h	/^        sequence_buffer() : _M_prefix(0), _M_buf_count(0) {}$/;"	f	class:std::sequence_buffer	access:public	signature:()
std::sequence_buffer::sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(_Sequence& __s) : _M_prefix(&__s), _M_buf_count(0) {}$/;"	f	class:std::sequence_buffer	access:public	signature:(_Sequence& __s)
std::sequence_buffer::sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(const sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(const sequence_buffer& __x)
std::sequence_buffer::sequence_buffer	stl/stl_rope.h	/^        sequence_buffer(sequence_buffer& __x) {$/;"	f	class:std::sequence_buffer	access:public	signature:(sequence_buffer& __x)
std::sequence_buffer::value_type	stl/stl_rope.h	/^            typedef typename _Sequence::value_type value_type;$/;"	t	class:std::sequence_buffer	access:public
std::sequence_buffer::write	stl/stl_rope.h	/^        sequence_buffer& write(value_type* __s, size_t __len)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
std::sequence_buffer::~sequence_buffer	stl/stl_rope.h	/^        ~sequence_buffer() { flush(); }$/;"	f	class:std::sequence_buffer	access:public	signature:()
std::set	stl/stl_set.h	/^class set {$/;"	c	namespace:std
std::set::_M_t	stl/stl_set.h	/^    _M_t.erase((_Rep_iterator&)__first, (_Rep_iterator&)__last); $/;"	p	signature:(_Rep_iterator&)__first, (_Rep_iterator&)__last
std::set::_M_t	stl/stl_set.h	/^    _M_t.erase((_Rep_iterator&)__position); $/;"	p	signature:(_Rep_iterator&)__position
std::set::_M_t	stl/stl_set.h	/^  _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	m	class:std::set	access:private
std::set::_Rep_iterator	stl/stl_set.h	/^    typedef typename _Rep_type::iterator _Rep_iterator;$/;"	t
std::set::_Rep_type	stl/stl_set.h	/^                  _Identity<value_type>, key_compare, _Alloc> _Rep_type;$/;"	t	class:std::set	access:private
std::set::__STL_CLASS_BINARY_FUNCTION_CHECK	stl/stl_set.h	/^  __STL_CLASS_BINARY_FUNCTION_CHECK(_Compare, bool, _Key, _Key);$/;"	p	class:std::set	access:private	signature:(_Compare, bool, _Key, _Key)
std::set::__STL_CLASS_REQUIRES	stl/stl_set.h	/^  __STL_CLASS_REQUIRES(_Key, _Assignable);$/;"	p	class:std::set	access:private	signature:(_Key, _Assignable)
std::set::__STL_NULL_TMPL_ARGS	stl/stl_set.h	/^  operator<  __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:std::set	access:friend	signature:(const set&, const set&)
std::set::__STL_NULL_TMPL_ARGS	stl/stl_set.h	/^  operator== __STL_NULL_TMPL_ARGS (const set&, const set&);$/;"	p	class:std::set	access:friend	signature:(const set&, const set&)
std::set::__p	stl/stl_set.h	/^    pair<typename _Rep_type::iterator, bool> __p = _M_t.insert_unique(__x); $/;"	l
std::set::allocator_type	stl/stl_set.h	/^  typedef typename _Rep_type::allocator_type allocator_type;$/;"	t	class:std::set	access:public
std::set::begin	stl/stl_set.h	/^  iterator begin() const { return _M_t.begin(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::clear	stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	f	class:std::set	access:public	signature:()
std::set::clear	stl/stl_set.h	/^  void clear() { _M_t.clear(); }$/;"	p	signature:()
std::set::const_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator const_iterator;$/;"	t	class:std::set	access:public
std::set::const_pointer	stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer const_pointer;$/;"	t	class:std::set	access:public
std::set::const_reference	stl/stl_set.h	/^  typedef typename _Rep_type::const_reference const_reference;$/;"	t	class:std::set	access:public
std::set::const_reverse_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	t	class:std::set	access:public
std::set::count	stl/stl_set.h	/^  size_type count(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::difference_type	stl/stl_set.h	/^  typedef typename _Rep_type::difference_type difference_type;$/;"	t	class:std::set	access:public
std::set::empty	stl/stl_set.h	/^  bool empty() const { return _M_t.empty(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::end	stl/stl_set.h	/^  iterator end() const { return _M_t.end(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::equal_range	stl/stl_set.h	/^  pair<iterator,iterator> equal_range(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::erase	stl/stl_set.h	/^  size_type erase(const key_type& __x) { $/;"	f	class:std::set	access:public	signature:(const key_type& __x)
std::set::erase	stl/stl_set.h	/^  void erase(iterator __first, iterator __last) { $/;"	f	class:std::set	access:public	signature:(iterator __first, iterator __last)
std::set::erase	stl/stl_set.h	/^  void erase(iterator __position) { $/;"	f	class:std::set	access:public	signature:(iterator __position)
std::set::find	stl/stl_set.h	/^  iterator find(const key_type& __x) const { return _M_t.find(__x); }$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::get_allocator	stl/stl_set.h	/^  allocator_type get_allocator() const { return _M_t.get_allocator(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::insert	stl/stl_set.h	/^  iterator insert(iterator __position, const value_type& __x) {$/;"	f	class:std::set	access:public	signature:(iterator __position, const value_type& __x)
std::set::insert	stl/stl_set.h	/^  pair<iterator,bool> insert(const value_type& __x) { $/;"	f	class:std::set	access:public	signature:(const value_type& __x)
std::set::insert	stl/stl_set.h	/^  void insert(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::set::insert	stl/stl_set.h	/^  void insert(const value_type* __first, const value_type* __last) {$/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last)
std::set::insert	stl/stl_set.h	/^  void insert(const_iterator __first, const_iterator __last) {$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last)
std::set::insert_unique	stl/stl_set.h	/^    : _M_t(__comp, __a) { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
std::set::insert_unique	stl/stl_set.h	/^    _M_t.insert_unique(__first, __last);$/;"	p	signature:(__first, __last)
std::set::insert_unique	stl/stl_set.h	/^    { _M_t.insert_unique(__first, __last); }$/;"	p	signature:(__first, __last)
std::set::iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_iterator iterator;$/;"	t	class:std::set	access:public
std::set::key_comp	stl/stl_set.h	/^  key_compare key_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::key_compare	stl/stl_set.h	/^  typedef _Compare key_compare;$/;"	t	class:std::set	access:public
std::set::key_type	stl/stl_set.h	/^  typedef _Key     key_type;$/;"	t	class:std::set	access:public
std::set::lower_bound	stl/stl_set.h	/^  iterator lower_bound(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::max_size	stl/stl_set.h	/^  size_type max_size() const { return _M_t.max_size(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::operator <	stl/stl_set.h	/^  friend bool operator< (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
std::set::operator =	stl/stl_set.h	/^  set<_Key,_Compare,_Alloc>& operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	f	class:std::set	access:public	signature:(const set<_Key, _Compare, _Alloc>& __x)
std::set::operator ==	stl/stl_set.h	/^  friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);$/;"	p	class:std::set	access:friend	signature:(const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&)
std::set::pointer	stl/stl_set.h	/^  typedef typename _Rep_type::const_pointer pointer;$/;"	t	class:std::set	access:public
std::set::rbegin	stl/stl_set.h	/^  reverse_iterator rbegin() const { return _M_t.rbegin(); } $/;"	f	class:std::set	access:public	signature:() const
std::set::reference	stl/stl_set.h	/^  typedef typename _Rep_type::const_reference reference;$/;"	t	class:std::set	access:public
std::set::rend	stl/stl_set.h	/^  reverse_iterator rend() const { return _M_t.rend(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::reverse_iterator	stl/stl_set.h	/^  typedef typename _Rep_type::const_reverse_iterator reverse_iterator;$/;"	t	class:std::set	access:public
std::set::set	stl/stl_set.h	/^  explicit set(const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::set	stl/stl_set.h	/^  set() : _M_t(_Compare(), allocator_type()) {}$/;"	f	class:std::set	access:public	signature:()
std::set::set	stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::set::set	stl/stl_set.h	/^  set(_InputIterator __first, _InputIterator __last, const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(_InputIterator __first, _InputIterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::set	stl/stl_set.h	/^  set(const set<_Key,_Compare,_Alloc>& __x) : _M_t(__x._M_t) {}$/;"	f	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc>& __x)
std::set::set	stl/stl_set.h	/^  set(const value_type* __first, $/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::set	stl/stl_set.h	/^  set(const value_type* __first, const value_type* __last) $/;"	f	class:std::set	access:public	signature:(const value_type* __first, const value_type* __last)
std::set::set	stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last)$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last)
std::set::set	stl/stl_set.h	/^  set(const_iterator __first, const_iterator __last, const _Compare& __comp,$/;"	f	class:std::set	access:public	signature:(const_iterator __first, const_iterator __last, const _Compare& __comp, const allocator_type& __a = allocator_type())
std::set::size	stl/stl_set.h	/^  size_type size() const { return _M_t.size(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::size_type	stl/stl_set.h	/^  typedef typename _Rep_type::size_type size_type;$/;"	t	class:std::set	access:public
std::set::swap	stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
std::set::swap	stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
std::set::upper_bound	stl/stl_set.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
std::set::value_comp	stl/stl_set.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::set	access:public	signature:() const
std::set::value_compare	stl/stl_set.h	/^  typedef _Compare value_compare;$/;"	t	class:std::set	access:public
std::set::value_type	stl/stl_set.h	/^  typedef _Key     value_type;$/;"	t	class:std::set	access:public
std::set_difference	stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
std::set_difference	stl/stl_algo.h	/^_OutputIter set_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
std::set_intersection	stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
std::set_intersection	stl/stl_algo.h	/^_OutputIter set_intersection(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
std::set_symmetric_difference	stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
std::set_symmetric_difference	stl/stl_algo.h	/^set_symmetric_difference(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
std::set_union	stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result)
std::set_union	stl/stl_algo.h	/^_OutputIter set_union(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _InputIter2 __last2, _OutputIter __result, _Compare __comp)
std::simple_alloc	stl/stl_alloc.h	/^class simple_alloc {$/;"	c	namespace:std
std::simple_alloc::_Alloc::deallocate	stl/stl_alloc.h	/^      { _Alloc::deallocate(__p, sizeof (_Tp)); }$/;"	p	class:std::simple_alloc::_Alloc	signature:(__p, sizeof (_Tp))
std::simple_alloc::_Alloc::deallocate	stl/stl_alloc.h	/^      { if (0 != __n) _Alloc::deallocate(__p, __n * sizeof (_Tp)); }$/;"	p	class:std::simple_alloc::_Alloc	signature:(__p, __n * sizeof (_Tp))
std::simple_alloc::allocate	stl/stl_alloc.h	/^    static _Tp* allocate(size_t __n)$/;"	f	class:std::simple_alloc	access:public	signature:(size_t __n)
std::simple_alloc::allocate	stl/stl_alloc.h	/^    static _Tp* allocate(void)$/;"	f	class:std::simple_alloc	access:public	signature:(void)
std::simple_alloc::deallocate	stl/stl_alloc.h	/^    static void deallocate(_Tp* __p)$/;"	f	class:std::simple_alloc	access:public	signature:(_Tp* __p)
std::simple_alloc::deallocate	stl/stl_alloc.h	/^    static void deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::simple_alloc	access:public	signature:(_Tp* __p, size_t __n)
std::single_client_alloc	stl/stl_alloc.h	/^typedef __default_alloc_template<false, 0> single_client_alloc;$/;"	t	namespace:std
std::single_client_alloc	stl/stl_alloc.h	/^typedef malloc_alloc single_client_alloc;$/;"	t	namespace:std
std::slist	stl/stl_slist.h	/^class slist : private _Slist_base<_Tp,_Alloc>$/;"	c	namespace:std	inherits:_Slist_base
std::slist::_Base	stl/stl_slist.h	/^  typedef _Slist_base<_Tp,_Alloc> _Base;$/;"	t	class:std::slist	access:private
std::slist::_Integral	stl/stl_slist.h	/^    typedef typename _Is_integer<_InIter>::_Integral _Integral;$/;"	t
std::slist::_Integral	stl/stl_slist.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
std::slist::_Iterator_base	stl/stl_slist.h	/^  typedef _Slist_iterator_base  _Iterator_base;$/;"	t	class:std::slist	access:private
std::slist::_M_assign_dispatch	stl/stl_slist.h	/^  void _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::slist::_M_assign_dispatch	stl/stl_slist.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::slist	access:public	signature:(_Integer __n, _Integer __val, __true_type)
std::slist::_M_assign_dispatch	stl/stl_slist.h	/^slist<_Tp, _Alloc>::_M_assign_dispatch(_InputIter __first, _InputIter __last,$/;"	f	class:std::slist	signature:(_InputIter __first, _InputIter __last, __false_type)
std::slist::_M_create_node	stl/stl_slist.h	/^  _Node* _M_create_node() {$/;"	f	class:std::slist	access:private	signature:()
std::slist::_M_create_node	stl/stl_slist.h	/^  _Node* _M_create_node(const value_type& __x) {$/;"	f	class:std::slist	access:private	signature:(const value_type& __x)
std::slist::_M_fill_assign	stl/stl_slist.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::slist	access:public	signature:(size_type __n, const _Tp& __val)
std::slist::_M_fill_assign	stl/stl_slist.h	/^void slist<_Tp, _Alloc>::_M_fill_assign(size_type __n, const _Tp& __val) {$/;"	f	class:std::slist	signature:(size_type __n, const _Tp& __val)
std::slist::_M_insert_after	stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos) {$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos)
std::slist::_M_insert_after	stl/stl_slist.h	/^  _Node* _M_insert_after(_Node_base* __pos, const value_type& __x) {$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const value_type& __x)
std::slist::_M_insert_after_fill	stl/stl_slist.h	/^  void _M_insert_after_fill(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, size_type __n, const value_type& __x)
std::slist::_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, $/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last)
std::slist::_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos, _Integer __n, _Integer __x,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _Integer __n, _Integer __x, __true_type)
std::slist::_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, _InIter __first, _InIter __last, __false_type)
std::slist::_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const value_type* __first, const value_type* __last)
std::slist::_M_insert_after_range	stl/stl_slist.h	/^  void _M_insert_after_range(_Node_base* __pos,$/;"	f	class:std::slist	access:private	signature:(_Node_base* __pos, const_iterator __first, const_iterator __last)
std::slist::_Node	stl/stl_slist.h	/^  typedef _Slist_node<_Tp>      _Node;$/;"	t	class:std::slist	access:private
std::slist::_Node_base	stl/stl_slist.h	/^  typedef _Slist_node_base      _Node_base;$/;"	t	class:std::slist	access:private
std::slist::__STD::swap	stl/stl_slist.h	/^    { __STD::swap(this->_M_head._M_next, __x._M_head._M_next); }$/;"	p	class:std::slist::__STD	signature:(this->_M_head._M_next, __x._M_head._M_next)
std::slist::__STL_CLASS_REQUIRES	stl/stl_slist.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::slist	access:private	signature:(_Tp, _Assignable)
std::slist::__first	stl/stl_slist.h	/^                          __first, __last);$/;"	l
std::slist::__last	stl/stl_slist.h	/^                          __first, __last);$/;"	l
std::slist::__n	stl/stl_slist.h	/^                         __n, __x);$/;"	l
std::slist::__node	stl/stl_slist.h	/^    _Node* __node = (_Node*) this->_M_head._M_next;$/;"	l
std::slist::__node	stl/stl_slist.h	/^    _Node* __node = this->_M_get_node();$/;"	l
std::slist::__slist_previous	stl/stl_slist.h	/^                           __slist_previous(__first._M_node, __last._M_node));$/;"	p	signature:(__first._M_node, __last._M_node)
std::slist::__x	stl/stl_slist.h	/^                         __n, __x);$/;"	l
std::slist::allocator_type	stl/stl_slist.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::slist	access:public
std::slist::assign	stl/stl_slist.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::slist::assign	stl/stl_slist.h	/^  void assign(size_type __n, const _Tp& __val)$/;"	f	class:std::slist	access:public	signature:(size_type __n, const _Tp& __val)
std::slist::before_begin	stl/stl_slist.h	/^  const_iterator before_begin() const$/;"	f	class:std::slist	access:public	signature:() const
std::slist::before_begin	stl/stl_slist.h	/^  iterator before_begin() { return iterator((_Node*) &this->_M_head); }$/;"	f	class:std::slist	access:public	signature:()
std::slist::begin	stl/stl_slist.h	/^  const_iterator begin() const $/;"	f	class:std::slist	access:public	signature:() const
std::slist::begin	stl/stl_slist.h	/^  iterator begin() { return iterator((_Node*)this->_M_head._M_next); }$/;"	f	class:std::slist	access:public	signature:()
std::slist::clear	stl/stl_slist.h	/^  void clear() { this->_M_erase_after(&this->_M_head, 0); }$/;"	f	class:std::slist	access:public	signature:()
std::slist::const_iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	t	class:std::slist	access:public
std::slist::const_pointer	stl/stl_slist.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::slist	access:public
std::slist::const_reference	stl/stl_slist.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::slist	access:public
std::slist::difference_type	stl/stl_slist.h	/^  typedef ptrdiff_t         difference_type;$/;"	t	class:std::slist	access:public
std::slist::empty	stl/stl_slist.h	/^  bool empty() const { return this->_M_head._M_next == 0; }$/;"	f	class:std::slist	access:public	signature:() const
std::slist::end	stl/stl_slist.h	/^  const_iterator end() const { return const_iterator(0); }$/;"	f	class:std::slist	access:public	signature:() const
std::slist::end	stl/stl_slist.h	/^  iterator end() { return iterator(0); }$/;"	f	class:std::slist	access:public	signature:()
std::slist::erase	stl/stl_slist.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __first, iterator __last)
std::slist::erase	stl/stl_slist.h	/^  iterator erase(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
std::slist::erase_after	stl/stl_slist.h	/^  iterator erase_after(iterator __before_first, iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __before_first, iterator __last)
std::slist::erase_after	stl/stl_slist.h	/^  iterator erase_after(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
std::slist::front	stl/stl_slist.h	/^  const_reference front() const $/;"	f	class:std::slist	access:public	signature:() const
std::slist::front	stl/stl_slist.h	/^  reference front() { return ((_Node*) this->_M_head._M_next)->_M_data; }$/;"	f	class:std::slist	access:public	signature:()
std::slist::get_allocator	stl/stl_slist.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::slist	access:public	signature:() const
std::slist::insert	stl/stl_slist.h	/^  iterator insert(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
std::slist::insert	stl/stl_slist.h	/^  iterator insert(iterator __pos, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type& __x)
std::slist::insert	stl/stl_slist.h	/^  void insert(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
std::slist::insert	stl/stl_slist.h	/^  void insert(iterator __pos, const value_type* __first, $/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
std::slist::insert	stl/stl_slist.h	/^  void insert(iterator __pos, const_iterator __first, const_iterator __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
std::slist::insert	stl/stl_slist.h	/^  void insert(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
std::slist::insert_after	stl/stl_slist.h	/^  iterator insert_after(iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos)
std::slist::insert_after	stl/stl_slist.h	/^  iterator insert_after(iterator __pos, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type& __x)
std::slist::insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos, _InIter __first, _InIter __last) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, _InIter __first, _InIter __last)
std::slist::insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos, size_type __n, const value_type& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, size_type __n, const value_type& __x)
std::slist::insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const value_type* __first, const value_type* __last)
std::slist::insert_after	stl/stl_slist.h	/^  void insert_after(iterator __pos,$/;"	f	class:std::slist	access:public	signature:(iterator __pos, const_iterator __first, const_iterator __last)
std::slist::iterator	stl/stl_slist.h	/^  typedef _Slist_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	t	class:std::slist	access:public
std::slist::max_size	stl/stl_slist.h	/^  size_type max_size() const { return size_type(-1); }$/;"	f	class:std::slist	access:public	signature:() const
std::slist::merge	stl/stl_slist.h	/^  void merge(slist& __x);$/;"	p	class:std::slist	access:public	signature:(slist& __x)
std::slist::merge	stl/stl_slist.h	/^  void merge(slist&, _StrictWeakOrdering);$/;"	p	class:std::slist	access:public	signature:(slist&, _StrictWeakOrdering)
std::slist::merge	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x)$/;"	f	class:std::slist	signature:(slist<_Tp,_Alloc>& __x)
std::slist::merge	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::merge(slist<_Tp,_Alloc>& __x,$/;"	f	class:std::slist	signature:(slist<_Tp,_Alloc>& __x, _StrictWeakOrdering __comp)
std::slist::operator =	stl/stl_slist.h	/^  slist& operator= (const slist& __x);$/;"	p	class:std::slist	access:public	signature:(const slist& __x)
std::slist::operator =	stl/stl_slist.h	/^slist<_Tp,_Alloc>& slist<_Tp,_Alloc>::operator=(const slist<_Tp,_Alloc>& __x)$/;"	f	class:std::slist	signature:(const slist<_Tp,_Alloc>& __x)
std::slist::pointer	stl/stl_slist.h	/^  typedef value_type*       pointer;$/;"	t	class:std::slist	access:public
std::slist::pop_front	stl/stl_slist.h	/^  void pop_front() {$/;"	f	class:std::slist	access:public	signature:()
std::slist::previous	stl/stl_slist.h	/^  const_iterator previous(const_iterator __pos) const {$/;"	f	class:std::slist	access:public	signature:(const_iterator __pos) const
std::slist::previous	stl/stl_slist.h	/^  iterator previous(const_iterator __pos) {$/;"	f	class:std::slist	access:public	signature:(const_iterator __pos)
std::slist::push_front	stl/stl_slist.h	/^  void push_front() { __slist_make_link(&this->_M_head, _M_create_node()); }$/;"	f	class:std::slist	access:public	signature:()
std::slist::push_front	stl/stl_slist.h	/^  void push_front(const value_type& __x)   {$/;"	f	class:std::slist	access:public	signature:(const value_type& __x)
std::slist::reference	stl/stl_slist.h	/^  typedef value_type&       reference;$/;"	t	class:std::slist	access:public
std::slist::remove	stl/stl_slist.h	/^  void remove(const _Tp& __val); $/;"	p	class:std::slist	access:public	signature:(const _Tp& __val)
std::slist::remove	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove(const _Tp& __val)$/;"	f	class:std::slist	signature:(const _Tp& __val)
std::slist::remove_if	stl/stl_slist.h	/^  void remove_if(_Predicate __pred);$/;"	p	class:std::slist	access:public	signature:(_Predicate __pred)
std::slist::remove_if	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::remove_if(_Predicate __pred)$/;"	f	class:std::slist	signature:(_Predicate __pred)
std::slist::resize	stl/stl_slist.h	/^  void resize(size_type new_size) { resize(new_size, _Tp()); }$/;"	f	class:std::slist	access:public	signature:(size_type new_size)
std::slist::resize	stl/stl_slist.h	/^  void resize(size_type new_size, const _Tp& __x);$/;"	p	class:std::slist	access:public	signature:(size_type new_size, const _Tp& __x)
std::slist::resize	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::resize(size_type __len, const _Tp& __x)$/;"	f	class:std::slist	signature:(size_type __len, const _Tp& __x)
std::slist::reverse	stl/stl_slist.h	/^  void reverse() { $/;"	f	class:std::slist	access:public	signature:()
std::slist::size	stl/stl_slist.h	/^  size_type size() const { return __slist_size(this->_M_head._M_next); }$/;"	f	class:std::slist	access:public	signature:() const
std::slist::size_type	stl/stl_slist.h	/^  typedef size_t            size_type;$/;"	t	class:std::slist	access:public
std::slist::slist	stl/stl_slist.h	/^  explicit slist(const allocator_type& __a = allocator_type()) : _Base(__a) {}$/;"	f	class:std::slist	access:public	signature:(const allocator_type& __a = allocator_type())
std::slist::slist	stl/stl_slist.h	/^  explicit slist(size_type __n) : _Base(allocator_type())$/;"	f	class:std::slist	access:public	signature:(size_type __n)
std::slist::slist	stl/stl_slist.h	/^  slist(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::slist	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::slist::slist	stl/stl_slist.h	/^  slist(const slist& __x) : _Base(__x.get_allocator())$/;"	f	class:std::slist	access:public	signature:(const slist& __x)
std::slist::slist	stl/stl_slist.h	/^  slist(const value_type* __first, const value_type* __last,$/;"	f	class:std::slist	access:public	signature:(const value_type* __first, const value_type* __last, const allocator_type& __a = allocator_type())
std::slist::slist	stl/stl_slist.h	/^  slist(const_iterator __first, const_iterator __last,$/;"	f	class:std::slist	access:public	signature:(const_iterator __first, const_iterator __last, const allocator_type& __a = allocator_type())
std::slist::slist	stl/stl_slist.h	/^  slist(size_type __n, const value_type& __x,$/;"	f	class:std::slist	access:public	signature:(size_type __n, const value_type& __x, const allocator_type& __a = allocator_type())
std::slist::sort	stl/stl_slist.h	/^  void sort();     $/;"	p	class:std::slist	access:public	signature:()
std::slist::sort	stl/stl_slist.h	/^  void sort(_StrictWeakOrdering __comp); $/;"	p	class:std::slist	access:public	signature:(_StrictWeakOrdering __comp)
std::slist::sort	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort()$/;"	f	class:std::slist	signature:()
std::slist::sort	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::sort(_StrictWeakOrdering __comp)$/;"	f	class:std::slist	signature:(_StrictWeakOrdering __comp)
std::slist::splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x)
std::slist::splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __first, iterator __last)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x, iterator __first, iterator __last)
std::slist::splice	stl/stl_slist.h	/^  void splice(iterator __pos, slist& __x, iterator __i) {$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x, iterator __i)
std::slist::splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, $/;"	f	class:std::slist	access:public	signature:(iterator __pos, iterator __before_first, iterator __before_last)
std::slist::splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, iterator __prev)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, iterator __prev)
std::slist::splice_after	stl/stl_slist.h	/^  void splice_after(iterator __pos, slist& __x)$/;"	f	class:std::slist	access:public	signature:(iterator __pos, slist& __x)
std::slist::swap	stl/stl_slist.h	/^  void swap(slist& __x)$/;"	f	class:std::slist	access:public	signature:(slist& __x)
std::slist::unique	stl/stl_slist.h	/^  void unique(); $/;"	p	class:std::slist	access:public	signature:()
std::slist::unique	stl/stl_slist.h	/^  void unique(_BinaryPredicate __pred); $/;"	p	class:std::slist	access:public	signature:(_BinaryPredicate __pred)
std::slist::unique	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique()$/;"	f	class:std::slist	signature:()
std::slist::unique	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique(_BinaryPredicate __pred)$/;"	f	class:std::slist	signature:(_BinaryPredicate __pred)
std::slist::value_type	stl/stl_slist.h	/^  typedef _Tp                value_type;$/;"	t	class:std::slist	access:public
std::slist::~slist	stl/stl_slist.h	/^  ~slist() {}$/;"	f	class:std::slist	access:public	signature:()
std::sort	stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last) {$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::sort	stl/stl_algo.h	/^inline void sort(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::sort_heap	stl/stl_heap.h	/^sort_heap(_RandomAccessIterator __first,$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
std::sort_heap	stl/stl_heap.h	/^void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	f	namespace:std	signature:(_RandomAccessIterator __first, _RandomAccessIterator __last)
std::splice	stl/stl_list.h	/^      __carry.splice(__carry.begin(), *this, begin());$/;"	p	signature:(__carry.begin(), *this, begin())
std::stable_partition	stl/stl_algo.h	/^inline _ForwardIter stable_partition(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _Predicate __pred)
std::stable_sort	stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last)
std::stable_sort	stl/stl_algo.h	/^inline void stable_sort(_RandomAccessIter __first,$/;"	f	namespace:std	signature:(_RandomAccessIter __first, _RandomAccessIter __last, _Compare __comp)
std::stack	stl/stl_stack.h	/^class stack {$/;"	c	namespace:std
std::stack::_Sequence_value_type	stl/stl_stack.h	/^  typedef typename _Sequence::value_type _Sequence_value_type;$/;"	t	class:std::stack	access:private
std::stack::__STL_CLASS_REQUIRES	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Sequence, _BackInsertionSequence);$/;"	p	class:std::stack	access:private	signature:(_Sequence, _BackInsertionSequence)
std::stack::__STL_CLASS_REQUIRES	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::stack	access:private	signature:(_Tp, _Assignable)
std::stack::__STL_CLASS_REQUIRES_SAME_TYPE	stl/stl_stack.h	/^  __STL_CLASS_REQUIRES_SAME_TYPE(_Tp, _Sequence_value_type);$/;"	p	class:std::stack	access:private	signature:(_Tp, _Sequence_value_type)
std::stack::__STL_NULL_TMPL_ARGS	stl/stl_stack.h	/^  operator< __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:std::stack	access:friend	signature:(const stack&, const stack&)
std::stack::__STL_NULL_TMPL_ARGS	stl/stl_stack.h	/^  operator== __STL_NULL_TMPL_ARGS (const stack&, const stack&);$/;"	p	class:std::stack	access:friend	signature:(const stack&, const stack&)
std::stack::c	stl/stl_stack.h	/^  _Sequence c;$/;"	m	class:std::stack	access:protected
std::stack::const_reference	stl/stl_stack.h	/^  typedef typename _Sequence::const_reference const_reference;$/;"	t	class:std::stack	access:public
std::stack::container_type	stl/stl_stack.h	/^  typedef          _Sequence                  container_type;$/;"	t	class:std::stack	access:public
std::stack::empty	stl/stl_stack.h	/^  bool empty() const { return c.empty(); }$/;"	f	class:std::stack	access:public	signature:() const
std::stack::operator <	stl/stl_stack.h	/^  friend bool operator< (const stack<_Tp1, _Seq1>&,$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
std::stack::operator ==	stl/stl_stack.h	/^  friend bool operator== (const stack<_Tp1, _Seq1>&,$/;"	p	class:std::stack	access:friend	signature:(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&)
std::stack::pop	stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	f	class:std::stack	access:public	signature:()
std::stack::pop_back	stl/stl_stack.h	/^  void pop() { c.pop_back(); }$/;"	p	signature:()
std::stack::push	stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	f	class:std::stack	access:public	signature:(const value_type& __x)
std::stack::push_back	stl/stl_stack.h	/^  void push(const value_type& __x) { c.push_back(__x); }$/;"	p	signature:(__x)
std::stack::reference	stl/stl_stack.h	/^  typedef typename _Sequence::reference       reference;$/;"	t	class:std::stack	access:public
std::stack::size	stl/stl_stack.h	/^  size_type size() const { return c.size(); }$/;"	f	class:std::stack	access:public	signature:() const
std::stack::size_type	stl/stl_stack.h	/^  typedef typename _Sequence::size_type       size_type;$/;"	t	class:std::stack	access:public
std::stack::stack	stl/stl_stack.h	/^  explicit stack(const _Sequence& __s) : c(__s) {}$/;"	f	class:std::stack	access:public	signature:(const _Sequence& __s)
std::stack::stack	stl/stl_stack.h	/^  stack() : c() {}$/;"	f	class:std::stack	access:public	signature:()
std::stack::top	stl/stl_stack.h	/^  const_reference top() const { return c.back(); }$/;"	f	class:std::stack	access:public	signature:() const
std::stack::top	stl/stl_stack.h	/^  reference top() { return c.back(); }$/;"	f	class:std::stack	access:public	signature:()
std::stack::value_type	stl/stl_stack.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::stack	access:public
std::string	stl/stl_string_fwd.h	/^typedef basic_string<char>    string;$/;"	t	namespace:std
std::subtractive_rng	stl/stl_function.h	/^class subtractive_rng : public unary_function<unsigned int, unsigned int> {$/;"	c	namespace:std	inherits:unary_function
std::subtractive_rng::_M_index1	stl/stl_function.h	/^  size_t _M_index1;$/;"	m	class:std::subtractive_rng	access:private
std::subtractive_rng::_M_index2	stl/stl_function.h	/^  size_t _M_index2;$/;"	m	class:std::subtractive_rng	access:private
std::subtractive_rng::_M_initialize	stl/stl_function.h	/^  void _M_initialize(unsigned int __seed)$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __seed)
std::subtractive_rng::_M_table	stl/stl_function.h	/^  unsigned int _M_table[55];$/;"	m	class:std::subtractive_rng	access:private
std::subtractive_rng::__i	stl/stl_function.h	/^    size_t __i;$/;"	l
std::subtractive_rng::__ii	stl/stl_function.h	/^        size_t __ii = (21 * (__i + 1) % 55) - 1;$/;"	l
std::subtractive_rng::__k	stl/stl_function.h	/^    unsigned int __k = 1;$/;"	l
std::subtractive_rng::operator ()	stl/stl_function.h	/^  unsigned int operator()(unsigned int __limit) {$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __limit)
std::subtractive_rng::subtractive_rng	stl/stl_function.h	/^  subtractive_rng() { _M_initialize(161803398u); }$/;"	f	class:std::subtractive_rng	access:public	signature:()
std::subtractive_rng::subtractive_rng	stl/stl_function.h	/^  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __seed)
std::swap	stl/stl_algobase.h	/^inline void swap(_Tp& __a, _Tp& __b) {$/;"	f	namespace:std	signature:(_Tp& __a, _Tp& __b)
std::swap	stl/stl_bvector.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_bvector.h	/^inline void swap(_Bit_reference __x, _Bit_reference __y)$/;"	f	namespace:std	signature:(_Bit_reference __x, _Bit_reference __y)
std::swap	stl/stl_bvector.h	/^inline void swap(bit_vector& __x, bit_vector& __y) {$/;"	f	namespace:std	signature:(bit_vector& __x, bit_vector& __y)
std::swap	stl/stl_deque.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_deque.h	/^inline void swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y) {$/;"	f	namespace:std	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
std::swap	stl/stl_hash_map.h	/^  __hm1.swap(__hm2);$/;"	p	signature:(__hm2)
std::swap	stl/stl_hash_map.h	/^swap(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
std::swap	stl/stl_hash_map.h	/^swap(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
std::swap	stl/stl_hash_set.h	/^  __hs1.swap(__hs2);$/;"	p	signature:(__hs2)
std::swap	stl/stl_hash_set.h	/^swap(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::swap	stl/stl_hash_set.h	/^swap(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
std::swap	stl/stl_hashtable.h	/^        _M_buckets.swap(__tmp);$/;"	p	signature:(__tmp)
std::swap	stl/stl_hashtable.h	/^  __ht1.swap(__ht2);$/;"	p	signature:(__ht2)
std::swap	stl/stl_hashtable.h	/^inline void swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,$/;"	f	namespace:std	signature:(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1, hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht2)
std::swap	stl/stl_list.h	/^        __carry.swap(__counter[__i++]);$/;"	p	signature:(__counter[__i++])
std::swap	stl/stl_list.h	/^      __carry.swap(__counter[__i]);         $/;"	p	signature:(__counter[__i])
std::swap	stl/stl_list.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_list.h	/^swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
std::swap	stl/stl_map.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_map.h	/^inline void swap(map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x, map<_Key,_Tp,_Compare,_Alloc>& __y)
std::swap	stl/stl_multimap.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_multimap.h	/^inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x, multimap<_Key,_Tp,_Compare,_Alloc>& __y)
std::swap	stl/stl_multiset.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_multiset.h	/^inline void swap(multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(multiset<_Key,_Compare,_Alloc>& __x, multiset<_Key,_Compare,_Alloc>& __y)
std::swap	stl/stl_rope.h	/^    inline void swap(_Rope_char_ref_proxy <_CharT, __Alloc > __a,$/;"	f	namespace:std	signature:(_Rope_char_ref_proxy <_CharT, __Alloc > __a, _Rope_char_ref_proxy <_CharT, __Alloc > __b)
std::swap	stl/stl_rope.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_rope.h	/^inline void swap(crope __x, crope __y) { __x.swap(__y); }$/;"	f	namespace:std	signature:(crope __x, crope __y)
std::swap	stl/stl_rope.h	/^inline void swap(crope __x, crope __y) { __x.swap(__y); }$/;"	p	signature:(__y)
std::swap	stl/stl_rope.h	/^inline void swap(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y)
std::swap	stl/stl_rope.h	/^inline void swap(wrope __x, wrope __y) { __x.swap(__y); }$/;"	f	namespace:std	signature:(wrope __x, wrope __y)
std::swap	stl/stl_rope.h	/^inline void swap(wrope __x, wrope __y) { __x.swap(__y); }$/;"	p	signature:(__y)
std::swap	stl/stl_set.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_set.h	/^inline void swap(set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(set<_Key,_Compare,_Alloc>& __x, set<_Key,_Compare,_Alloc>& __y)
std::swap	stl/stl_slist.h	/^        __carry.swap(__counter[__i]);$/;"	p	signature:(__counter[__i])
std::swap	stl/stl_slist.h	/^      __carry.swap(__counter[__i]);$/;"	p	signature:(__counter[__i])
std::swap	stl/stl_slist.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_slist.h	/^inline void swap(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y) {$/;"	f	namespace:std	signature:(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y)
std::swap	stl/stl_tree.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_tree.h	/^swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
std::swap	stl/stl_vector.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
std::swap	stl/stl_vector.h	/^inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
std::swap_ranges	stl/stl_algo.h	/^_ForwardIter2 swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2)
std::temporary_buffer	stl/stl_tempbuf.h	/^struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>$/;"	s	namespace:std	inherits:_Temporary_buffer
std::temporary_buffer::temporary_buffer	stl/stl_tempbuf.h	/^  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
std::temporary_buffer::~temporary_buffer	stl/stl_tempbuf.h	/^  ~temporary_buffer() {}$/;"	f	struct:std::temporary_buffer	access:public	signature:()
std::transform	stl/stl_algo.h	/^_OutputIter transform(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _UnaryOperation __opr)
std::transform	stl/stl_algo.h	/^_OutputIter transform(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _OutputIter __result, _BinaryOperation __binary_op)
std::unary_compose	stl/stl_function.h	/^class unary_compose$/;"	c	namespace:std	inherits:unary_function
std::unary_compose::_M_fn1	stl/stl_function.h	/^  _Operation1 _M_fn1;$/;"	m	class:std::unary_compose	access:protected
std::unary_compose::_M_fn2	stl/stl_function.h	/^  _Operation2 _M_fn2;$/;"	m	class:std::unary_compose	access:protected
std::unary_compose::operator ()	stl/stl_function.h	/^  operator()(const typename _Operation2::argument_type& __x) const {$/;"	f	class:std::unary_compose	access:public	signature:(const typename _Operation2::argument_type& __x) const
std::unary_compose::unary_compose	stl/stl_function.h	/^  unary_compose(const _Operation1& __x, const _Operation2& __y) $/;"	f	class:std::unary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y)
std::unary_function	stl/stl_function.h	/^struct unary_function {$/;"	s	namespace:std
std::unary_function::argument_type	stl/stl_function.h	/^  typedef _Arg argument_type;$/;"	t	struct:std::unary_function	access:public
std::unary_function::result_type	stl/stl_function.h	/^  typedef _Result result_type;$/;"	t	struct:std::unary_function	access:public
std::unary_negate	stl/stl_function.h	/^class unary_negate$/;"	c	namespace:std	inherits:unary_function
std::unary_negate::_M_pred	stl/stl_function.h	/^  _Predicate _M_pred;$/;"	m	class:std::unary_negate	access:protected
std::unary_negate::operator ()	stl/stl_function.h	/^  bool operator()(const typename _Predicate::argument_type& __x) const {$/;"	f	class:std::unary_negate	access:public	signature:(const typename _Predicate::argument_type& __x) const
std::unary_negate::unary_negate	stl/stl_function.h	/^  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::unary_negate	access:public	signature:(const _Predicate& __x)
std::uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result)
std::uninitialized_copy	stl/stl_uninitialized.h	/^inline char* uninitialized_copy(const char* __first, const char* __last,$/;"	f	namespace:std	signature:(const char* __first, const char* __last, char* __result)
std::uninitialized_copy	stl/stl_uninitialized.h	/^uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	namespace:std	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
std::uninitialized_copy_n	stl/stl_uninitialized.h	/^uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
std::uninitialized_fill	stl/stl_uninitialized.h	/^inline void uninitialized_fill(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)
std::uninitialized_fill_n	stl/stl_uninitialized.h	/^uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x)
std::unique	stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
std::unique	stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
std::unique_copy	stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
std::unique_copy	stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred)
std::upper_bound	stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
std::upper_bound	stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
std::value_type	stl/stl_deque.h	/^inline _Tp* value_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) { return 0; }$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
std::value_type	stl/stl_hashtable.h	/^value_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
std::value_type	stl/stl_hashtable.h	/^value_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
std::value_type	stl/stl_iterator.h	/^inline _Tp* value_type(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
std::value_type	stl/stl_iterator.h	/^value_type(const istream_iterator<_Tp, _Dist>&) { return (_Tp*) 0; }$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
std::value_type	stl/stl_iterator.h	/^value_type(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
std::value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const _Tp*) { return (_Tp*)(0); }$/;"	f	namespace:std	signature:(const _Tp*)
std::value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
std::value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
std::value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
std::value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
std::value_type	stl/stl_iterator_base.h	/^value_type(const _Iter& __i) { return __value_type(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
std::value_type	stl/stl_list.h	/^value_type(const _List_iterator<_Tp, _Ref, _Ptr>&)$/;"	f	namespace:std	signature:(const _List_iterator<_Tp, _Ref, _Ptr>&)
std::value_type	stl/stl_slist.h	/^inline _Tp* value_type(const _Slist_iterator<_Tp, _Ref, _Ptr>&) {$/;"	f	namespace:std	signature:(const _Slist_iterator<_Tp, _Ref, _Ptr>&)
std::value_type	stl/stl_tree.h	/^inline _Value* value_type(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&) {$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&)
std::vector	stl/stl_vector.h	/^class vector : protected _Vector_base<_Tp, _Alloc> $/;"	c	namespace:std	inherits:_Vector_base
std::vector::_Base	stl/stl_vector.h	/^  typedef _Vector_base<_Tp, _Alloc> _Base;$/;"	t	class:std::vector	access:private
std::vector::_Integral	stl/stl_vector.h	/^    typedef typename _Is_integer<_InputIterator>::_Integral _Integral;$/;"	t
std::vector::_M_allocate_and_copy	stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, _ForwardIterator __first, $/;"	f	class:std::vector	access:protected	signature:(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
std::vector::_M_allocate_and_copy	stl/stl_vector.h	/^  iterator _M_allocate_and_copy(size_type __n, const_iterator __first, $/;"	f	class:std::vector	access:protected	signature:(size_type __n, const_iterator __first, const_iterator __last)
std::vector::_M_assign_aux	stl/stl_vector.h	/^  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	p	class:std::vector	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::vector::_M_assign_aux	stl/stl_vector.h	/^  void _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	p	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::vector::_M_assign_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIter __first, _ForwardIter __last,$/;"	f	class:std::vector	signature:(_ForwardIter __first, _ForwardIter __last, forward_iterator_tag)
std::vector::_M_assign_aux	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_assign_aux(_InputIter __first, _InputIter __last,$/;"	f	class:std::vector	signature:(_InputIter __first, _InputIter __last, input_iterator_tag)
std::vector::_M_assign_dispatch	stl/stl_vector.h	/^  void _M_assign_dispatch(_InputIter __first, _InputIter __last, __false_type)$/;"	f	class:std::vector	access:public	signature:(_InputIter __first, _InputIter __last, __false_type)
std::vector::_M_assign_dispatch	stl/stl_vector.h	/^  void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	f	class:std::vector	access:public	signature:(_Integer __n, _Integer __val, __true_type)
std::vector::_M_deallocate	stl/stl_vector.h	/^    __STL_UNWIND(_M_deallocate(__result, __n));$/;"	p	signature:(__result, __n)
std::vector::_M_fill_assign	stl/stl_vector.h	/^  void _M_fill_assign(size_type __n, const _Tp& __val);$/;"	p	class:std::vector	access:public	signature:(size_type __n, const _Tp& __val)
std::vector::_M_fill_assign	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val) $/;"	f	class:std::vector	signature:(size_t __n, const value_type& __val)
std::vector::_M_fill_insert	stl/stl_vector.h	/^  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);$/;"	p	class:std::vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
std::vector::_M_fill_insert	stl/stl_vector.h	/^void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, $/;"	f	class:std::vector	signature:(iterator __position, size_type __n, const _Tp& __x)
std::vector::_M_initialize_aux	stl/stl_vector.h	/^  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_initialize_aux	stl/stl_vector.h	/^  void _M_initialize_aux(_Integer __n, _Integer __value, __true_type) {$/;"	f	class:std::vector	access:public	signature:(_Integer __n, _Integer __value, __true_type)
std::vector::_M_insert_aux	stl/stl_vector.h	/^  void _M_insert_aux(iterator __position);$/;"	p	class:std::vector	access:protected	signature:(iterator __position)
std::vector::_M_insert_aux	stl/stl_vector.h	/^  void _M_insert_aux(iterator __position, const _Tp& __x);$/;"	p	class:std::vector	access:protected	signature:(iterator __position, const _Tp& __x)
std::vector::_M_insert_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position)$/;"	f	class:std::vector	signature:(iterator __position)
std::vector::_M_insert_aux	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, const _Tp& __x)$/;"	f	class:std::vector	signature:(iterator __position, const _Tp& __x)
std::vector::_M_insert_dispatch	stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _Integer __n, _Integer __val, __true_type)
std::vector::_M_insert_dispatch	stl/stl_vector.h	/^  void _M_insert_dispatch(iterator __pos,$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
std::vector::_M_range_check	stl/stl_vector.h	/^  void _M_range_check(size_type __n) const {$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::_M_range_initialize	stl/stl_vector.h	/^  void _M_range_initialize(_ForwardIterator __first,$/;"	f	class:std::vector	access:protected	signature:(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::vector::_M_range_initialize	stl/stl_vector.h	/^  void _M_range_initialize(_InputIterator __first,  $/;"	f	class:std::vector	access:protected	signature:(_InputIterator __first, _InputIterator __last, input_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^  void _M_range_insert(iterator __pos,$/;"	p	class:std::vector	access:protected	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __pos, $/;"	f	class:std::vector	signature:(iterator __pos, _InputIterator __first, _InputIterator __last, input_iterator_tag)
std::vector::_M_range_insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::_M_range_insert(iterator __position,$/;"	f	class:std::vector	signature:(iterator __position, _ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag)
std::vector::__STD::swap	stl/stl_vector.h	/^    __STD::swap(_M_end_of_storage, __x._M_end_of_storage);$/;"	p	class:std::vector::__STD	signature:(_M_end_of_storage, __x._M_end_of_storage)
std::vector::__STD::swap	stl/stl_vector.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::vector::__STD	signature:(_M_finish, __x._M_finish)
std::vector::__STD::swap	stl/stl_vector.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::vector::__STD	signature:(_M_start, __x._M_start)
std::vector::__STL_CLASS_REQUIRES	stl/stl_vector.h	/^  __STL_CLASS_REQUIRES(_Tp, _Assignable);$/;"	p	class:std::vector	access:private	signature:(_Tp, _Assignable)
std::vector::__i	stl/stl_vector.h	/^    iterator __i = copy(__last, _M_finish, __first);$/;"	l
std::vector::__n	stl/stl_vector.h	/^    size_type __n = 0;$/;"	l
std::vector::__n	stl/stl_vector.h	/^    size_type __n = __position - begin();$/;"	l
std::vector::__old_size	stl/stl_vector.h	/^      const size_type __old_size = size();$/;"	l
std::vector::__result	stl/stl_vector.h	/^    iterator __result = _M_allocate(__n);$/;"	l
std::vector::__tmp	stl/stl_vector.h	/^      iterator __tmp = _M_allocate_and_copy(__n, _M_start, _M_finish);$/;"	l
std::vector::__x	stl/stl_vector.h	/^      _M_insert_aux(end(), __x);$/;"	l
std::vector::__x	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	l
std::vector::allocator_type	stl/stl_vector.h	/^  typedef typename _Base::allocator_type allocator_type;$/;"	t	class:std::vector	access:public
std::vector::assign	stl/stl_vector.h	/^  void assign(_InputIterator __first, _InputIterator __last) {$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last)
std::vector::assign	stl/stl_vector.h	/^  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }$/;"	f	class:std::vector	access:public	signature:(size_type __n, const _Tp& __val)
std::vector::at	stl/stl_vector.h	/^  const_reference at(size_type __n) const$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::at	stl/stl_vector.h	/^  reference at(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::back	stl/stl_vector.h	/^  const_reference back() const { return *(end() - 1); }$/;"	f	class:std::vector	access:public	signature:() const
std::vector::back	stl/stl_vector.h	/^  reference back() { return *(end() - 1); }$/;"	f	class:std::vector	access:public	signature:()
std::vector::begin	stl/stl_vector.h	/^  const_iterator begin() const { return _M_start; }$/;"	f	class:std::vector	access:public	signature:() const
std::vector::begin	stl/stl_vector.h	/^  iterator begin() { return _M_start; }$/;"	f	class:std::vector	access:public	signature:()
std::vector::begin	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
std::vector::capacity	stl/stl_vector.h	/^  size_type capacity() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::clear	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	f	class:std::vector	access:public	signature:()
std::vector::const_iterator	stl/stl_vector.h	/^  typedef const value_type* const_iterator;$/;"	t	class:std::vector	access:public
std::vector::const_pointer	stl/stl_vector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:std::vector	access:public
std::vector::const_reference	stl/stl_vector.h	/^  typedef const value_type& const_reference;$/;"	t	class:std::vector	access:public
std::vector::const_reverse_iterator	stl/stl_vector.h	/^                           difference_type>  const_reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::const_reverse_iterator	stl/stl_vector.h	/^  typedef reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::difference_type	stl/stl_vector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:std::vector	access:public
std::vector::empty	stl/stl_vector.h	/^  bool empty() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::end	stl/stl_vector.h	/^      _M_insert_aux(end());$/;"	p	signature:()
std::vector::end	stl/stl_vector.h	/^      _M_insert_aux(end(), __x);$/;"	p	signature:()
std::vector::end	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
std::vector::end	stl/stl_vector.h	/^  const_iterator end() const { return _M_finish; }$/;"	f	class:std::vector	access:public	signature:() const
std::vector::end	stl/stl_vector.h	/^  iterator end() { return _M_finish; }$/;"	f	class:std::vector	access:public	signature:()
std::vector::end	stl/stl_vector.h	/^  void clear() { erase(begin(), end()); }$/;"	p	signature:()
std::vector::erase	stl/stl_vector.h	/^  iterator erase(iterator __first, iterator __last) {$/;"	f	class:std::vector	access:public	signature:(iterator __first, iterator __last)
std::vector::erase	stl/stl_vector.h	/^  iterator erase(iterator __position) {$/;"	f	class:std::vector	access:public	signature:(iterator __position)
std::vector::front	stl/stl_vector.h	/^  const_reference front() const { return *begin(); }$/;"	f	class:std::vector	access:public	signature:() const
std::vector::front	stl/stl_vector.h	/^  reference front() { return *begin(); }$/;"	f	class:std::vector	access:public	signature:()
std::vector::get_allocator	stl/stl_vector.h	/^  allocator_type get_allocator() const { return _Base::get_allocator(); }$/;"	f	class:std::vector	access:public	signature:() const
std::vector::insert	stl/stl_vector.h	/^  iterator insert(iterator __position) {$/;"	f	class:std::vector	access:public	signature:(iterator __position)
std::vector::insert	stl/stl_vector.h	/^  iterator insert(iterator __position, const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(iterator __position, const _Tp& __x)
std::vector::insert	stl/stl_vector.h	/^  void insert (iterator __pos, size_type __n, const _Tp& __x)$/;"	f	class:std::vector	access:public	signature:(iterator __pos, size_type __n, const _Tp& __x)
std::vector::insert	stl/stl_vector.h	/^  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {$/;"	f	class:std::vector	access:public	signature:(iterator __pos, _InputIterator __first, _InputIterator __last)
std::vector::insert	stl/stl_vector.h	/^  void insert(iterator __position,$/;"	p	class:std::vector	access:public	signature:(iterator __position, const_iterator __first, const_iterator __last)
std::vector::insert	stl/stl_vector.h	/^vector<_Tp, _Alloc>::insert(iterator __position, $/;"	f	class:std::vector	signature:(iterator __position, const_iterator __first, const_iterator __last)
std::vector::iterator	stl/stl_vector.h	/^  typedef value_type* iterator;$/;"	t	class:std::vector	access:public
std::vector::max_size	stl/stl_vector.h	/^  size_type max_size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::operator =	stl/stl_vector.h	/^  vector<_Tp, _Alloc>& operator=(const vector<_Tp, _Alloc>& __x);$/;"	p	class:std::vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
std::vector::operator =	stl/stl_vector.h	/^vector<_Tp,_Alloc>::operator=(const vector<_Tp, _Alloc>& __x)$/;"	f	class:std::vector	signature:(const vector<_Tp, _Alloc>& __x)
std::vector::operator []	stl/stl_vector.h	/^  const_reference operator[](size_type __n) const { return *(begin() + __n); }$/;"	f	class:std::vector	access:public	signature:(size_type __n) const
std::vector::operator []	stl/stl_vector.h	/^  reference operator[](size_type __n) { return *(begin() + __n); }$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::pointer	stl/stl_vector.h	/^  typedef value_type* pointer;$/;"	t	class:std::vector	access:public
std::vector::pop_back	stl/stl_vector.h	/^  void pop_back() {$/;"	f	class:std::vector	access:public	signature:()
std::vector::push_back	stl/stl_vector.h	/^  void push_back() {$/;"	f	class:std::vector	access:public	signature:()
std::vector::push_back	stl/stl_vector.h	/^  void push_back(const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(const _Tp& __x)
std::vector::rbegin	stl/stl_vector.h	/^  const_reverse_iterator rbegin() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rbegin	stl/stl_vector.h	/^  reverse_iterator rbegin()$/;"	f	class:std::vector	access:public	signature:()
std::vector::reference	stl/stl_vector.h	/^  typedef value_type& reference;$/;"	t	class:std::vector	access:public
std::vector::rend	stl/stl_vector.h	/^  const_reverse_iterator rend() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::rend	stl/stl_vector.h	/^  reverse_iterator rend()$/;"	f	class:std::vector	access:public	signature:()
std::vector::reserve	stl/stl_vector.h	/^  void reserve(size_type __n) {$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::resize	stl/stl_vector.h	/^  void resize(size_type __new_size) { resize(__new_size, _Tp()); }$/;"	f	class:std::vector	access:public	signature:(size_type __new_size)
std::vector::resize	stl/stl_vector.h	/^  void resize(size_type __new_size, const _Tp& __x) {$/;"	f	class:std::vector	access:public	signature:(size_type __new_size, const _Tp& __x)
std::vector::reverse_iterator	stl/stl_vector.h	/^          reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::reverse_iterator	stl/stl_vector.h	/^  typedef reverse_iterator<iterator> reverse_iterator;$/;"	t	class:std::vector	access:public
std::vector::size	stl/stl_vector.h	/^      insert(end(), __new_size - size(), __x);$/;"	p	signature:()
std::vector::size	stl/stl_vector.h	/^  size_type size() const$/;"	f	class:std::vector	access:public	signature:() const
std::vector::size_type	stl/stl_vector.h	/^  typedef size_t size_type;$/;"	t	class:std::vector	access:public
std::vector::swap	stl/stl_vector.h	/^  void swap(vector<_Tp, _Alloc>& __x) {$/;"	f	class:std::vector	access:public	signature:(vector<_Tp, _Alloc>& __x)
std::vector::value_type	stl/stl_vector.h	/^  typedef _Tp value_type;$/;"	t	class:std::vector	access:public
std::vector::vector	stl/stl_vector.h	/^  explicit vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^  explicit vector(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
std::vector::vector	stl/stl_vector.h	/^  vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^  vector(const _Tp* __first, const _Tp* __last,$/;"	f	class:std::vector	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
std::vector::vector	stl/stl_vector.h	/^  vector(const vector<_Tp, _Alloc>& __x) $/;"	f	class:std::vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
std::vector::vector	stl/stl_vector.h	/^  vector(size_type __n, const _Tp& __value,$/;"	f	class:std::vector	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
std::vector::~vector	stl/stl_vector.h	/^  ~vector() { destroy(_M_start, _M_finish); }$/;"	f	class:std::vector	access:public	signature:()
std::width	stl/ropeimpl.h	/^        __o.width(__w);$/;"	p	signature:(__w)
std::wrope	stl/stl_rope.h	/^typedef rope<wchar_t> wrope;$/;"	t	namespace:std
std::wstring	stl/stl_string_fwd.h	/^typedef basic_string<wchar_t> wstring;$/;"	t	namespace:std
std::~_Tp	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	p	signature:()
std::~_Tp	stl/stl_construct.h	/^  __pointer->~_Tp();$/;"	p	signature:()
streambuf_type	stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::istreambuf_iterator	access:public
streambuf_type	stl/stl_iterator.h	/^  typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	access:public
string	stl/stl_string_fwd.h	/^typedef basic_string<char>    string;$/;"	t	namespace:std
substr	stl/stl_rope.h	/^        rope substr(const_iterator __start, const_iterator __end) const {$/;"	f	class:std::rope	access:public	signature:(const_iterator __start, const_iterator __end) const
substr	stl/stl_rope.h	/^        rope substr(iterator __start) const {$/;"	f	class:std::rope	access:public	signature:(iterator __start) const
substr	stl/stl_rope.h	/^        rope substr(iterator __start, iterator __end) const {$/;"	f	class:std::rope	access:public	signature:(iterator __start, iterator __end) const
substr	stl/stl_rope.h	/^        rope substr(size_t __start, size_t __len = 1) const {$/;"	f	class:std::rope	access:public	signature:(size_t __start, size_t __len = 1) const
substr	stl/stl_rope.h	/^        rope<_CharT,_Alloc> substr(const_iterator __start) {$/;"	f	class:std::rope	access:public	signature:(const_iterator __start)
subtractive_rng	stl/stl_function.h	/^  subtractive_rng() { _M_initialize(161803398u); }$/;"	f	class:std::subtractive_rng	access:public	signature:()
subtractive_rng	stl/stl_function.h	/^  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }$/;"	f	class:std::subtractive_rng	access:public	signature:(unsigned int __seed)
subtractive_rng	stl/stl_function.h	/^class subtractive_rng : public unary_function<unsigned int, unsigned int> {$/;"	c	namespace:std	inherits:unary_function
swap	stl/container_concepts.h	/^    __c.swap(__c);$/;"	p	signature:(__c)
swap	stl/stl_algobase.h	/^inline void swap(_Tp& __a, _Tp& __b) {$/;"	f	namespace:std	signature:(_Tp& __a, _Tp& __b)
swap	stl/stl_bvector.h	/^    __STD::swap(_M_end_of_storage, __x._M_end_of_storage);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_end_of_storage, __x._M_end_of_storage)
swap	stl/stl_bvector.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_finish, __x._M_finish)
swap	stl/stl_bvector.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::__BVECTOR::__STD	signature:(_M_start, __x._M_start)
swap	stl/stl_bvector.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_bvector.h	/^  void swap(__BVECTOR& __x) {$/;"	f	class:std::__BVECTOR	access:public	signature:(__BVECTOR& __x)
swap	stl/stl_bvector.h	/^inline void swap(_Bit_reference __x, _Bit_reference __y)$/;"	f	namespace:std	signature:(_Bit_reference __x, _Bit_reference __y)
swap	stl/stl_bvector.h	/^inline void swap(bit_vector& __x, bit_vector& __y) {$/;"	f	namespace:std	signature:(bit_vector& __x, bit_vector& __y)
swap	stl/stl_deque.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::deque::__STD	signature:(_M_finish, __x._M_finish)
swap	stl/stl_deque.h	/^    __STD::swap(_M_map, __x._M_map);$/;"	p	class:std::deque::__STD	signature:(_M_map, __x._M_map)
swap	stl/stl_deque.h	/^    __STD::swap(_M_map_size, __x._M_map_size);$/;"	p	class:std::deque::__STD	signature:(_M_map_size, __x._M_map_size)
swap	stl/stl_deque.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::deque::__STD	signature:(_M_start, __x._M_start)
swap	stl/stl_deque.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_deque.h	/^  void swap(deque& __x) {$/;"	f	class:std::deque	access:public	signature:(deque& __x)
swap	stl/stl_deque.h	/^inline void swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y) {$/;"	f	namespace:std	signature:(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
swap	stl/stl_hash_map.h	/^  __hm1.swap(__hm2);$/;"	p	signature:(__hm2)
swap	stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_map	access:public	signature:(hash_map& __hs)
swap	stl/stl_hash_map.h	/^  void swap(hash_map& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
swap	stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_multimap	access:public	signature:(hash_multimap& __hs)
swap	stl/stl_hash_map.h	/^  void swap(hash_multimap& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
swap	stl/stl_hash_map.h	/^swap(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_map<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
swap	stl/stl_hash_map.h	/^swap(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,$/;"	f	namespace:std	signature:(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1, hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm2)
swap	stl/stl_hash_set.h	/^  __hs1.swap(__hs2);$/;"	p	signature:(__hs2)
swap	stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	f	class:std::hash_multiset	access:public	signature:(hash_multiset& hs)
swap	stl/stl_hash_set.h	/^  void swap(hash_multiset& hs) { _M_ht.swap(hs._M_ht); }$/;"	p	signature:(hs._M_ht)
swap	stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	f	class:std::hash_set	access:public	signature:(hash_set& __hs)
swap	stl/stl_hash_set.h	/^  void swap(hash_set& __hs) { _M_ht.swap(__hs._M_ht); }$/;"	p	signature:(__hs._M_ht)
swap	stl/stl_hash_set.h	/^swap(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
swap	stl/stl_hash_set.h	/^swap(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,$/;"	f	namespace:std	signature:(hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1, hash_set<_Val,_HashFcn,_EqualKey,_Alloc>& __hs2)
swap	stl/stl_hashtable.h	/^        _M_buckets.swap(__tmp);$/;"	p	signature:(__tmp)
swap	stl/stl_hashtable.h	/^    _M_buckets.swap(__ht._M_buckets);$/;"	p	signature:(__ht._M_buckets)
swap	stl/stl_hashtable.h	/^    __STD::swap(_M_equals, __ht._M_equals);$/;"	p	class:std::hashtable::__STD	signature:(_M_equals, __ht._M_equals)
swap	stl/stl_hashtable.h	/^    __STD::swap(_M_get_key, __ht._M_get_key);$/;"	p	class:std::hashtable::__STD	signature:(_M_get_key, __ht._M_get_key)
swap	stl/stl_hashtable.h	/^    __STD::swap(_M_hash, __ht._M_hash);$/;"	p	class:std::hashtable::__STD	signature:(_M_hash, __ht._M_hash)
swap	stl/stl_hashtable.h	/^    __STD::swap(_M_num_elements, __ht._M_num_elements);$/;"	p	class:std::hashtable::__STD	signature:(_M_num_elements, __ht._M_num_elements)
swap	stl/stl_hashtable.h	/^  __ht1.swap(__ht2);$/;"	p	signature:(__ht2)
swap	stl/stl_hashtable.h	/^  void swap(hashtable& __ht)$/;"	f	class:std::hashtable	access:public	signature:(hashtable& __ht)
swap	stl/stl_hashtable.h	/^inline void swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,$/;"	f	namespace:std	signature:(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1, hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht2)
swap	stl/stl_list.h	/^        __carry.swap(__counter[__i++]);$/;"	p	signature:(__counter[__i++])
swap	stl/stl_list.h	/^      __carry.swap(__counter[__i]);         $/;"	p	signature:(__counter[__i])
swap	stl/stl_list.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	f	class:std::list	access:public	signature:(list<_Tp, _Alloc>& __x)
swap	stl/stl_list.h	/^  void swap(list<_Tp, _Alloc>& __x) { __STD::swap(_M_node, __x._M_node); }$/;"	p	class:std::list::__STD	signature:(_M_node, __x._M_node)
swap	stl/stl_list.h	/^swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
swap	stl/stl_map.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::map	access:public	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x)
swap	stl/stl_map.h	/^  void swap(map<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
swap	stl/stl_map.h	/^inline void swap(map<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(map<_Key,_Tp,_Compare,_Alloc>& __x, map<_Key,_Tp,_Compare,_Alloc>& __y)
swap	stl/stl_multimap.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::multimap	access:public	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x)
swap	stl/stl_multimap.h	/^  void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
swap	stl/stl_multimap.h	/^inline void swap(multimap<_Key,_Tp,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(multimap<_Key,_Tp,_Compare,_Alloc>& __x, multimap<_Key,_Tp,_Compare,_Alloc>& __y)
swap	stl/stl_multiset.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::multiset	access:public	signature:(multiset<_Key,_Compare,_Alloc>& __x)
swap	stl/stl_multiset.h	/^  void swap(multiset<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
swap	stl/stl_multiset.h	/^inline void swap(multiset<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(multiset<_Key,_Compare,_Alloc>& __x, multiset<_Key,_Compare,_Alloc>& __y)
swap	stl/stl_rope.h	/^        void swap(rope& __b) {$/;"	f	class:std::rope	access:public	signature:(rope& __b)
swap	stl/stl_rope.h	/^    inline void swap(_Rope_char_ref_proxy <_CharT, __Alloc > __a,$/;"	f	namespace:std	signature:(_Rope_char_ref_proxy <_CharT, __Alloc > __a, _Rope_char_ref_proxy <_CharT, __Alloc > __b)
swap	stl/stl_rope.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_rope.h	/^inline void swap(crope __x, crope __y) { __x.swap(__y); }$/;"	f	namespace:std	signature:(crope __x, crope __y)
swap	stl/stl_rope.h	/^inline void swap(crope __x, crope __y) { __x.swap(__y); }$/;"	p	signature:(__y)
swap	stl/stl_rope.h	/^inline void swap(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y) {$/;"	f	namespace:std	signature:(rope<_CharT,_Alloc>& __x, rope<_CharT,_Alloc>& __y)
swap	stl/stl_rope.h	/^inline void swap(wrope __x, wrope __y) { __x.swap(__y); }$/;"	f	namespace:std	signature:(wrope __x, wrope __y)
swap	stl/stl_rope.h	/^inline void swap(wrope __x, wrope __y) { __x.swap(__y); }$/;"	p	signature:(__y)
swap	stl/stl_set.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	f	class:std::set	access:public	signature:(set<_Key,_Compare,_Alloc>& __x)
swap	stl/stl_set.h	/^  void swap(set<_Key,_Compare,_Alloc>& __x) { _M_t.swap(__x._M_t); }$/;"	p	signature:(__x._M_t)
swap	stl/stl_set.h	/^inline void swap(set<_Key,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(set<_Key,_Compare,_Alloc>& __x, set<_Key,_Compare,_Alloc>& __y)
swap	stl/stl_slist.h	/^        __carry.swap(__counter[__i]);$/;"	p	signature:(__counter[__i])
swap	stl/stl_slist.h	/^      __carry.swap(__counter[__i]);$/;"	p	signature:(__counter[__i])
swap	stl/stl_slist.h	/^    { __STD::swap(this->_M_head._M_next, __x._M_head._M_next); }$/;"	p	class:std::slist::__STD	signature:(this->_M_head._M_next, __x._M_head._M_next)
swap	stl/stl_slist.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_slist.h	/^  void swap(slist& __x)$/;"	f	class:std::slist	access:public	signature:(slist& __x)
swap	stl/stl_slist.h	/^inline void swap(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y) {$/;"	f	namespace:std	signature:(slist<_Tp,_Alloc>& __x, slist<_Tp,_Alloc>& __y)
swap	stl/stl_tree.h	/^    __STD::swap(_M_header, __t._M_header);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_header, __t._M_header)
swap	stl/stl_tree.h	/^    __STD::swap(_M_key_compare, __t._M_key_compare);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_key_compare, __t._M_key_compare)
swap	stl/stl_tree.h	/^    __STD::swap(_M_node_count, __t._M_node_count);$/;"	p	class:std::_Rb_tree::__STD	signature:(_M_node_count, __t._M_node_count)
swap	stl/stl_tree.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_tree.h	/^  void swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t) {$/;"	f	class:std::_Rb_tree	access:public	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __t)
swap	stl/stl_tree.h	/^swap(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, $/;"	f	namespace:std	signature:(_Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __x, _Rb_tree<_Key,_Value,_KeyOfValue,_Compare,_Alloc>& __y)
swap	stl/stl_vector.h	/^    __STD::swap(_M_end_of_storage, __x._M_end_of_storage);$/;"	p	class:std::vector::__STD	signature:(_M_end_of_storage, __x._M_end_of_storage)
swap	stl/stl_vector.h	/^    __STD::swap(_M_finish, __x._M_finish);$/;"	p	class:std::vector::__STD	signature:(_M_finish, __x._M_finish)
swap	stl/stl_vector.h	/^    __STD::swap(_M_start, __x._M_start);$/;"	p	class:std::vector::__STD	signature:(_M_start, __x._M_start)
swap	stl/stl_vector.h	/^  __x.swap(__y);$/;"	p	signature:(__y)
swap	stl/stl_vector.h	/^  void swap(vector<_Tp, _Alloc>& __x) {$/;"	f	class:std::vector	access:public	signature:(vector<_Tp, _Alloc>& __x)
swap	stl/stl_vector.h	/^inline void swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	f	namespace:std	signature:(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
swap_ranges	stl/stl_algo.h	/^_ForwardIter2 swap_ranges(_ForwardIter1 __first1, _ForwardIter1 __last1,$/;"	f	namespace:std	signature:(_ForwardIter1 __first1, _ForwardIter1 __last1, _ForwardIter2 __first2)
t1	stl/concept_checks.h	/^    __check_equal<_TypeX> t1 = __check_equal<_TypeY>();$/;"	l
temporary_buffer	stl/stl_tempbuf.h	/^  temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::temporary_buffer	access:public	signature:(_ForwardIterator __first, _ForwardIterator __last)
temporary_buffer	stl/stl_tempbuf.h	/^struct temporary_buffer : public _Temporary_buffer<_ForwardIterator, _Tp>$/;"	s	namespace:std	inherits:_Temporary_buffer
this_dummy_member_must_be_first	stl/type_traits.h	/^   typedef __true_type     this_dummy_member_must_be_first;$/;"	t	struct:__type_traits	access:public
tmp	stl/defalloc.h	/^    T* tmp = (T*)(::operator new((size_t)(size * sizeof(T))));$/;"	l
to_char_type	stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const int_type& __c)
to_char_type	stl/char_traits.h	/^  static char_type to_char_type(const int_type& __c) {$/;"	f	class:std::char_traits	access:public	signature:(const int_type& __c)
to_int_type	stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:std::__char_traits_base	access:public	signature:(const char_type& __c)
to_int_type	stl/char_traits.h	/^  static int_type to_int_type(const char_type& __c) {$/;"	f	class:std::char_traits	access:public	signature:(const char_type& __c)
top	stl/stl_queue.h	/^  const_reference top() const { return c.front(); }$/;"	f	class:std::priority_queue	access:public	signature:() const
top	stl/stl_stack.h	/^  const_reference top() const { return c.back(); }$/;"	f	class:std::stack	access:public	signature:() const
top	stl/stl_stack.h	/^  reference top() { return c.back(); }$/;"	f	class:std::stack	access:public	signature:()
traits_type	stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:std::istreambuf_iterator	access:public
traits_type	stl/stl_iterator.h	/^  typedef _Traits                          traits_type;$/;"	t	class:std::ostreambuf_iterator	access:public
traits_type	stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:std::istream_iterator	access:public
traits_type	stl/stl_iterator.h	/^  typedef _Traits                        traits_type;$/;"	t	class:std::ostream_iterator	access:public
transfer	stl/stl_list.h	/^  void transfer(iterator __position, iterator __first, iterator __last) {$/;"	f	class:std::list	access:protected	signature:(iterator __position, iterator __first, iterator __last)
transform	stl/stl_algo.h	/^_OutputIter transform(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _UnaryOperation __opr)
transform	stl/stl_algo.h	/^_OutputIter transform(_InputIter1 __first1, _InputIter1 __last1,$/;"	f	namespace:std	signature:(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2, _OutputIter __result, _BinaryOperation __binary_op)
true	stl/stl_config.h	428;"	d
typename	stl/stl_config.h	433;"	d
unary_compose	stl/stl_function.h	/^  unary_compose(const _Operation1& __x, const _Operation2& __y) $/;"	f	class:std::unary_compose	access:public	signature:(const _Operation1& __x, const _Operation2& __y)
unary_compose	stl/stl_function.h	/^class unary_compose$/;"	c	namespace:std	inherits:unary_function
unary_function	stl/stl_function.h	/^struct unary_function {$/;"	s	namespace:std
unary_negate	stl/stl_function.h	/^  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	f	class:std::unary_negate	access:public	signature:(const _Predicate& __x)
unary_negate	stl/stl_function.h	/^class unary_negate$/;"	c	namespace:std	inherits:unary_function
uninitialized_copy	stl/stl_uninitialized.h	/^  uninitialized_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _ForwardIter __result)
uninitialized_copy	stl/stl_uninitialized.h	/^inline char* uninitialized_copy(const char* __first, const char* __last,$/;"	f	namespace:std	signature:(const char* __first, const char* __last, char* __result)
uninitialized_copy	stl/stl_uninitialized.h	/^uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	f	namespace:std	signature:(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
uninitialized_copy_n	stl/stl_uninitialized.h	/^uninitialized_copy_n(_InputIter __first, _Size __count,$/;"	f	namespace:std	signature:(_InputIter __first, _Size __count, _ForwardIter __result)
uninitialized_fill	stl/stl_uninitialized.h	/^inline void uninitialized_fill(_ForwardIter __first,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __x)
uninitialized_fill_n	stl/stl_uninitialized.h	/^uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	signature:(_ForwardIter __first, _Size __n, const _Tp& __x)
unique	stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last) {$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last)
unique	stl/stl_algo.h	/^_ForwardIter unique(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, _BinaryPredicate __binary_pred)
unique	stl/stl_list.h	/^  template <class _BinaryPredicate> void unique(_BinaryPredicate);$/;"	p	class:std::list	access:public	signature:(_BinaryPredicate)
unique	stl/stl_list.h	/^  void unique();$/;"	p	class:std::list	access:public	signature:()
unique	stl/stl_list.h	/^void list<_Tp, _Alloc>::unique()$/;"	f	class:std::list	signature:()
unique	stl/stl_list.h	/^void list<_Tp, _Alloc>::unique(_BinaryPredicate __binary_pred)$/;"	f	class:std::list	signature:(_BinaryPredicate __binary_pred)
unique	stl/stl_slist.h	/^  void unique(); $/;"	p	class:std::slist	access:public	signature:()
unique	stl/stl_slist.h	/^  void unique(_BinaryPredicate __pred); $/;"	p	class:std::slist	access:public	signature:(_BinaryPredicate __pred)
unique	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique()$/;"	f	class:std::slist	signature:()
unique	stl/stl_slist.h	/^void slist<_Tp,_Alloc>::unique(_BinaryPredicate __pred)$/;"	f	class:std::slist	signature:(_BinaryPredicate __pred)
unique_copy	stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result)
unique_copy	stl/stl_algo.h	/^inline _OutputIter unique_copy(_InputIter __first, _InputIter __last,$/;"	f	namespace:std	signature:(_InputIter __first, _InputIter __last, _OutputIter __result, _BinaryPredicate __binary_pred)
upper_bound	stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val)
upper_bound	stl/stl_algo.h	/^inline _ForwardIter upper_bound(_ForwardIter __first, _ForwardIter __last,$/;"	f	namespace:std	signature:(_ForwardIter __first, _ForwardIter __last, const _Tp& __val, _Compare __comp)
upper_bound	stl/stl_map.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::map	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_map.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:std::map	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_multimap.h	/^  const_iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_multimap.h	/^  iterator upper_bound(const key_type& __x) {return _M_t.upper_bound(__x); }$/;"	f	class:std::multimap	access:public	signature:(const key_type& __x)
upper_bound	stl/stl_multiset.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::multiset	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_set.h	/^  iterator upper_bound(const key_type& __x) const {$/;"	f	class:std::set	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_tree.h	/^  ::upper_bound(const _Key& __k) const$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k) const
upper_bound	stl/stl_tree.h	/^  ::upper_bound(const _Key& __k)$/;"	f	class:std::_Rb_tree	signature:(const _Key& __k)
upper_bound	stl/stl_tree.h	/^  const_iterator upper_bound(const key_type& __x) const;$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x) const
upper_bound	stl/stl_tree.h	/^  iterator upper_bound(const key_type& __x);$/;"	p	class:std::_Rb_tree	access:public	signature:(const key_type& __x)
value	stl/stl_function.h	/^  typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	access:protected
value	stl/stl_function.h	/^  typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	access:protected
value_comp	stl/stl_map.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:std::map	access:public	signature:() const
value_comp	stl/stl_multimap.h	/^  value_compare value_comp() const { return value_compare(_M_t.key_comp()); }$/;"	f	class:std::multimap	access:public	signature:() const
value_comp	stl/stl_multiset.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::multiset	access:public	signature:() const
value_comp	stl/stl_set.h	/^  value_compare value_comp() const { return _M_t.key_comp(); }$/;"	f	class:std::set	access:public	signature:() const
value_compare	stl/stl_map.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:std::map::value_compare	access:protected	signature:(_Compare __c)
value_compare	stl/stl_map.h	/^  class value_compare$/;"	c	class:std::map	inherits:binary_function	access:public
value_compare	stl/stl_multimap.h	/^    value_compare(_Compare __c) : comp(__c) {}$/;"	f	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
value_compare	stl/stl_multimap.h	/^  class value_compare : public binary_function<value_type, value_type, bool> {$/;"	c	class:std::multimap	inherits:binary_function	access:public
value_compare	stl/stl_multiset.h	/^  typedef _Compare value_compare;$/;"	t	class:std::multiset	access:public
value_compare	stl/stl_set.h	/^  typedef _Compare value_compare;$/;"	t	class:std::set	access:public
value_type	stl/concept_checks.h	/^    value_type;$/;"	t
value_type	stl/concept_checks.h	/^  typedef typename __STD::iterator_traits<_Iter>::value_type value_type;$/;"	t	struct:__value_type_type_definition_requirement_violation	access:public
value_type	stl/concept_checks.h	/^__STL_TYPEDEF_REQUIREMENT(value_type);$/;"	v
value_type	stl/defalloc.h	/^    typedef T value_type;$/;"	t	class:allocator	access:public
value_type	stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	class:std::allocator	access:public
value_type	stl/stl_alloc.h	/^  typedef _Tp        value_type;$/;"	t	struct:std::__allocator	access:public
value_type	stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:__allocator	access:private
value_type	stl/stl_alloc.h	/^  typedef void        value_type;$/;"	t	class:std::allocator	access:public
value_type	stl/stl_bvector.h	/^  typedef bool value_type;$/;"	t	class:std::__BVECTOR	access:public
value_type	stl/stl_deque.h	/^    { _M_fill_initialize(value_type()); }$/;"	p	signature:()
value_type	stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	class:std::deque	access:public
value_type	stl/stl_deque.h	/^  typedef _Tp value_type;$/;"	t	struct:std::_Deque_iterator	access:public
value_type	stl/stl_deque.h	/^inline _Tp* value_type(const _Deque_iterator<_Tp,_Ref,_Ptr>&) { return 0; }$/;"	f	namespace:std	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr>&)
value_type	stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_map	access:public
value_type	stl/stl_hash_map.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_multimap	access:public
value_type	stl/stl_hash_map.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
value_type	stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_multiset	access:public
value_type	stl/stl_hash_set.h	/^  typedef typename _Ht::value_type value_type;$/;"	t	class:std::hash_set	access:public
value_type	stl/stl_hash_set.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	class:std::hashtable	access:public
value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:std::_Hashtable_const_iterator	access:public
value_type	stl/stl_hashtable.h	/^  typedef _Val value_type;$/;"	t	struct:std::_Hashtable_iterator	access:public
value_type	stl/stl_hashtable.h	/^value_type(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_const_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
value_type	stl/stl_hashtable.h	/^value_type(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)$/;"	f	namespace:std	signature:(const _Hashtable_iterator<_Val,_Key,_HF,_ExK,_EqK,_All>&)
value_type	stl/stl_iterator.h	/^          value_type;$/;"	t	class:std::reverse_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef _Tp                            value_type;$/;"	t	class:std::istream_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:std::reverse_bidirectional_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef _Tp                        value_type;$/;"	t	class:std::reverse_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef _Tp                 value_type;$/;"	t	class:std::istream_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef void                           value_type;$/;"	t	class:std::ostream_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::back_insert_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::front_insert_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
value_type	stl/stl_iterator.h	/^  typedef void                value_type;$/;"	t	class:std::ostream_iterator	access:public
value_type	stl/stl_iterator.h	/^inline _Tp* value_type(const reverse_iterator<_RandomAccessIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_iterator<_RandomAccessIterator, _Tp, _Reference, _Distance>&)
value_type	stl/stl_iterator.h	/^value_type(const istream_iterator<_Tp, _Dist>&) { return (_Tp*) 0; }$/;"	f	namespace:std	signature:(const istream_iterator<_Tp, _Dist>&)
value_type	stl/stl_iterator.h	/^value_type(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp,$/;"	f	namespace:std	signature:(const reverse_bidirectional_iterator<_BidirectionalIterator, _Tp, _Reference, _Distance>&)
value_type	stl/stl_iterator_base.h	/^  typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	access:public
value_type	stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:std::bidirectional_iterator	access:public
value_type	stl/stl_iterator_base.h	/^  typedef _Tp                        value_type;$/;"	t	struct:std::random_access_iterator	access:public
value_type	stl/stl_iterator_base.h	/^  typedef _Tp                  value_type;$/;"	t	struct:std::forward_iterator	access:public
value_type	stl/stl_iterator_base.h	/^  typedef _Tp                value_type;$/;"	t	struct:std::input_iterator	access:public
value_type	stl/stl_iterator_base.h	/^  typedef _Tp        value_type;$/;"	t	struct:std::iterator	access:public
value_type	stl/stl_iterator_base.h	/^  typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	access:public
value_type	stl/stl_iterator_base.h	/^  typedef void                value_type;$/;"	t	struct:std::output_iterator	access:public
value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const _Tp*) { return (_Tp*)(0); }$/;"	f	namespace:std	signature:(const _Tp*)
value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const bidirectional_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const bidirectional_iterator<_Tp, _Distance>&)
value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const forward_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const forward_iterator<_Tp, _Distance>&)
value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const input_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const input_iterator<_Tp, _Distance>&)
value_type	stl/stl_iterator_base.h	/^inline _Tp* value_type(const random_access_iterator<_Tp, _Distance>&)$/;"	f	namespace:std	signature:(const random_access_iterator<_Tp, _Distance>&)
value_type	stl/stl_iterator_base.h	/^value_type(const _Iter& __i) { return __value_type(__i); }$/;"	f	namespace:std	signature:(const _Iter& __i)
value_type	stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	class:std::list	access:public
value_type	stl/stl_list.h	/^  typedef _Tp value_type;$/;"	t	struct:std::_List_iterator	access:public
value_type	stl/stl_list.h	/^value_type(const _List_iterator<_Tp, _Ref, _Ptr>&)$/;"	f	namespace:std	signature:(const _List_iterator<_Tp, _Ref, _Ptr>&)
value_type	stl/stl_map.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:std::map	access:public
value_type	stl/stl_multimap.h	/^  typedef pair<const _Key, _Tp> value_type;$/;"	t	class:std::multimap	access:public
value_type	stl/stl_multiset.h	/^  typedef _Key     value_type;$/;"	t	class:std::multiset	access:public
value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::priority_queue	access:public
value_type	stl/stl_queue.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::queue	access:public
value_type	stl/stl_raw_storage_iter.h	/^  typedef void                value_type;$/;"	t	class:std::raw_storage_iterator	access:public
value_type	stl/stl_rope.h	/^            typedef typename _Sequence::value_type value_type;$/;"	t	class:std::sequence_buffer	access:public
value_type	stl/stl_rope.h	/^        typedef _CharT value_type;$/;"	t	class:std::rope	access:public
value_type	stl/stl_set.h	/^  typedef _Key     value_type;$/;"	t	class:std::set	access:public
value_type	stl/stl_slist.h	/^  typedef _Tp                value_type;$/;"	t	class:std::slist	access:public
value_type	stl/stl_slist.h	/^  typedef _Tp              value_type;$/;"	t	struct:std::_Slist_iterator	access:public
value_type	stl/stl_slist.h	/^  typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
value_type	stl/stl_slist.h	/^inline _Tp* value_type(const _Slist_iterator<_Tp, _Ref, _Ptr>&) {$/;"	f	namespace:std	signature:(const _Slist_iterator<_Tp, _Ref, _Ptr>&)
value_type	stl/stl_stack.h	/^  typedef typename _Sequence::value_type      value_type;$/;"	t	class:std::stack	access:public
value_type	stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	class:std::_Rb_tree	access:public
value_type	stl/stl_tree.h	/^  typedef _Value value_type;$/;"	t	struct:std::_Rb_tree_iterator	access:public
value_type	stl/stl_tree.h	/^inline _Value* value_type(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&) {$/;"	f	namespace:std	signature:(const _Rb_tree_iterator<_Value, _Ref, _Ptr>&)
value_type	stl/stl_vector.h	/^  typedef _Tp value_type;$/;"	t	class:std::vector	access:public
vector	stl/stl_vector.h	/^  explicit vector(const allocator_type& __a = allocator_type())$/;"	f	class:std::vector	access:public	signature:(const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^  explicit vector(size_type __n)$/;"	f	class:std::vector	access:public	signature:(size_type __n)
vector	stl/stl_vector.h	/^  vector(_InputIterator __first, _InputIterator __last,$/;"	f	class:std::vector	access:public	signature:(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^  vector(const _Tp* __first, const _Tp* __last,$/;"	f	class:std::vector	access:public	signature:(const _Tp* __first, const _Tp* __last, const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^  vector(const vector<_Tp, _Alloc>& __x) $/;"	f	class:std::vector	access:public	signature:(const vector<_Tp, _Alloc>& __x)
vector	stl/stl_vector.h	/^  vector(size_type __n, const _Tp& __value,$/;"	f	class:std::vector	access:public	signature:(size_type __n, const _Tp& __value, const allocator_type& __a = allocator_type())
vector	stl/stl_vector.h	/^class vector : protected _Vector_base<_Tp, _Alloc> $/;"	c	namespace:std	inherits:_Vector_base
width	stl/ropeimpl.h	/^        __o.width(__w);$/;"	p	signature:(__w)
write	stl/stl_rope.h	/^        sequence_buffer& write(value_type* __s, size_t __len)$/;"	f	class:std::sequence_buffer	access:public	signature:(value_type* __s, size_t __len)
wrope	stl/stl_rope.h	/^typedef rope<wchar_t> wrope;$/;"	t	namespace:std
wstring	stl/stl_string_fwd.h	/^typedef basic_string<wchar_t> wstring;$/;"	t	namespace:std
~_Bvector_base	stl/stl_bvector.h	/^  ~_Bvector_base() { _Base::_M_deallocate(); }$/;"	f	class:std::_Bvector_base	access:public	signature:()
~_Bvector_base	stl/stl_bvector.h	/^  ~_Bvector_base() { _M_deallocate(); }$/;"	f	class:std::_Bvector_base	access:public	signature:()
~_Deque_base	stl/stl_deque.h	/^  ~_Deque_base();    $/;"	p	class:std::_Deque_base	access:public	signature:()
~_Deque_base	stl/stl_deque.h	/^_Deque_base<_Tp,_Alloc>::~_Deque_base() {$/;"	f	class:std::_Deque_base	signature:()
~_List_base	stl/stl_list.h	/^  ~_List_base() {$/;"	f	class:std::_List_base	access:public	signature:()
~_Lock	stl/stl_alloc.h	/^            ~_Lock() { __NODE_ALLOCATOR_UNLOCK; }$/;"	f	class:std::__default_alloc_template::_Lock	access:public	signature:()
~_Rb_tree	stl/stl_tree.h	/^  ~_Rb_tree() { clear(); }$/;"	f	class:std::_Rb_tree	access:public	signature:()
~_Rb_tree_base	stl/stl_tree.h	/^  ~_Rb_tree_base() { _M_put_node(_M_header); }$/;"	f	struct:std::_Rb_tree_base	access:public	signature:()
~_Rope_RopeConcatenation	stl/ropeimpl.h	/^		       ~_Rope_RopeConcatenation();$/;"	p	class:std::_Rope_RopeConcatenation	signature:()
~_Rope_RopeConcatenation	stl/stl_rope.h	/^    ~_Rope_RopeConcatenation() {$/;"	f	struct:std::_Rope_RopeConcatenation	access:public	signature:()
~_Rope_RopeFunction	stl/ropeimpl.h	/^	        __f->_Rope_RopeFunction<_CharT,_Alloc>::~_Rope_RopeFunction();$/;"	p	class:std::_Rope_RopeFunction	signature:()
~_Rope_RopeFunction	stl/stl_rope.h	/^    ~_Rope_RopeFunction() {$/;"	f	struct:std::_Rope_RopeFunction	access:public	signature:()
~_Rope_RopeLeaf	stl/ropeimpl.h	/^	        __l->_Rope_RopeLeaf<_CharT,_Alloc>::~_Rope_RopeLeaf();$/;"	p	class:std::_Rope_RopeLeaf	signature:()
~_Rope_RopeLeaf	stl/stl_rope.h	/^    ~_Rope_RopeLeaf() {$/;"	f	struct:std::_Rope_RopeLeaf	access:public	signature:()
~_Rope_RopeSubstring	stl/ropeimpl.h	/^		        ~_Rope_RopeSubstring();$/;"	p	class:std::_Rope_RopeSubstring	signature:()
~_Rope_RopeSubstring	stl/stl_rope.h	/^    virtual ~_Rope_RopeSubstring()$/;"	f	struct:std::_Rope_RopeSubstring	access:public	signature:()
~_Rope_char_consumer	stl/stl_rope.h	/^        virtual ~_Rope_char_consumer() {};$/;"	f	class:std::_Rope_char_consumer	access:public	signature:()
~_Rope_find_char_char_consumer	stl/ropeimpl.h	/^	~_Rope_find_char_char_consumer() {}$/;"	f	class:std::_Rope_find_char_char_consumer	access:public	signature:()
~_Rope_flatten_char_consumer	stl/ropeimpl.h	/^	~_Rope_flatten_char_consumer() {}$/;"	f	class:std::_Rope_flatten_char_consumer	access:public	signature:()
~_Rope_insert_char_consumer	stl/ropeimpl.h	/^	~_Rope_insert_char_consumer() { };$/;"	f	class:std::_Rope_insert_char_consumer	access:public	signature:()
~_Rope_iterator	stl/stl_rope.h	/^    ~_Rope_iterator() {$/;"	f	class:std::_Rope_iterator	access:public	signature:()
~_Rope_self_destruct_ptr	stl/stl_rope.h	/^    ~_Rope_self_destruct_ptr() $/;"	f	struct:std::_Rope_self_destruct_ptr	access:public	signature:()
~_STL_auto_lock	stl/stl_threads.h	/^  ~_STL_auto_lock() { _M_lock._M_release_lock(); }$/;"	f	struct:std::_STL_auto_lock	access:public	signature:()
~_Slist_base	stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&_M_head, 0); }$/;"	f	struct:std::_Slist_base	access:public	signature:()
~_Slist_base	stl/stl_slist.h	/^  ~_Slist_base() { _M_erase_after(&this->_M_head, 0); }$/;"	f	struct:std::_Slist_base	access:public	signature:()
~_Temporary_buffer	stl/stl_tempbuf.h	/^  ~_Temporary_buffer() {  $/;"	f	class:std::_Temporary_buffer	access:public	signature:()
~_Tp	stl/stl_alloc.h	/^  void destroy(pointer __p) { __p->~_Tp(); }$/;"	p	signature:()
~_Tp	stl/stl_construct.h	/^  __pointer->~_Tp();$/;"	p	signature:()
~_Vector_base	stl/stl_vector.h	/^  ~_Vector_base() { _M_deallocate(_M_start, _M_end_of_storage - _M_start); }$/;"	f	struct:std::_Vector_base	access:public	signature:()
~__VECTOR	stl/stl_bvector.h	/^  ~__VECTOR() { }$/;"	f	class:std::__BVECTOR	access:public	signature:()
~char_producer	stl/stl_rope.h	/^        virtual ~char_producer() {};$/;"	f	class:std::char_producer	access:public	signature:()
~deque	stl/stl_deque.h	/^  ~deque() { destroy(_M_start, _M_finish); }$/;"	f	class:std::deque	access:public	signature:()
~hashtable	stl/stl_hashtable.h	/^  ~hashtable() { clear(); }$/;"	f	class:std::hashtable	access:public	signature:()
~list	stl/stl_list.h	/^  ~list() { }$/;"	f	class:std::list	access:public	signature:()
~rb_tree	stl/stl_tree.h	/^  ~rb_tree() {}$/;"	f	struct:std::rb_tree	access:public	signature:()
~rope	stl/stl_rope.h	/^        ~rope()$/;"	f	class:std::rope	access:public	signature:()
~sequence_buffer	stl/stl_rope.h	/^        ~sequence_buffer() { flush(); }$/;"	f	class:std::sequence_buffer	access:public	signature:()
~slist	stl/stl_slist.h	/^  ~slist() {}$/;"	f	class:std::slist	access:public	signature:()
~temporary_buffer	stl/stl_tempbuf.h	/^  ~temporary_buffer() {}$/;"	f	struct:std::temporary_buffer	access:public	signature:()
~vector	stl/stl_vector.h	/^  ~vector() { destroy(_M_start, _M_finish); }$/;"	f	class:std::vector	access:public	signature:()
